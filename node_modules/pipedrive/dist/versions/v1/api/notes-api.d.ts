/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddNoteRequest } from '../models';
import { CommentPostPutObject } from '../models';
import { DeleteCommentResponse } from '../models';
import { DeleteNoteResponse } from '../models';
import { GetCommentsResponse } from '../models';
import { GetNotesResponse } from '../models';
import { NoteRequest } from '../models';
import { UpsertCommentResponse } from '../models';
import { UpsertNoteResponse } from '../models';
/**
 * NotesApi - axios parameter creator
 * @export
 */
export declare const NotesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {AddNoteRequest} [AddNoteRequest]

     * @throws {RequiredError}
     */
    addNote: (AddNoteRequest?: AddNoteRequest) => Promise<RequestArgs>;
    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {number} id The ID of the note
     * @param {CommentPostPutObject} [CommentPostPutObject]

     * @throws {RequiredError}
     */
    addNoteComment: (id: number, CommentPostPutObject?: CommentPostPutObject) => Promise<RequestArgs>;
    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment

     * @throws {RequiredError}
     */
    deleteComment: (id: number, commentId: string) => Promise<RequestArgs>;
    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {number} id The ID of the note

     * @throws {RequiredError}
     */
    deleteNote: (id: number) => Promise<RequestArgs>;
    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment

     * @throws {RequiredError}
     */
    getComment: (id: number, commentId: string) => Promise<RequestArgs>;
    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {number} id The ID of the note

     * @throws {RequiredError}
     */
    getNote: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {number} id The ID of the note
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getNoteComments: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {number} [user_id] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
     * @param {string} [lead_id] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
     * @param {number} [deal_id] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
     * @param {number} [person_id] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
     * @param {number} [org_id] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @param {string} [start_date] The date in format of YYYY-MM-DD from which notes to fetch
     * @param {string} [end_date] The date in format of YYYY-MM-DD until which notes to fetch to
     * @param {0 | 1} [pinned_to_lead_flag] If set, the results are filtered by note to lead pinning state
     * @param {0 | 1} [pinned_to_deal_flag] If set, the results are filtered by note to deal pinning state
     * @param {0 | 1} [pinned_to_organization_flag] If set, the results are filtered by note to organization pinning state
     * @param {0 | 1} [pinned_to_person_flag] If set, the results are filtered by note to person pinning state

     * @throws {RequiredError}
     */
    getNotes: (user_id?: number, lead_id?: string, deal_id?: number, person_id?: number, org_id?: number, start?: number, limit?: number, sort?: string, start_date?: string, end_date?: string, pinned_to_lead_flag?: 0 | 1, pinned_to_deal_flag?: 0 | 1, pinned_to_organization_flag?: 0 | 1, pinned_to_person_flag?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment
     * @param {CommentPostPutObject} [CommentPostPutObject]

     * @throws {RequiredError}
     */
    updateCommentForNote: (id: number, commentId: string, CommentPostPutObject?: CommentPostPutObject) => Promise<RequestArgs>;
    /**
     * Updates a note.
     * @summary Update a note
     * @param {number} id The ID of the note
     * @param {NoteRequest} [NoteRequest]

     * @throws {RequiredError}
     */
    updateNote: (id: number, NoteRequest?: NoteRequest) => Promise<RequestArgs>;
};
/**
 * NotesApi - functional programming interface
 * @export
 */
export declare const NotesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {AddNoteRequest} [AddNoteRequest]

     * @throws {RequiredError}
     */
    addNote(AddNoteRequest?: AddNoteRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertNoteResponse>>;
    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {number} id The ID of the note
     * @param {CommentPostPutObject} [CommentPostPutObject]

     * @throws {RequiredError}
     */
    addNoteComment(id: number, CommentPostPutObject?: CommentPostPutObject): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertCommentResponse>>;
    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment

     * @throws {RequiredError}
     */
    deleteComment(id: number, commentId: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteCommentResponse>>;
    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {number} id The ID of the note

     * @throws {RequiredError}
     */
    deleteNote(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteNoteResponse>>;
    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment

     * @throws {RequiredError}
     */
    getComment(id: number, commentId: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertCommentResponse>>;
    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {number} id The ID of the note

     * @throws {RequiredError}
     */
    getNote(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertNoteResponse>>;
    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {number} id The ID of the note
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getNoteComments(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCommentsResponse>>;
    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {number} [user_id] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
     * @param {string} [lead_id] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
     * @param {number} [deal_id] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
     * @param {number} [person_id] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
     * @param {number} [org_id] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @param {string} [start_date] The date in format of YYYY-MM-DD from which notes to fetch
     * @param {string} [end_date] The date in format of YYYY-MM-DD until which notes to fetch to
     * @param {0 | 1} [pinned_to_lead_flag] If set, the results are filtered by note to lead pinning state
     * @param {0 | 1} [pinned_to_deal_flag] If set, the results are filtered by note to deal pinning state
     * @param {0 | 1} [pinned_to_organization_flag] If set, the results are filtered by note to organization pinning state
     * @param {0 | 1} [pinned_to_person_flag] If set, the results are filtered by note to person pinning state

     * @throws {RequiredError}
     */
    getNotes(user_id?: number, lead_id?: string, deal_id?: number, person_id?: number, org_id?: number, start?: number, limit?: number, sort?: string, start_date?: string, end_date?: string, pinned_to_lead_flag?: 0 | 1, pinned_to_deal_flag?: 0 | 1, pinned_to_organization_flag?: 0 | 1, pinned_to_person_flag?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetNotesResponse>>;
    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment
     * @param {CommentPostPutObject} [CommentPostPutObject]

     * @throws {RequiredError}
     */
    updateCommentForNote(id: number, commentId: string, CommentPostPutObject?: CommentPostPutObject): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertCommentResponse>>;
    /**
     * Updates a note.
     * @summary Update a note
     * @param {number} id The ID of the note
     * @param {NoteRequest} [NoteRequest]

     * @throws {RequiredError}
     */
    updateNote(id: number, NoteRequest?: NoteRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertNoteResponse>>;
};
/**
 * NotesApi - factory interface
 * @export
 */
export declare const NotesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {NotesApiAddNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addNote(requestParameters?: NotesApiAddNoteRequest): Promise<UpsertNoteResponse>;
    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {NotesApiAddNoteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addNoteComment(requestParameters: NotesApiAddNoteCommentRequest): Promise<UpsertCommentResponse>;
    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {NotesApiDeleteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteComment(requestParameters: NotesApiDeleteCommentRequest): Promise<DeleteCommentResponse>;
    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {NotesApiDeleteNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteNote(requestParameters: NotesApiDeleteNoteRequest): Promise<DeleteNoteResponse>;
    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {NotesApiGetCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getComment(requestParameters: NotesApiGetCommentRequest): Promise<UpsertCommentResponse>;
    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {NotesApiGetNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getNote(requestParameters: NotesApiGetNoteRequest): Promise<UpsertNoteResponse>;
    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {NotesApiGetNoteCommentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getNoteComments(requestParameters: NotesApiGetNoteCommentsRequest): Promise<GetCommentsResponse>;
    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {NotesApiGetNotesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getNotes(requestParameters?: NotesApiGetNotesRequest): Promise<GetNotesResponse>;
    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {NotesApiUpdateCommentForNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateCommentForNote(requestParameters: NotesApiUpdateCommentForNoteRequest): Promise<UpsertCommentResponse>;
    /**
     * Updates a note.
     * @summary Update a note
     * @param {NotesApiUpdateNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateNote(requestParameters: NotesApiUpdateNoteRequest): Promise<UpsertNoteResponse>;
};
/**
 * Request parameters for addNote operation in NotesApi.
 * @export
 * @interface NotesApiAddNoteRequest
 */
export interface NotesApiAddNoteRequest {
    /**
     *
     * @type {AddNoteRequest}
     * @memberof NotesApiAddNote
     */
    readonly AddNoteRequest?: AddNoteRequest;
}
/**
 * Request parameters for addNoteComment operation in NotesApi.
 * @export
 * @interface NotesApiAddNoteCommentRequest
 */
export interface NotesApiAddNoteCommentRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiAddNoteComment
     */
    readonly id: number;
    /**
     *
     * @type {CommentPostPutObject}
     * @memberof NotesApiAddNoteComment
     */
    readonly CommentPostPutObject?: CommentPostPutObject;
}
/**
 * Request parameters for deleteComment operation in NotesApi.
 * @export
 * @interface NotesApiDeleteCommentRequest
 */
export interface NotesApiDeleteCommentRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiDeleteComment
     */
    readonly id: number;
    /**
     * The ID of the comment
     * @type {string}
     * @memberof NotesApiDeleteComment
     */
    readonly commentId: string;
}
/**
 * Request parameters for deleteNote operation in NotesApi.
 * @export
 * @interface NotesApiDeleteNoteRequest
 */
export interface NotesApiDeleteNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiDeleteNote
     */
    readonly id: number;
}
/**
 * Request parameters for getComment operation in NotesApi.
 * @export
 * @interface NotesApiGetCommentRequest
 */
export interface NotesApiGetCommentRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiGetComment
     */
    readonly id: number;
    /**
     * The ID of the comment
     * @type {string}
     * @memberof NotesApiGetComment
     */
    readonly commentId: string;
}
/**
 * Request parameters for getNote operation in NotesApi.
 * @export
 * @interface NotesApiGetNoteRequest
 */
export interface NotesApiGetNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiGetNote
     */
    readonly id: number;
}
/**
 * Request parameters for getNoteComments operation in NotesApi.
 * @export
 * @interface NotesApiGetNoteCommentsRequest
 */
export interface NotesApiGetNoteCommentsRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiGetNoteComments
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof NotesApiGetNoteComments
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof NotesApiGetNoteComments
     */
    readonly limit?: number;
}
/**
 * Request parameters for getNotes operation in NotesApi.
 * @export
 * @interface NotesApiGetNotesRequest
 */
export interface NotesApiGetNotesRequest {
    /**
     * The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly user_id?: number;
    /**
     * The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly lead_id?: string;
    /**
     * The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly deal_id?: number;
    /**
     * The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly person_id?: number;
    /**
     * The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly org_id?: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly limit?: number;
    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly sort?: string;
    /**
     * The date in format of YYYY-MM-DD from which notes to fetch
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly start_date?: string;
    /**
     * The date in format of YYYY-MM-DD until which notes to fetch to
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly end_date?: string;
    /**
     * If set, the results are filtered by note to lead pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_lead_flag?: 0 | 1;
    /**
     * If set, the results are filtered by note to deal pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_deal_flag?: 0 | 1;
    /**
     * If set, the results are filtered by note to organization pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_organization_flag?: 0 | 1;
    /**
     * If set, the results are filtered by note to person pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_person_flag?: 0 | 1;
}
/**
 * Request parameters for updateCommentForNote operation in NotesApi.
 * @export
 * @interface NotesApiUpdateCommentForNoteRequest
 */
export interface NotesApiUpdateCommentForNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiUpdateCommentForNote
     */
    readonly id: number;
    /**
     * The ID of the comment
     * @type {string}
     * @memberof NotesApiUpdateCommentForNote
     */
    readonly commentId: string;
    /**
     *
     * @type {CommentPostPutObject}
     * @memberof NotesApiUpdateCommentForNote
     */
    readonly CommentPostPutObject?: CommentPostPutObject;
}
/**
 * Request parameters for updateNote operation in NotesApi.
 * @export
 * @interface NotesApiUpdateNoteRequest
 */
export interface NotesApiUpdateNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiUpdateNote
     */
    readonly id: number;
    /**
     *
     * @type {NoteRequest}
     * @memberof NotesApiUpdateNote
     */
    readonly NoteRequest?: NoteRequest;
}
/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
export declare class NotesApi extends BaseAPI {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {NotesApiAddNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    addNote(requestParameters?: NotesApiAddNoteRequest): Promise<UpsertNoteResponse>;
    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {NotesApiAddNoteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    addNoteComment(requestParameters: NotesApiAddNoteCommentRequest): Promise<UpsertCommentResponse>;
    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {NotesApiDeleteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    deleteComment(requestParameters: NotesApiDeleteCommentRequest): Promise<DeleteCommentResponse>;
    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {NotesApiDeleteNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    deleteNote(requestParameters: NotesApiDeleteNoteRequest): Promise<DeleteNoteResponse>;
    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {NotesApiGetCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getComment(requestParameters: NotesApiGetCommentRequest): Promise<UpsertCommentResponse>;
    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {NotesApiGetNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getNote(requestParameters: NotesApiGetNoteRequest): Promise<UpsertNoteResponse>;
    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {NotesApiGetNoteCommentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getNoteComments(requestParameters: NotesApiGetNoteCommentsRequest): Promise<GetCommentsResponse>;
    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {NotesApiGetNotesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getNotes(requestParameters?: NotesApiGetNotesRequest): Promise<GetNotesResponse>;
    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {NotesApiUpdateCommentForNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    updateCommentForNote(requestParameters: NotesApiUpdateCommentForNoteRequest): Promise<UpsertCommentResponse>;
    /**
     * Updates a note.
     * @summary Update a note
     * @param {NotesApiUpdateNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    updateNote(requestParameters: NotesApiUpdateNoteRequest): Promise<UpsertNoteResponse>;
}
