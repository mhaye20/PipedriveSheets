"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MailboxApi = exports.MailboxApiFactory = exports.MailboxApiFp = exports.MailboxApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * MailboxApi - axios parameter creator
 * @export
 */
const MailboxApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Marks a mail thread as deleted.
         * @summary Delete mail thread
         * @param {number} id The ID of the mail thread

         * @throws {RequiredError}
         */
        deleteMailThread: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteMailThread', 'id', id);
            const localVarPath = `/mailbox/mailThreads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["mail:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific mail message.
         * @summary Get one mail message
         * @param {number} id The ID of the mail message to fetch
         * @param {0 | 1} [include_body] Whether to include the full message body or not. &#x60;0&#x60; &#x3D; Don\&#39;t include, &#x60;1&#x60; &#x3D; Include.

         * @throws {RequiredError}
         */
        getMailMessage: (id, include_body) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMailMessage', 'id', id);
            const localVarPath = `/mailbox/mailMessages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration);
            if (include_body !== undefined) {
                localVarQueryParameter['include_body'] = include_body;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a specific mail thread.
         * @summary Get one mail thread
         * @param {number} id The ID of the mail thread

         * @throws {RequiredError}
         */
        getMailThread: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMailThread', 'id', id);
            const localVarPath = `/mailbox/mailThreads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all the mail messages inside a specified mail thread.
         * @summary Get all mail messages of mail thread
         * @param {number} id The ID of the mail thread

         * @throws {RequiredError}
         */
        getMailThreadMessages: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMailThreadMessages', 'id', id);
            const localVarPath = `/mailbox/mailThreads/{id}/mailMessages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns mail threads in a specified folder ordered by the most recent message within.
         * @summary Get mail threads
         * @param {'inbox' | 'drafts' | 'sent' | 'archive'} folder The type of folder to fetch
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getMailThreads: (folder, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'folder' is not null or undefined
            (0, common_1.assertParamExists)('getMailThreads', 'folder', folder);
            const localVarPath = `/mailbox/mailThreads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration);
            if (folder !== undefined) {
                localVarQueryParameter['folder'] = folder;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a mail thread.
         * @summary Update mail thread details
         * @param {number} id The ID of the mail thread
         * @param {number} [deal_id] The ID of the deal this thread is associated with
         * @param {string} [lead_id] The ID of the lead this thread is associated with
         * @param {number} [shared_flag]
         * @param {number} [read_flag]
         * @param {number} [archived_flag]

         * @throws {RequiredError}
         */
        updateMailThreadDetails: (id, deal_id, lead_id, shared_flag, read_flag, archived_flag) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateMailThreadDetails', 'id', id);
            const localVarPath = `/mailbox/mailThreads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["mail:full"], configuration);
            if (deal_id !== undefined) {
                localVarFormParams.set('deal_id', deal_id);
            }
            if (lead_id !== undefined) {
                localVarFormParams.set('lead_id', lead_id);
            }
            if (shared_flag !== undefined) {
                localVarFormParams.set('shared_flag', shared_flag);
            }
            if (read_flag !== undefined) {
                localVarFormParams.set('read_flag', read_flag);
            }
            if (archived_flag !== undefined) {
                localVarFormParams.set('archived_flag', archived_flag);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MailboxApiAxiosParamCreator = MailboxApiAxiosParamCreator;
/**
 * MailboxApi - functional programming interface
 * @export
 */
const MailboxApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MailboxApiAxiosParamCreator)(configuration);
    return {
        /**
         * Marks a mail thread as deleted.
         * @summary Delete mail thread
         * @param {number} id The ID of the mail thread

         * @throws {RequiredError}
         */
        deleteMailThread(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteMailThread(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific mail message.
         * @summary Get one mail message
         * @param {number} id The ID of the mail message to fetch
         * @param {0 | 1} [include_body] Whether to include the full message body or not. &#x60;0&#x60; &#x3D; Don\&#39;t include, &#x60;1&#x60; &#x3D; Include.

         * @throws {RequiredError}
         */
        getMailMessage(id, include_body) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMailMessage(id, include_body);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a specific mail thread.
         * @summary Get one mail thread
         * @param {number} id The ID of the mail thread

         * @throws {RequiredError}
         */
        getMailThread(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMailThread(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all the mail messages inside a specified mail thread.
         * @summary Get all mail messages of mail thread
         * @param {number} id The ID of the mail thread

         * @throws {RequiredError}
         */
        getMailThreadMessages(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMailThreadMessages(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns mail threads in a specified folder ordered by the most recent message within.
         * @summary Get mail threads
         * @param {'inbox' | 'drafts' | 'sent' | 'archive'} folder The type of folder to fetch
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getMailThreads(folder, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMailThreads(folder, start, limit);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a mail thread.
         * @summary Update mail thread details
         * @param {number} id The ID of the mail thread
         * @param {number} [deal_id] The ID of the deal this thread is associated with
         * @param {string} [lead_id] The ID of the lead this thread is associated with
         * @param {number} [shared_flag]
         * @param {number} [read_flag]
         * @param {number} [archived_flag]

         * @throws {RequiredError}
         */
        updateMailThreadDetails(id, deal_id, lead_id, shared_flag, read_flag, archived_flag) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMailThreadDetails(id, deal_id, lead_id, shared_flag, read_flag, archived_flag);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MailboxApiFp = MailboxApiFp;
/**
 * MailboxApi - factory interface
 * @export
 */
const MailboxApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MailboxApiFp)(configuration);
    return {
        /**
         * Marks a mail thread as deleted.
         * @summary Delete mail thread
         * @param {MailboxApiDeleteMailThreadRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteMailThread(requestParameters) {
            return localVarFp.deleteMailThread(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific mail message.
         * @summary Get one mail message
         * @param {MailboxApiGetMailMessageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getMailMessage(requestParameters) {
            return localVarFp.getMailMessage(requestParameters.id, requestParameters.include_body).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific mail thread.
         * @summary Get one mail thread
         * @param {MailboxApiGetMailThreadRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getMailThread(requestParameters) {
            return localVarFp.getMailThread(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the mail messages inside a specified mail thread.
         * @summary Get all mail messages of mail thread
         * @param {MailboxApiGetMailThreadMessagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getMailThreadMessages(requestParameters) {
            return localVarFp.getMailThreadMessages(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns mail threads in a specified folder ordered by the most recent message within.
         * @summary Get mail threads
         * @param {MailboxApiGetMailThreadsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getMailThreads(requestParameters) {
            return localVarFp.getMailThreads(requestParameters.folder, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a mail thread.
         * @summary Update mail thread details
         * @param {MailboxApiUpdateMailThreadDetailsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateMailThreadDetails(requestParameters) {
            return localVarFp.updateMailThreadDetails(requestParameters.id, requestParameters.deal_id, requestParameters.lead_id, requestParameters.shared_flag, requestParameters.read_flag, requestParameters.archived_flag).then((request) => request(axios, basePath));
        },
    };
};
exports.MailboxApiFactory = MailboxApiFactory;
/**
 * MailboxApi - object-oriented interface
 * @export
 * @class MailboxApi
 * @extends {BaseAPI}
 */
class MailboxApi extends base_1.BaseAPI {
    /**
     * Marks a mail thread as deleted.
     * @summary Delete mail thread
     * @param {MailboxApiDeleteMailThreadRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MailboxApi
     */
    deleteMailThread(requestParameters) {
        return (0, exports.MailboxApiFp)(this.configuration).deleteMailThread(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific mail message.
     * @summary Get one mail message
     * @param {MailboxApiGetMailMessageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MailboxApi
     */
    getMailMessage(requestParameters) {
        return (0, exports.MailboxApiFp)(this.configuration).getMailMessage(requestParameters.id, requestParameters.include_body).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a specific mail thread.
     * @summary Get one mail thread
     * @param {MailboxApiGetMailThreadRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MailboxApi
     */
    getMailThread(requestParameters) {
        return (0, exports.MailboxApiFp)(this.configuration).getMailThread(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all the mail messages inside a specified mail thread.
     * @summary Get all mail messages of mail thread
     * @param {MailboxApiGetMailThreadMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MailboxApi
     */
    getMailThreadMessages(requestParameters) {
        return (0, exports.MailboxApiFp)(this.configuration).getMailThreadMessages(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * @summary Get mail threads
     * @param {MailboxApiGetMailThreadsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MailboxApi
     */
    getMailThreads(requestParameters) {
        return (0, exports.MailboxApiFp)(this.configuration).getMailThreads(requestParameters.folder, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a mail thread.
     * @summary Update mail thread details
     * @param {MailboxApiUpdateMailThreadDetailsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MailboxApi
     */
    updateMailThreadDetails(requestParameters) {
        return (0, exports.MailboxApiFp)(this.configuration).updateMailThreadDetails(requestParameters.id, requestParameters.deal_id, requestParameters.lead_id, requestParameters.shared_flag, requestParameters.read_flag, requestParameters.archived_flag).then((request) => request(this.axios, this.basePath));
    }
}
exports.MailboxApi = MailboxApi;
