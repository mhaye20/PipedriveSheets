/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddPersonFollowerRequest } from '../models';
import { AddPersonFollowerResponse } from '../models';
import { AddPersonPictureResponse } from '../models';
import { AddPersonRequest } from '../models';
import { AddPersonResponse } from '../models';
import { DeletePersonResponse } from '../models';
import { DeletePersonsResponse } from '../models';
import { GetAssociatedActivitiesResponse } from '../models';
import { GetAssociatedDealsResponse } from '../models';
import { GetAssociatedFilesResponse } from '../models';
import { GetAssociatedMailMessagesResponse } from '../models';
import { GetAssociatedPersonUpdatesResponse } from '../models';
import { GetChangelogResponse } from '../models';
import { GetListFollowersResponse } from '../models';
import { GetPermittedUsersResponse1 } from '../models';
import { GetPersonDetailsResponse } from '../models';
import { GetPersonProductsResponse } from '../models';
import { GetPersonSearchResponse } from '../models';
import { GetPersonsCollection200Response } from '../models';
import { GetPersonsResponse1 } from '../models';
import { MergePersonsRequest } from '../models';
import { MergePersonsResponse } from '../models';
import { UpdatePersonRequest } from '../models';
import { UpdatePersonResponse } from '../models';
/**
 * PersonsApi - axios parameter creator
 * @export
 */
export declare const PersonsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Add a person
     * @param {AddPersonRequest} [AddPersonRequest]

     * @throws {RequiredError}
     */
    addPerson: (AddPersonRequest?: AddPersonRequest) => Promise<RequestArgs>;
    /**
     * Adds a follower to a person.
     * @summary Add a follower to a person
     * @param {number} id The ID of the person
     * @param {AddPersonFollowerRequest} [AddPersonFollowerRequest]

     * @throws {RequiredError}
     */
    addPersonFollower: (id: number, AddPersonFollowerRequest?: AddPersonFollowerRequest) => Promise<RequestArgs>;
    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * @summary Add person picture
     * @param {number} id The ID of the person
     * @param {File} file One image supplied in the multipart/form-data encoding
     * @param {number} [crop_x] X coordinate to where start cropping form (in pixels)
     * @param {number} [crop_y] Y coordinate to where start cropping form (in pixels)
     * @param {number} [crop_width] The width of the cropping area (in pixels)
     * @param {number} [crop_height] The height of the cropping area (in pixels)

     * @throws {RequiredError}
     */
    addPersonPicture: (id: number, file: File, crop_x?: number, crop_y?: number, crop_width?: number, crop_height?: number) => Promise<RequestArgs>;
    /**
     * Marks a person as deleted. After 30 days, the person will be permanently deleted.
     * @summary Delete a person
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    deletePerson: (id: number) => Promise<RequestArgs>;
    /**
     * Deletes a follower from a person.
     * @summary Delete a follower from a person
     * @param {number} id The ID of the person
     * @param {number} follower_id The ID of the relationship between the follower and the person

     * @throws {RequiredError}
     */
    deletePersonFollower: (id: number, follower_id: number) => Promise<RequestArgs>;
    /**
     * Deletes a personâ€™s picture.
     * @summary Delete person picture
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    deletePersonPicture: (id: number) => Promise<RequestArgs>;
    /**
     * Marks multiple persons as deleted. After 30 days, the persons will be permanently deleted.
     * @summary Delete multiple persons in bulk
     * @param {string} ids The comma-separated IDs that will be deleted

     * @throws {RequiredError}
     */
    deletePersons: (ids: string) => Promise<RequestArgs>;
    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary Get details of a person
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    getPerson: (id: number) => Promise<RequestArgs>;
    /**
     * Lists activities associated with a person.
     * @summary List activities associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

     * @throws {RequiredError}
     */
    getPersonActivities: (id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string) => Promise<RequestArgs>;
    /**
     * Lists updates about field values of a person.
     * @summary List updates about person field values
     * @param {number} id The ID of the person
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getPersonChangelog: (id: number, cursor?: string, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists deals associated with a person.
     * @summary List deals associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

     * @throws {RequiredError}
     */
    getPersonDeals: (id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', sort?: string) => Promise<RequestArgs>;
    /**
     * Lists files associated with a person.
     * @summary List files attached to a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
     * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

     * @throws {RequiredError}
     */
    getPersonFiles: (id: number, start?: number, limit?: number, sort?: string) => Promise<RequestArgs>;
    /**
     * Lists the followers of a person.
     * @summary List followers of a person
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    getPersonFollowers: (id: number) => Promise<RequestArgs>;
    /**
     * Lists mail messages associated with a person.
     * @summary List mail messages associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getPersonMailMessages: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists products associated with a person.
     * @summary List products associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getPersonProducts: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * @summary List updates about a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).

     * @throws {RequiredError}
     */
    getPersonUpdates: (id: number, start?: number, limit?: number, all_changes?: string, items?: string) => Promise<RequestArgs>;
    /**
     * List users permitted to access a person.
     * @summary List permitted users
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    getPersonUsers: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all persons.
     * @summary Get all persons
     * @param {number} [user_id] If supplied, only persons owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
     * @param {number} [filter_id] The ID of the filter to use
     * @param {string} [first_char] If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

     * @throws {RequiredError}
     */
    getPersons: (user_id?: number, filter_id?: number, first_char?: string, start?: number, limit?: number, sort?: string) => Promise<RequestArgs>;
    /**
     * Returns all persons. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all persons (BETA)
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {number} [owner_id] If supplied, only persons owned by the given user will be returned
     * @param {string} [first_char] If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)

     * @throws {RequiredError}
     */
    getPersonsCollection: (cursor?: string, limit?: number, since?: string, until?: string, owner_id?: number, first_char?: string) => Promise<RequestArgs>;
    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * @summary Merge two persons
     * @param {number} id The ID of the person
     * @param {MergePersonsRequest} [MergePersonsRequest]

     * @throws {RequiredError}
     */
    mergePersons: (id: number, MergePersonsRequest?: MergePersonsRequest) => Promise<RequestArgs>;
    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * @summary Search persons
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @param {'custom_fields' | 'email' | 'notes' | 'phone' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [organization_id] Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.
     * @param {'person.picture'} [include_fields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    searchPersons: (term: string, fields?: 'custom_fields' | 'email' | 'notes' | 'phone' | 'name', exact_match?: boolean, organization_id?: number, include_fields?: 'person.picture', start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Update a person
     * @param {number} id The ID of the person
     * @param {UpdatePersonRequest} [UpdatePersonRequest]

     * @throws {RequiredError}
     */
    updatePerson: (id: number, UpdatePersonRequest?: UpdatePersonRequest) => Promise<RequestArgs>;
};
/**
 * PersonsApi - functional programming interface
 * @export
 */
export declare const PersonsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Add a person
     * @param {AddPersonRequest} [AddPersonRequest]

     * @throws {RequiredError}
     */
    addPerson(AddPersonRequest?: AddPersonRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddPersonResponse>>;
    /**
     * Adds a follower to a person.
     * @summary Add a follower to a person
     * @param {number} id The ID of the person
     * @param {AddPersonFollowerRequest} [AddPersonFollowerRequest]

     * @throws {RequiredError}
     */
    addPersonFollower(id: number, AddPersonFollowerRequest?: AddPersonFollowerRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddPersonFollowerResponse>>;
    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * @summary Add person picture
     * @param {number} id The ID of the person
     * @param {File} file One image supplied in the multipart/form-data encoding
     * @param {number} [crop_x] X coordinate to where start cropping form (in pixels)
     * @param {number} [crop_y] Y coordinate to where start cropping form (in pixels)
     * @param {number} [crop_width] The width of the cropping area (in pixels)
     * @param {number} [crop_height] The height of the cropping area (in pixels)

     * @throws {RequiredError}
     */
    addPersonPicture(id: number, file: File, crop_x?: number, crop_y?: number, crop_width?: number, crop_height?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddPersonPictureResponse>>;
    /**
     * Marks a person as deleted. After 30 days, the person will be permanently deleted.
     * @summary Delete a person
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    deletePerson(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePersonResponse>>;
    /**
     * Deletes a follower from a person.
     * @summary Delete a follower from a person
     * @param {number} id The ID of the person
     * @param {number} follower_id The ID of the relationship between the follower and the person

     * @throws {RequiredError}
     */
    deletePersonFollower(id: number, follower_id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePersonResponse>>;
    /**
     * Deletes a personâ€™s picture.
     * @summary Delete person picture
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    deletePersonPicture(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePersonResponse>>;
    /**
     * Marks multiple persons as deleted. After 30 days, the persons will be permanently deleted.
     * @summary Delete multiple persons in bulk
     * @param {string} ids The comma-separated IDs that will be deleted

     * @throws {RequiredError}
     */
    deletePersons(ids: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePersonsResponse>>;
    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary Get details of a person
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    getPerson(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonDetailsResponse>>;
    /**
     * Lists activities associated with a person.
     * @summary List activities associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

     * @throws {RequiredError}
     */
    getPersonActivities(id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedActivitiesResponse>>;
    /**
     * Lists updates about field values of a person.
     * @summary List updates about person field values
     * @param {number} id The ID of the person
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getPersonChangelog(id: number, cursor?: string, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetChangelogResponse>>;
    /**
     * Lists deals associated with a person.
     * @summary List deals associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

     * @throws {RequiredError}
     */
    getPersonDeals(id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', sort?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedDealsResponse>>;
    /**
     * Lists files associated with a person.
     * @summary List files attached to a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
     * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

     * @throws {RequiredError}
     */
    getPersonFiles(id: number, start?: number, limit?: number, sort?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFilesResponse>>;
    /**
     * Lists the followers of a person.
     * @summary List followers of a person
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    getPersonFollowers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetListFollowersResponse>>;
    /**
     * Lists mail messages associated with a person.
     * @summary List mail messages associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getPersonMailMessages(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedMailMessagesResponse>>;
    /**
     * Lists products associated with a person.
     * @summary List products associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getPersonProducts(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonProductsResponse>>;
    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * @summary List updates about a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).

     * @throws {RequiredError}
     */
    getPersonUpdates(id: number, start?: number, limit?: number, all_changes?: string, items?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedPersonUpdatesResponse>>;
    /**
     * List users permitted to access a person.
     * @summary List permitted users
     * @param {number} id The ID of the person

     * @throws {RequiredError}
     */
    getPersonUsers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPermittedUsersResponse1>>;
    /**
     * Returns all persons.
     * @summary Get all persons
     * @param {number} [user_id] If supplied, only persons owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
     * @param {number} [filter_id] The ID of the filter to use
     * @param {string} [first_char] If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

     * @throws {RequiredError}
     */
    getPersons(user_id?: number, filter_id?: number, first_char?: string, start?: number, limit?: number, sort?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonsResponse1>>;
    /**
     * Returns all persons. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all persons (BETA)
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {number} [owner_id] If supplied, only persons owned by the given user will be returned
     * @param {string} [first_char] If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)

     * @throws {RequiredError}
     */
    getPersonsCollection(cursor?: string, limit?: number, since?: string, until?: string, owner_id?: number, first_char?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonsCollection200Response>>;
    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * @summary Merge two persons
     * @param {number} id The ID of the person
     * @param {MergePersonsRequest} [MergePersonsRequest]

     * @throws {RequiredError}
     */
    mergePersons(id: number, MergePersonsRequest?: MergePersonsRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MergePersonsResponse>>;
    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * @summary Search persons
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @param {'custom_fields' | 'email' | 'notes' | 'phone' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [organization_id] Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.
     * @param {'person.picture'} [include_fields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    searchPersons(term: string, fields?: 'custom_fields' | 'email' | 'notes' | 'phone' | 'name', exact_match?: boolean, organization_id?: number, include_fields?: 'person.picture', start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonSearchResponse>>;
    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Update a person
     * @param {number} id The ID of the person
     * @param {UpdatePersonRequest} [UpdatePersonRequest]

     * @throws {RequiredError}
     */
    updatePerson(id: number, UpdatePersonRequest?: UpdatePersonRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdatePersonResponse>>;
};
/**
 * PersonsApi - factory interface
 * @export
 */
export declare const PersonsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Add a person
     * @param {PersonsApiAddPersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addPerson(requestParameters?: PersonsApiAddPersonRequest): Promise<AddPersonResponse>;
    /**
     * Adds a follower to a person.
     * @summary Add a follower to a person
     * @param {PersonsApiAddPersonFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addPersonFollower(requestParameters: PersonsApiAddPersonFollowerRequest): Promise<AddPersonFollowerResponse>;
    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * @summary Add person picture
     * @param {PersonsApiAddPersonPictureRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addPersonPicture(requestParameters: PersonsApiAddPersonPictureRequest): Promise<AddPersonPictureResponse>;
    /**
     * Marks a person as deleted. After 30 days, the person will be permanently deleted.
     * @summary Delete a person
     * @param {PersonsApiDeletePersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deletePerson(requestParameters: PersonsApiDeletePersonRequest): Promise<DeletePersonResponse>;
    /**
     * Deletes a follower from a person.
     * @summary Delete a follower from a person
     * @param {PersonsApiDeletePersonFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deletePersonFollower(requestParameters: PersonsApiDeletePersonFollowerRequest): Promise<DeletePersonResponse>;
    /**
     * Deletes a personâ€™s picture.
     * @summary Delete person picture
     * @param {PersonsApiDeletePersonPictureRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deletePersonPicture(requestParameters: PersonsApiDeletePersonPictureRequest): Promise<DeletePersonResponse>;
    /**
     * Marks multiple persons as deleted. After 30 days, the persons will be permanently deleted.
     * @summary Delete multiple persons in bulk
     * @param {PersonsApiDeletePersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deletePersons(requestParameters: PersonsApiDeletePersonsRequest): Promise<DeletePersonsResponse>;
    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary Get details of a person
     * @param {PersonsApiGetPersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPerson(requestParameters: PersonsApiGetPersonRequest): Promise<GetPersonDetailsResponse>;
    /**
     * Lists activities associated with a person.
     * @summary List activities associated with a person
     * @param {PersonsApiGetPersonActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonActivities(requestParameters: PersonsApiGetPersonActivitiesRequest): Promise<GetAssociatedActivitiesResponse>;
    /**
     * Lists updates about field values of a person.
     * @summary List updates about person field values
     * @param {PersonsApiGetPersonChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonChangelog(requestParameters: PersonsApiGetPersonChangelogRequest): Promise<GetChangelogResponse>;
    /**
     * Lists deals associated with a person.
     * @summary List deals associated with a person
     * @param {PersonsApiGetPersonDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonDeals(requestParameters: PersonsApiGetPersonDealsRequest): Promise<GetAssociatedDealsResponse>;
    /**
     * Lists files associated with a person.
     * @summary List files attached to a person
     * @param {PersonsApiGetPersonFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonFiles(requestParameters: PersonsApiGetPersonFilesRequest): Promise<GetAssociatedFilesResponse>;
    /**
     * Lists the followers of a person.
     * @summary List followers of a person
     * @param {PersonsApiGetPersonFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonFollowers(requestParameters: PersonsApiGetPersonFollowersRequest): Promise<GetListFollowersResponse>;
    /**
     * Lists mail messages associated with a person.
     * @summary List mail messages associated with a person
     * @param {PersonsApiGetPersonMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonMailMessages(requestParameters: PersonsApiGetPersonMailMessagesRequest): Promise<GetAssociatedMailMessagesResponse>;
    /**
     * Lists products associated with a person.
     * @summary List products associated with a person
     * @param {PersonsApiGetPersonProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonProducts(requestParameters: PersonsApiGetPersonProductsRequest): Promise<GetPersonProductsResponse>;
    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * @summary List updates about a person
     * @param {PersonsApiGetPersonUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonUpdates(requestParameters: PersonsApiGetPersonUpdatesRequest): Promise<GetAssociatedPersonUpdatesResponse>;
    /**
     * List users permitted to access a person.
     * @summary List permitted users
     * @param {PersonsApiGetPersonUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonUsers(requestParameters: PersonsApiGetPersonUsersRequest): Promise<GetPermittedUsersResponse1>;
    /**
     * Returns all persons.
     * @summary Get all persons
     * @param {PersonsApiGetPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersons(requestParameters?: PersonsApiGetPersonsRequest): Promise<GetPersonsResponse1>;
    /**
     * Returns all persons. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all persons (BETA)
     * @param {PersonsApiGetPersonsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPersonsCollection(requestParameters?: PersonsApiGetPersonsCollectionRequest): Promise<GetPersonsCollection200Response>;
    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * @summary Merge two persons
     * @param {PersonsApiMergePersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    mergePersons(requestParameters: PersonsApiMergePersonsRequest): Promise<MergePersonsResponse>;
    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * @summary Search persons
     * @param {PersonsApiSearchPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    searchPersons(requestParameters: PersonsApiSearchPersonsRequest): Promise<GetPersonSearchResponse>;
    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Update a person
     * @param {PersonsApiUpdatePersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updatePerson(requestParameters: PersonsApiUpdatePersonRequest): Promise<UpdatePersonResponse>;
};
/**
 * Request parameters for addPerson operation in PersonsApi.
 * @export
 * @interface PersonsApiAddPersonRequest
 */
export interface PersonsApiAddPersonRequest {
    /**
     *
     * @type {AddPersonRequest}
     * @memberof PersonsApiAddPerson
     */
    readonly AddPersonRequest?: AddPersonRequest;
}
/**
 * Request parameters for addPersonFollower operation in PersonsApi.
 * @export
 * @interface PersonsApiAddPersonFollowerRequest
 */
export interface PersonsApiAddPersonFollowerRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiAddPersonFollower
     */
    readonly id: number;
    /**
     *
     * @type {AddPersonFollowerRequest}
     * @memberof PersonsApiAddPersonFollower
     */
    readonly AddPersonFollowerRequest?: AddPersonFollowerRequest;
}
/**
 * Request parameters for addPersonPicture operation in PersonsApi.
 * @export
 * @interface PersonsApiAddPersonPictureRequest
 */
export interface PersonsApiAddPersonPictureRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiAddPersonPicture
     */
    readonly id: number;
    /**
     * One image supplied in the multipart/form-data encoding
     * @type {File}
     * @memberof PersonsApiAddPersonPicture
     */
    readonly file: File;
    /**
     * X coordinate to where start cropping form (in pixels)
     * @type {number}
     * @memberof PersonsApiAddPersonPicture
     */
    readonly crop_x?: number;
    /**
     * Y coordinate to where start cropping form (in pixels)
     * @type {number}
     * @memberof PersonsApiAddPersonPicture
     */
    readonly crop_y?: number;
    /**
     * The width of the cropping area (in pixels)
     * @type {number}
     * @memberof PersonsApiAddPersonPicture
     */
    readonly crop_width?: number;
    /**
     * The height of the cropping area (in pixels)
     * @type {number}
     * @memberof PersonsApiAddPersonPicture
     */
    readonly crop_height?: number;
}
/**
 * Request parameters for deletePerson operation in PersonsApi.
 * @export
 * @interface PersonsApiDeletePersonRequest
 */
export interface PersonsApiDeletePersonRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiDeletePerson
     */
    readonly id: number;
}
/**
 * Request parameters for deletePersonFollower operation in PersonsApi.
 * @export
 * @interface PersonsApiDeletePersonFollowerRequest
 */
export interface PersonsApiDeletePersonFollowerRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiDeletePersonFollower
     */
    readonly id: number;
    /**
     * The ID of the relationship between the follower and the person
     * @type {number}
     * @memberof PersonsApiDeletePersonFollower
     */
    readonly follower_id: number;
}
/**
 * Request parameters for deletePersonPicture operation in PersonsApi.
 * @export
 * @interface PersonsApiDeletePersonPictureRequest
 */
export interface PersonsApiDeletePersonPictureRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiDeletePersonPicture
     */
    readonly id: number;
}
/**
 * Request parameters for deletePersons operation in PersonsApi.
 * @export
 * @interface PersonsApiDeletePersonsRequest
 */
export interface PersonsApiDeletePersonsRequest {
    /**
     * The comma-separated IDs that will be deleted
     * @type {string}
     * @memberof PersonsApiDeletePersons
     */
    readonly ids: string;
}
/**
 * Request parameters for getPerson operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonRequest
 */
export interface PersonsApiGetPersonRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPerson
     */
    readonly id: number;
}
/**
 * Request parameters for getPersonActivities operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonActivitiesRequest
 */
export interface PersonsApiGetPersonActivitiesRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonActivities
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersonActivities
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersonActivities
     */
    readonly limit?: number;
    /**
     * Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @type {0 | 1}
     * @memberof PersonsApiGetPersonActivities
     */
    readonly done?: 0 | 1;
    /**
     * A comma-separated string of activity IDs to exclude from result
     * @type {string}
     * @memberof PersonsApiGetPersonActivities
     */
    readonly exclude?: string;
}
/**
 * Request parameters for getPersonChangelog operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonChangelogRequest
 */
export interface PersonsApiGetPersonChangelogRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonChangelog
     */
    readonly id: number;
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof PersonsApiGetPersonChangelog
     */
    readonly cursor?: string;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersonChangelog
     */
    readonly limit?: number;
}
/**
 * Request parameters for getPersonDeals operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonDealsRequest
 */
export interface PersonsApiGetPersonDealsRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonDeals
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersonDeals
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersonDeals
     */
    readonly limit?: number;
    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'}
     * @memberof PersonsApiGetPersonDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted';
    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @type {string}
     * @memberof PersonsApiGetPersonDeals
     */
    readonly sort?: string;
}
/**
 * Request parameters for getPersonFiles operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonFilesRequest
 */
export interface PersonsApiGetPersonFilesRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonFiles
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersonFiles
     */
    readonly start?: number;
    /**
     * Items shown per page. Please note that a maximum value of 100 is allowed.
     * @type {number}
     * @memberof PersonsApiGetPersonFiles
     */
    readonly limit?: number;
    /**
     * Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;
     * @type {string}
     * @memberof PersonsApiGetPersonFiles
     */
    readonly sort?: string;
}
/**
 * Request parameters for getPersonFollowers operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonFollowersRequest
 */
export interface PersonsApiGetPersonFollowersRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonFollowers
     */
    readonly id: number;
}
/**
 * Request parameters for getPersonMailMessages operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonMailMessagesRequest
 */
export interface PersonsApiGetPersonMailMessagesRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonMailMessages
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersonMailMessages
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersonMailMessages
     */
    readonly limit?: number;
}
/**
 * Request parameters for getPersonProducts operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonProductsRequest
 */
export interface PersonsApiGetPersonProductsRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonProducts
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersonProducts
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersonProducts
     */
    readonly limit?: number;
}
/**
 * Request parameters for getPersonUpdates operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonUpdatesRequest
 */
export interface PersonsApiGetPersonUpdatesRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonUpdates
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersonUpdates
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersonUpdates
     */
    readonly limit?: number;
    /**
     * Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @type {string}
     * @memberof PersonsApiGetPersonUpdates
     */
    readonly all_changes?: string;
    /**
     * A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).
     * @type {string}
     * @memberof PersonsApiGetPersonUpdates
     */
    readonly items?: string;
}
/**
 * Request parameters for getPersonUsers operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonUsersRequest
 */
export interface PersonsApiGetPersonUsersRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiGetPersonUsers
     */
    readonly id: number;
}
/**
 * Request parameters for getPersons operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonsRequest
 */
export interface PersonsApiGetPersonsRequest {
    /**
     * If supplied, only persons owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
     * @type {number}
     * @memberof PersonsApiGetPersons
     */
    readonly user_id?: number;
    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof PersonsApiGetPersons
     */
    readonly filter_id?: number;
    /**
     * If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)
     * @type {string}
     * @memberof PersonsApiGetPersons
     */
    readonly first_char?: string;
    /**
     * Pagination start
     * @type {number}
     * @memberof PersonsApiGetPersons
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiGetPersons
     */
    readonly limit?: number;
    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @type {string}
     * @memberof PersonsApiGetPersons
     */
    readonly sort?: string;
}
/**
 * Request parameters for getPersonsCollection operation in PersonsApi.
 * @export
 * @interface PersonsApiGetPersonsCollectionRequest
 */
export interface PersonsApiGetPersonsCollectionRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof PersonsApiGetPersonsCollection
     */
    readonly cursor?: string;
    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof PersonsApiGetPersonsCollection
     */
    readonly limit?: number;
    /**
     * The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof PersonsApiGetPersonsCollection
     */
    readonly since?: string;
    /**
     * The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof PersonsApiGetPersonsCollection
     */
    readonly until?: string;
    /**
     * If supplied, only persons owned by the given user will be returned
     * @type {number}
     * @memberof PersonsApiGetPersonsCollection
     */
    readonly owner_id?: number;
    /**
     * If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)
     * @type {string}
     * @memberof PersonsApiGetPersonsCollection
     */
    readonly first_char?: string;
}
/**
 * Request parameters for mergePersons operation in PersonsApi.
 * @export
 * @interface PersonsApiMergePersonsRequest
 */
export interface PersonsApiMergePersonsRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiMergePersons
     */
    readonly id: number;
    /**
     *
     * @type {MergePersonsRequest}
     * @memberof PersonsApiMergePersons
     */
    readonly MergePersonsRequest?: MergePersonsRequest;
}
/**
 * Request parameters for searchPersons operation in PersonsApi.
 * @export
 * @interface PersonsApiSearchPersonsRequest
 */
export interface PersonsApiSearchPersonsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof PersonsApiSearchPersons
     */
    readonly term: string;
    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'custom_fields' | 'email' | 'notes' | 'phone' | 'name'}
     * @memberof PersonsApiSearchPersons
     */
    readonly fields?: 'custom_fields' | 'email' | 'notes' | 'phone' | 'name';
    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof PersonsApiSearchPersons
     */
    readonly exact_match?: boolean;
    /**
     * Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.
     * @type {number}
     * @memberof PersonsApiSearchPersons
     */
    readonly organization_id?: number;
    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'person.picture'}
     * @memberof PersonsApiSearchPersons
     */
    readonly include_fields?: 'person.picture';
    /**
     * Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @type {number}
     * @memberof PersonsApiSearchPersons
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PersonsApiSearchPersons
     */
    readonly limit?: number;
}
/**
 * Request parameters for updatePerson operation in PersonsApi.
 * @export
 * @interface PersonsApiUpdatePersonRequest
 */
export interface PersonsApiUpdatePersonRequest {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonsApiUpdatePerson
     */
    readonly id: number;
    /**
     *
     * @type {UpdatePersonRequest}
     * @memberof PersonsApiUpdatePerson
     */
    readonly UpdatePersonRequest?: UpdatePersonRequest;
}
/**
 * PersonsApi - object-oriented interface
 * @export
 * @class PersonsApi
 * @extends {BaseAPI}
 */
export declare class PersonsApi extends BaseAPI {
    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Add a person
     * @param {PersonsApiAddPersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    addPerson(requestParameters?: PersonsApiAddPersonRequest): Promise<AddPersonResponse>;
    /**
     * Adds a follower to a person.
     * @summary Add a follower to a person
     * @param {PersonsApiAddPersonFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    addPersonFollower(requestParameters: PersonsApiAddPersonFollowerRequest): Promise<AddPersonFollowerResponse>;
    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * @summary Add person picture
     * @param {PersonsApiAddPersonPictureRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    addPersonPicture(requestParameters: PersonsApiAddPersonPictureRequest): Promise<AddPersonPictureResponse>;
    /**
     * Marks a person as deleted. After 30 days, the person will be permanently deleted.
     * @summary Delete a person
     * @param {PersonsApiDeletePersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    deletePerson(requestParameters: PersonsApiDeletePersonRequest): Promise<DeletePersonResponse>;
    /**
     * Deletes a follower from a person.
     * @summary Delete a follower from a person
     * @param {PersonsApiDeletePersonFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    deletePersonFollower(requestParameters: PersonsApiDeletePersonFollowerRequest): Promise<DeletePersonResponse>;
    /**
     * Deletes a personâ€™s picture.
     * @summary Delete person picture
     * @param {PersonsApiDeletePersonPictureRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    deletePersonPicture(requestParameters: PersonsApiDeletePersonPictureRequest): Promise<DeletePersonResponse>;
    /**
     * Marks multiple persons as deleted. After 30 days, the persons will be permanently deleted.
     * @summary Delete multiple persons in bulk
     * @param {PersonsApiDeletePersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    deletePersons(requestParameters: PersonsApiDeletePersonsRequest): Promise<DeletePersonsResponse>;
    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary Get details of a person
     * @param {PersonsApiGetPersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPerson(requestParameters: PersonsApiGetPersonRequest): Promise<GetPersonDetailsResponse>;
    /**
     * Lists activities associated with a person.
     * @summary List activities associated with a person
     * @param {PersonsApiGetPersonActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonActivities(requestParameters: PersonsApiGetPersonActivitiesRequest): Promise<GetAssociatedActivitiesResponse>;
    /**
     * Lists updates about field values of a person.
     * @summary List updates about person field values
     * @param {PersonsApiGetPersonChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonChangelog(requestParameters: PersonsApiGetPersonChangelogRequest): Promise<GetChangelogResponse>;
    /**
     * Lists deals associated with a person.
     * @summary List deals associated with a person
     * @param {PersonsApiGetPersonDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonDeals(requestParameters: PersonsApiGetPersonDealsRequest): Promise<GetAssociatedDealsResponse>;
    /**
     * Lists files associated with a person.
     * @summary List files attached to a person
     * @param {PersonsApiGetPersonFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonFiles(requestParameters: PersonsApiGetPersonFilesRequest): Promise<GetAssociatedFilesResponse>;
    /**
     * Lists the followers of a person.
     * @summary List followers of a person
     * @param {PersonsApiGetPersonFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonFollowers(requestParameters: PersonsApiGetPersonFollowersRequest): Promise<GetListFollowersResponse>;
    /**
     * Lists mail messages associated with a person.
     * @summary List mail messages associated with a person
     * @param {PersonsApiGetPersonMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonMailMessages(requestParameters: PersonsApiGetPersonMailMessagesRequest): Promise<GetAssociatedMailMessagesResponse>;
    /**
     * Lists products associated with a person.
     * @summary List products associated with a person
     * @param {PersonsApiGetPersonProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonProducts(requestParameters: PersonsApiGetPersonProductsRequest): Promise<GetPersonProductsResponse>;
    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * @summary List updates about a person
     * @param {PersonsApiGetPersonUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonUpdates(requestParameters: PersonsApiGetPersonUpdatesRequest): Promise<GetAssociatedPersonUpdatesResponse>;
    /**
     * List users permitted to access a person.
     * @summary List permitted users
     * @param {PersonsApiGetPersonUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonUsers(requestParameters: PersonsApiGetPersonUsersRequest): Promise<GetPermittedUsersResponse1>;
    /**
     * Returns all persons.
     * @summary Get all persons
     * @param {PersonsApiGetPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersons(requestParameters?: PersonsApiGetPersonsRequest): Promise<GetPersonsResponse1>;
    /**
     * Returns all persons. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all persons (BETA)
     * @param {PersonsApiGetPersonsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    getPersonsCollection(requestParameters?: PersonsApiGetPersonsCollectionRequest): Promise<GetPersonsCollection200Response>;
    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * @summary Merge two persons
     * @param {PersonsApiMergePersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    mergePersons(requestParameters: PersonsApiMergePersonsRequest): Promise<MergePersonsResponse>;
    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * @summary Search persons
     * @param {PersonsApiSearchPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    searchPersons(requestParameters: PersonsApiSearchPersonsRequest): Promise<GetPersonSearchResponse>;
    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Update a person
     * @param {PersonsApiUpdatePersonRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    updatePerson(requestParameters: PersonsApiUpdatePersonRequest): Promise<UpdatePersonResponse>;
}
