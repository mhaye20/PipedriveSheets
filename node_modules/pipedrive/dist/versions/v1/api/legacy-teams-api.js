"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyTeamsApi = exports.LegacyTeamsApiFactory = exports.LegacyTeamsApiFp = exports.LegacyTeamsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * LegacyTeamsApi - axios parameter creator
 * @export
 */
const LegacyTeamsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new team to the company and returns the created object.
         * @summary Add a new team
         * @param {AddTeamRequest1} [AddTeamRequest1]
         * @deprecated
         * @throws {RequiredError}
         */
        addTeam: (AddTeamRequest1) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/legacyTeams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddTeamRequest1, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds users to an existing team.
         * @summary Add users to a team
         * @param {number} id The ID of the team
         * @param {AddTeamUserRequest} [AddTeamUserRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        addTeamUser: (id, AddTeamUserRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('addTeamUser', 'id', id);
            const localVarPath = `/legacyTeams/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddTeamUserRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes users from an existing team.
         * @summary Delete users from a team
         * @param {number} id The ID of the team
         * @param {DeleteTeamUserRequest} [DeleteTeamUserRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        deleteTeamUser: (id, DeleteTeamUserRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteTeamUser', 'id', id);
            const localVarPath = `/legacyTeams/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(DeleteTeamUserRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific team.
         * @summary Get a single team
         * @param {number} id The ID of the team
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getTeam: (id, skip_users) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getTeam', 'id', id);
            const localVarPath = `/legacyTeams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            if (skip_users !== undefined) {
                localVarQueryParameter['skip_users'] = skip_users;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all user IDs within a team.
         * @summary Get all users in a team
         * @param {number} id The ID of the team
         * @deprecated
         * @throws {RequiredError}
         */
        getTeamUsers: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getTeamUsers', 'id', id);
            const localVarPath = `/legacyTeams/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about teams within the company.
         * @summary Get all teams
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getTeams: (order_by, skip_users) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/legacyTeams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            if (order_by !== undefined) {
                localVarQueryParameter['order_by'] = order_by;
            }
            if (skip_users !== undefined) {
                localVarQueryParameter['skip_users'] = skip_users;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all teams which have the specified user as a member.
         * @summary Get all teams of a user
         * @param {number} id The ID of the user
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getUserTeams: (id, order_by, skip_users) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getUserTeams', 'id', id);
            const localVarPath = `/legacyTeams/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            if (order_by !== undefined) {
                localVarQueryParameter['order_by'] = order_by;
            }
            if (skip_users !== undefined) {
                localVarQueryParameter['skip_users'] = skip_users;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an existing team and returns the updated object.
         * @summary Update a team
         * @param {number} id The ID of the team
         * @param {UpdateTeamRequest} [UpdateTeamRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        updateTeam: (id, UpdateTeamRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateTeam', 'id', id);
            const localVarPath = `/legacyTeams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateTeamRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LegacyTeamsApiAxiosParamCreator = LegacyTeamsApiAxiosParamCreator;
/**
 * LegacyTeamsApi - functional programming interface
 * @export
 */
const LegacyTeamsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LegacyTeamsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new team to the company and returns the created object.
         * @summary Add a new team
         * @param {AddTeamRequest1} [AddTeamRequest1]
         * @deprecated
         * @throws {RequiredError}
         */
        addTeam(AddTeamRequest1) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addTeam(AddTeamRequest1);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Adds users to an existing team.
         * @summary Add users to a team
         * @param {number} id The ID of the team
         * @param {AddTeamUserRequest} [AddTeamUserRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        addTeamUser(id, AddTeamUserRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addTeamUser(id, AddTeamUserRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes users from an existing team.
         * @summary Delete users from a team
         * @param {number} id The ID of the team
         * @param {DeleteTeamUserRequest} [DeleteTeamUserRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        deleteTeamUser(id, DeleteTeamUserRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteTeamUser(id, DeleteTeamUserRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific team.
         * @summary Get a single team
         * @param {number} id The ID of the team
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getTeam(id, skip_users) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTeam(id, skip_users);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all user IDs within a team.
         * @summary Get all users in a team
         * @param {number} id The ID of the team
         * @deprecated
         * @throws {RequiredError}
         */
        getTeamUsers(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTeamUsers(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about teams within the company.
         * @summary Get all teams
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getTeams(order_by, skip_users) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTeams(order_by, skip_users);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all teams which have the specified user as a member.
         * @summary Get all teams of a user
         * @param {number} id The ID of the user
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getUserTeams(id, order_by, skip_users) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserTeams(id, order_by, skip_users);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates an existing team and returns the updated object.
         * @summary Update a team
         * @param {number} id The ID of the team
         * @param {UpdateTeamRequest} [UpdateTeamRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        updateTeam(id, UpdateTeamRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateTeam(id, UpdateTeamRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.LegacyTeamsApiFp = LegacyTeamsApiFp;
/**
 * LegacyTeamsApi - factory interface
 * @export
 */
const LegacyTeamsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LegacyTeamsApiFp)(configuration);
    return {
        /**
         * Adds a new team to the company and returns the created object.
         * @summary Add a new team
         * @param {LegacyTeamsApiAddTeamRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addTeam(requestParameters = {}) {
            return localVarFp.addTeam(requestParameters.AddTeamRequest1).then((request) => request(axios, basePath));
        },
        /**
         * Adds users to an existing team.
         * @summary Add users to a team
         * @param {LegacyTeamsApiAddTeamUserRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addTeamUser(requestParameters) {
            return localVarFp.addTeamUser(requestParameters.id, requestParameters.AddTeamUserRequest).then((request) => request(axios, basePath));
        },
        /**
         * Deletes users from an existing team.
         * @summary Delete users from a team
         * @param {LegacyTeamsApiDeleteTeamUserRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteTeamUser(requestParameters) {
            return localVarFp.deleteTeamUser(requestParameters.id, requestParameters.DeleteTeamUserRequest).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific team.
         * @summary Get a single team
         * @param {LegacyTeamsApiGetTeamRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getTeam(requestParameters) {
            return localVarFp.getTeam(requestParameters.id, requestParameters.skip_users).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all user IDs within a team.
         * @summary Get all users in a team
         * @param {LegacyTeamsApiGetTeamUsersRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getTeamUsers(requestParameters) {
            return localVarFp.getTeamUsers(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about teams within the company.
         * @summary Get all teams
         * @param {LegacyTeamsApiGetTeamsRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getTeams(requestParameters = {}) {
            return localVarFp.getTeams(requestParameters.order_by, requestParameters.skip_users).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all teams which have the specified user as a member.
         * @summary Get all teams of a user
         * @param {LegacyTeamsApiGetUserTeamsRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserTeams(requestParameters) {
            return localVarFp.getUserTeams(requestParameters.id, requestParameters.order_by, requestParameters.skip_users).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing team and returns the updated object.
         * @summary Update a team
         * @param {LegacyTeamsApiUpdateTeamRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        updateTeam(requestParameters) {
            return localVarFp.updateTeam(requestParameters.id, requestParameters.UpdateTeamRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.LegacyTeamsApiFactory = LegacyTeamsApiFactory;
/**
 * LegacyTeamsApi - object-oriented interface
 * @export
 * @class LegacyTeamsApi
 * @extends {BaseAPI}
 */
class LegacyTeamsApi extends base_1.BaseAPI {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {LegacyTeamsApiAddTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    addTeam(requestParameters = {}) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).addTeam(requestParameters.AddTeamRequest1).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {LegacyTeamsApiAddTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    addTeamUser(requestParameters) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).addTeamUser(requestParameters.id, requestParameters.AddTeamUserRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {LegacyTeamsApiDeleteTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    deleteTeamUser(requestParameters) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).deleteTeamUser(requestParameters.id, requestParameters.DeleteTeamUserRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {LegacyTeamsApiGetTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getTeam(requestParameters) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).getTeam(requestParameters.id, requestParameters.skip_users).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {LegacyTeamsApiGetTeamUsersRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getTeamUsers(requestParameters) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).getTeamUsers(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {LegacyTeamsApiGetTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getTeams(requestParameters = {}) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).getTeams(requestParameters.order_by, requestParameters.skip_users).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {LegacyTeamsApiGetUserTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getUserTeams(requestParameters) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).getUserTeams(requestParameters.id, requestParameters.order_by, requestParameters.skip_users).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {LegacyTeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    updateTeam(requestParameters) {
        return (0, exports.LegacyTeamsApiFp)(this.configuration).updateTeam(requestParameters.id, requestParameters.UpdateTeamRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.LegacyTeamsApi = LegacyTeamsApi;
