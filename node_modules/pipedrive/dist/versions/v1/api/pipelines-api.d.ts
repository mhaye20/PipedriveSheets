/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddPipelineResponse } from '../models';
import { DeletePipelineResponse } from '../models';
import { GetPipelineDealsConversionRatesInResponse } from '../models';
import { GetPipelineDealsMovementsStatisticsResponse } from '../models';
import { GetPipelineResponse } from '../models';
import { GetPipelinesResponse } from '../models';
import { GetStageDealsResponse } from '../models';
import { PipelineRequest } from '../models';
import { PipelineRequest1 } from '../models';
import { UpdatePipelineResponse } from '../models';
/**
 * PipelinesApi - axios parameter creator
 * @export
 */
export declare const PipelinesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelineRequest} [PipelineRequest]

     * @throws {RequiredError}
     */
    addPipeline: (PipelineRequest?: PipelineRequest) => Promise<RequestArgs>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {number} id The ID of the pipeline

     * @throws {RequiredError}
     */
    deletePipeline: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * @summary Get one pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.

     * @throws {RequiredError}
     */
    getPipeline: (id: number, totals_convert_currency?: string) => Promise<RequestArgs>;
    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * @summary Get deals conversion rates in pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
     * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
     * @param {number} [user_id] The ID of the user who\&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.

     * @throws {RequiredError}
     */
    getPipelineConversionStatistics: (id: number, start_date: string, end_date: string, user_id?: number) => Promise<RequestArgs>;
    /**
     * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a pipeline
     * @param {number} id The ID of the pipeline
     * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
     * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
     * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [get_summary] Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
     * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.

     * @throws {RequiredError}
     */
    getPipelineDeals: (id: number, filter_id?: number, user_id?: number, everyone?: 0 | 1, stage_id?: number, start?: number, limit?: number, get_summary?: 0 | 1, totals_convert_currency?: string) => Promise<RequestArgs>;
    /**
     * Returns statistics for deals movements for the given time period.
     * @summary Get deals movements in pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
     * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
     * @param {number} [user_id] The ID of the user who\&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.

     * @throws {RequiredError}
     */
    getPipelineMovementStatistics: (id: number, start_date: string, end_date: string, user_id?: number) => Promise<RequestArgs>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines

     * @throws {RequiredError}
     */
    getPipelines: () => Promise<RequestArgs>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {number} id The ID of the pipeline
     * @param {PipelineRequest1} [PipelineRequest1]

     * @throws {RequiredError}
     */
    updatePipeline: (id: number, PipelineRequest1?: PipelineRequest1) => Promise<RequestArgs>;
};
/**
 * PipelinesApi - functional programming interface
 * @export
 */
export declare const PipelinesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelineRequest} [PipelineRequest]

     * @throws {RequiredError}
     */
    addPipeline(PipelineRequest?: PipelineRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddPipelineResponse>>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {number} id The ID of the pipeline

     * @throws {RequiredError}
     */
    deletePipeline(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePipelineResponse>>;
    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * @summary Get one pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.

     * @throws {RequiredError}
     */
    getPipeline(id: number, totals_convert_currency?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPipelineResponse>>;
    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * @summary Get deals conversion rates in pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
     * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
     * @param {number} [user_id] The ID of the user who\&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.

     * @throws {RequiredError}
     */
    getPipelineConversionStatistics(id: number, start_date: string, end_date: string, user_id?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPipelineDealsConversionRatesInResponse>>;
    /**
     * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a pipeline
     * @param {number} id The ID of the pipeline
     * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
     * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
     * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [get_summary] Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
     * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.

     * @throws {RequiredError}
     */
    getPipelineDeals(id: number, filter_id?: number, user_id?: number, everyone?: 0 | 1, stage_id?: number, start?: number, limit?: number, get_summary?: 0 | 1, totals_convert_currency?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStageDealsResponse>>;
    /**
     * Returns statistics for deals movements for the given time period.
     * @summary Get deals movements in pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
     * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
     * @param {number} [user_id] The ID of the user who\&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.

     * @throws {RequiredError}
     */
    getPipelineMovementStatistics(id: number, start_date: string, end_date: string, user_id?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPipelineDealsMovementsStatisticsResponse>>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines

     * @throws {RequiredError}
     */
    getPipelines(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPipelinesResponse>>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {number} id The ID of the pipeline
     * @param {PipelineRequest1} [PipelineRequest1]

     * @throws {RequiredError}
     */
    updatePipeline(id: number, PipelineRequest1?: PipelineRequest1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdatePipelineResponse>>;
};
/**
 * PipelinesApi - factory interface
 * @export
 */
export declare const PipelinesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addPipeline(requestParameters?: PipelinesApiAddPipelineRequest): Promise<AddPipelineResponse>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deletePipeline(requestParameters: PipelinesApiDeletePipelineRequest): Promise<DeletePipelineResponse>;
    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPipeline(requestParameters: PipelinesApiGetPipelineRequest): Promise<GetPipelineResponse>;
    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * @summary Get deals conversion rates in pipeline
     * @param {PipelinesApiGetPipelineConversionStatisticsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPipelineConversionStatistics(requestParameters: PipelinesApiGetPipelineConversionStatisticsRequest): Promise<GetPipelineDealsConversionRatesInResponse>;
    /**
     * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a pipeline
     * @param {PipelinesApiGetPipelineDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPipelineDeals(requestParameters: PipelinesApiGetPipelineDealsRequest): Promise<GetStageDealsResponse>;
    /**
     * Returns statistics for deals movements for the given time period.
     * @summary Get deals movements in pipeline
     * @param {PipelinesApiGetPipelineMovementStatisticsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPipelineMovementStatistics(requestParameters: PipelinesApiGetPipelineMovementStatisticsRequest): Promise<GetPipelineDealsMovementsStatisticsResponse>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines

     * @throws {RequiredError}
     */
    getPipelines(): Promise<GetPipelinesResponse>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updatePipeline(requestParameters: PipelinesApiUpdatePipelineRequest): Promise<UpdatePipelineResponse>;
};
/**
 * Request parameters for addPipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiAddPipelineRequest
 */
export interface PipelinesApiAddPipelineRequest {
    /**
     *
     * @type {PipelineRequest}
     * @memberof PipelinesApiAddPipeline
     */
    readonly PipelineRequest?: PipelineRequest;
}
/**
 * Request parameters for deletePipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiDeletePipelineRequest
 */
export interface PipelinesApiDeletePipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiDeletePipeline
     */
    readonly id: number;
}
/**
 * Request parameters for getPipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelineRequest
 */
export interface PipelinesApiGetPipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiGetPipeline
     */
    readonly id: number;
    /**
     * The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.
     * @type {string}
     * @memberof PipelinesApiGetPipeline
     */
    readonly totals_convert_currency?: string;
}
/**
 * Request parameters for getPipelineConversionStatistics operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelineConversionStatisticsRequest
 */
export interface PipelinesApiGetPipelineConversionStatisticsRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiGetPipelineConversionStatistics
     */
    readonly id: number;
    /**
     * The start of the period. Date in format of YYYY-MM-DD.
     * @type {string}
     * @memberof PipelinesApiGetPipelineConversionStatistics
     */
    readonly start_date: string;
    /**
     * The end of the period. Date in format of YYYY-MM-DD.
     * @type {string}
     * @memberof PipelinesApiGetPipelineConversionStatistics
     */
    readonly end_date: string;
    /**
     * The ID of the user who\&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.
     * @type {number}
     * @memberof PipelinesApiGetPipelineConversionStatistics
     */
    readonly user_id?: number;
}
/**
 * Request parameters for getPipelineDeals operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelineDealsRequest
 */
export interface PipelinesApiGetPipelineDealsRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly id: number;
    /**
     * If supplied, only deals matching the given filter will be returned
     * @type {number}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly filter_id?: number;
    /**
     * If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @type {number}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly user_id?: number;
    /**
     * If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
     * @type {0 | 1}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly everyone?: 0 | 1;
    /**
     * If supplied, only deals within the given stage will be returned
     * @type {number}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly stage_id?: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly limit?: number;
    /**
     * Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
     * @type {0 | 1}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly get_summary?: 0 | 1;
    /**
     * The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.
     * @type {string}
     * @memberof PipelinesApiGetPipelineDeals
     */
    readonly totals_convert_currency?: string;
}
/**
 * Request parameters for getPipelineMovementStatistics operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelineMovementStatisticsRequest
 */
export interface PipelinesApiGetPipelineMovementStatisticsRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiGetPipelineMovementStatistics
     */
    readonly id: number;
    /**
     * The start of the period. Date in format of YYYY-MM-DD.
     * @type {string}
     * @memberof PipelinesApiGetPipelineMovementStatistics
     */
    readonly start_date: string;
    /**
     * The end of the period. Date in format of YYYY-MM-DD.
     * @type {string}
     * @memberof PipelinesApiGetPipelineMovementStatistics
     */
    readonly end_date: string;
    /**
     * The ID of the user who\&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.
     * @type {number}
     * @memberof PipelinesApiGetPipelineMovementStatistics
     */
    readonly user_id?: number;
}
/**
 * Request parameters for updatePipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiUpdatePipelineRequest
 */
export interface PipelinesApiUpdatePipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiUpdatePipeline
     */
    readonly id: number;
    /**
     *
     * @type {PipelineRequest1}
     * @memberof PipelinesApiUpdatePipeline
     */
    readonly PipelineRequest1?: PipelineRequest1;
}
/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
export declare class PipelinesApi extends BaseAPI {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    addPipeline(requestParameters?: PipelinesApiAddPipelineRequest): Promise<AddPipelineResponse>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    deletePipeline(requestParameters: PipelinesApiDeletePipelineRequest): Promise<DeletePipelineResponse>;
    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipeline(requestParameters: PipelinesApiGetPipelineRequest): Promise<GetPipelineResponse>;
    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * @summary Get deals conversion rates in pipeline
     * @param {PipelinesApiGetPipelineConversionStatisticsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelineConversionStatistics(requestParameters: PipelinesApiGetPipelineConversionStatisticsRequest): Promise<GetPipelineDealsConversionRatesInResponse>;
    /**
     * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a pipeline
     * @param {PipelinesApiGetPipelineDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelineDeals(requestParameters: PipelinesApiGetPipelineDealsRequest): Promise<GetStageDealsResponse>;
    /**
     * Returns statistics for deals movements for the given time period.
     * @summary Get deals movements in pipeline
     * @param {PipelinesApiGetPipelineMovementStatisticsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelineMovementStatistics(requestParameters: PipelinesApiGetPipelineMovementStatisticsRequest): Promise<GetPipelineDealsMovementsStatisticsResponse>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelines(): Promise<GetPipelinesResponse>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    updatePipeline(requestParameters: PipelinesApiUpdatePipelineRequest): Promise<UpdatePipelineResponse>;
}
