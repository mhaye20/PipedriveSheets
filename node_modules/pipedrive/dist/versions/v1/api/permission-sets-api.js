"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionSetsApi = exports.PermissionSetsApiFactory = exports.PermissionSetsApiFp = exports.PermissionSetsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PermissionSetsApi - axios parameter creator
 * @export
 */
const PermissionSetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns data about a specific permission set.
         * @summary Get one permission set
         * @param {string} id The ID of the permission set

         * @throws {RequiredError}
         */
        getPermissionSet: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getPermissionSet', 'id', id);
            const localVarPath = `/permissionSets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the list of assignments for a permission set.
         * @summary List permission set assignments
         * @param {string} id The ID of the permission set
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getPermissionSetAssignments: (id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getPermissionSetAssignments', 'id', id);
            const localVarPath = `/permissionSets/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all permission sets.
         * @summary Get all permission sets
         * @param {'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'} [app] The app to filter the permission sets by

         * @throws {RequiredError}
         */
        getPermissionSets: (app) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/permissionSets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PermissionSetsApiAxiosParamCreator = PermissionSetsApiAxiosParamCreator;
/**
 * PermissionSetsApi - functional programming interface
 * @export
 */
const PermissionSetsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PermissionSetsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns data about a specific permission set.
         * @summary Get one permission set
         * @param {string} id The ID of the permission set

         * @throws {RequiredError}
         */
        getPermissionSet(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPermissionSet(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the list of assignments for a permission set.
         * @summary List permission set assignments
         * @param {string} id The ID of the permission set
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getPermissionSetAssignments(id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPermissionSetAssignments(id, start, limit);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all permission sets.
         * @summary Get all permission sets
         * @param {'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'} [app] The app to filter the permission sets by

         * @throws {RequiredError}
         */
        getPermissionSets(app) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPermissionSets(app);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.PermissionSetsApiFp = PermissionSetsApiFp;
/**
 * PermissionSetsApi - factory interface
 * @export
 */
const PermissionSetsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PermissionSetsApiFp)(configuration);
    return {
        /**
         * Returns data about a specific permission set.
         * @summary Get one permission set
         * @param {PermissionSetsApiGetPermissionSetRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPermissionSet(requestParameters) {
            return localVarFp.getPermissionSet(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of assignments for a permission set.
         * @summary List permission set assignments
         * @param {PermissionSetsApiGetPermissionSetAssignmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPermissionSetAssignments(requestParameters) {
            return localVarFp.getPermissionSetAssignments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all permission sets.
         * @summary Get all permission sets
         * @param {PermissionSetsApiGetPermissionSetsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPermissionSets(requestParameters = {}) {
            return localVarFp.getPermissionSets(requestParameters.app).then((request) => request(axios, basePath));
        },
    };
};
exports.PermissionSetsApiFactory = PermissionSetsApiFactory;
/**
 * PermissionSetsApi - object-oriented interface
 * @export
 * @class PermissionSetsApi
 * @extends {BaseAPI}
 */
class PermissionSetsApi extends base_1.BaseAPI {
    /**
     * Returns data about a specific permission set.
     * @summary Get one permission set
     * @param {PermissionSetsApiGetPermissionSetRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PermissionSetsApi
     */
    getPermissionSet(requestParameters) {
        return (0, exports.PermissionSetsApiFp)(this.configuration).getPermissionSet(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the list of assignments for a permission set.
     * @summary List permission set assignments
     * @param {PermissionSetsApiGetPermissionSetAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PermissionSetsApi
     */
    getPermissionSetAssignments(requestParameters) {
        return (0, exports.PermissionSetsApiFp)(this.configuration).getPermissionSetAssignments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all permission sets.
     * @summary Get all permission sets
     * @param {PermissionSetsApiGetPermissionSetsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PermissionSetsApi
     */
    getPermissionSets(requestParameters = {}) {
        return (0, exports.PermissionSetsApiFp)(this.configuration).getPermissionSets(requestParameters.app).then((request) => request(this.axios, this.basePath));
    }
}
exports.PermissionSetsApi = PermissionSetsApi;
