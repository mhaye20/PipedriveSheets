"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotesApi = exports.NotesApiFactory = exports.NotesApiFp = exports.NotesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * NotesApi - axios parameter creator
 * @export
 */
const NotesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new note.
         * @summary Add a note
         * @param {AddNoteRequest} [AddNoteRequest]

         * @throws {RequiredError}
         */
        addNote: (AddNoteRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddNoteRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a new comment to a note.
         * @summary Add a comment to a note
         * @param {number} id The ID of the note
         * @param {CommentPostPutObject} [CommentPostPutObject]

         * @throws {RequiredError}
         */
        addNoteComment: (id, CommentPostPutObject) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('addNoteComment', 'id', id);
            const localVarPath = `/notes/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CommentPostPutObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a comment.
         * @summary Delete a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        deleteComment: (id, commentId) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteComment', 'id', id);
            // verify required parameter 'commentId' is not null or undefined
            (0, common_1.assertParamExists)('deleteComment', 'commentId', commentId);
            const localVarPath = `/notes/{id}/comments/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a specific note.
         * @summary Delete a note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        deleteNote: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteNote', 'id', id);
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a comment.
         * @summary Get one comment
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        getComment: (id, commentId) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getComment', 'id', id);
            // verify required parameter 'commentId' is not null or undefined
            (0, common_1.assertParamExists)('getComment', 'commentId', commentId);
            const localVarPath = `/notes/{id}/comments/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details about a specific note.
         * @summary Get one note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        getNote: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getNote', 'id', id);
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all comments associated with a note.
         * @summary Get all comments for a note
         * @param {number} id The ID of the note
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getNoteComments: (id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getNoteComments', 'id', id);
            const localVarPath = `/notes/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all notes.
         * @summary Get all notes
         * @param {number} [user_id] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
         * @param {string} [lead_id] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
         * @param {number} [deal_id] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
         * @param {number} [person_id] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
         * @param {number} [org_id] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {string} [start_date] The date in format of YYYY-MM-DD from which notes to fetch
         * @param {string} [end_date] The date in format of YYYY-MM-DD until which notes to fetch to
         * @param {0 | 1} [pinned_to_lead_flag] If set, the results are filtered by note to lead pinning state
         * @param {0 | 1} [pinned_to_deal_flag] If set, the results are filtered by note to deal pinning state
         * @param {0 | 1} [pinned_to_organization_flag] If set, the results are filtered by note to organization pinning state
         * @param {0 | 1} [pinned_to_person_flag] If set, the results are filtered by note to person pinning state

         * @throws {RequiredError}
         */
        getNotes: (user_id, lead_id, deal_id, person_id, org_id, start, limit, sort, start_date, end_date, pinned_to_lead_flag, pinned_to_deal_flag, pinned_to_organization_flag, pinned_to_person_flag) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration);
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            if (lead_id !== undefined) {
                localVarQueryParameter['lead_id'] = lead_id;
            }
            if (deal_id !== undefined) {
                localVarQueryParameter['deal_id'] = deal_id;
            }
            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }
            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date instanceof Date) ?
                    start_date.toISOString().substr(0, 10) :
                    start_date;
            }
            if (end_date !== undefined) {
                localVarQueryParameter['end_date'] = (end_date instanceof Date) ?
                    end_date.toISOString().substr(0, 10) :
                    end_date;
            }
            if (pinned_to_lead_flag !== undefined) {
                localVarQueryParameter['pinned_to_lead_flag'] = pinned_to_lead_flag;
            }
            if (pinned_to_deal_flag !== undefined) {
                localVarQueryParameter['pinned_to_deal_flag'] = pinned_to_deal_flag;
            }
            if (pinned_to_organization_flag !== undefined) {
                localVarQueryParameter['pinned_to_organization_flag'] = pinned_to_organization_flag;
            }
            if (pinned_to_person_flag !== undefined) {
                localVarQueryParameter['pinned_to_person_flag'] = pinned_to_person_flag;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a comment related to a note.
         * @summary Update a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment
         * @param {CommentPostPutObject} [CommentPostPutObject]

         * @throws {RequiredError}
         */
        updateCommentForNote: (id, commentId, CommentPostPutObject) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateCommentForNote', 'id', id);
            // verify required parameter 'commentId' is not null or undefined
            (0, common_1.assertParamExists)('updateCommentForNote', 'commentId', commentId);
            const localVarPath = `/notes/{id}/comments/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CommentPostPutObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a note.
         * @summary Update a note
         * @param {number} id The ID of the note
         * @param {NoteRequest} [NoteRequest]

         * @throws {RequiredError}
         */
        updateNote: (id, NoteRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateNote', 'id', id);
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(NoteRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.NotesApiAxiosParamCreator = NotesApiAxiosParamCreator;
/**
 * NotesApi - functional programming interface
 * @export
 */
const NotesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new note.
         * @summary Add a note
         * @param {AddNoteRequest} [AddNoteRequest]

         * @throws {RequiredError}
         */
        addNote(AddNoteRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addNote(AddNoteRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Adds a new comment to a note.
         * @summary Add a comment to a note
         * @param {number} id The ID of the note
         * @param {CommentPostPutObject} [CommentPostPutObject]

         * @throws {RequiredError}
         */
        addNoteComment(id, CommentPostPutObject) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addNoteComment(id, CommentPostPutObject);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a comment.
         * @summary Delete a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        deleteComment(id, commentId) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteComment(id, commentId);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a specific note.
         * @summary Delete a note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        deleteNote(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteNote(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a comment.
         * @summary Get one comment
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        getComment(id, commentId) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getComment(id, commentId);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns details about a specific note.
         * @summary Get one note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        getNote(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNote(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all comments associated with a note.
         * @summary Get all comments for a note
         * @param {number} id The ID of the note
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getNoteComments(id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNoteComments(id, start, limit);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all notes.
         * @summary Get all notes
         * @param {number} [user_id] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
         * @param {string} [lead_id] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
         * @param {number} [deal_id] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
         * @param {number} [person_id] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
         * @param {number} [org_id] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {string} [start_date] The date in format of YYYY-MM-DD from which notes to fetch
         * @param {string} [end_date] The date in format of YYYY-MM-DD until which notes to fetch to
         * @param {0 | 1} [pinned_to_lead_flag] If set, the results are filtered by note to lead pinning state
         * @param {0 | 1} [pinned_to_deal_flag] If set, the results are filtered by note to deal pinning state
         * @param {0 | 1} [pinned_to_organization_flag] If set, the results are filtered by note to organization pinning state
         * @param {0 | 1} [pinned_to_person_flag] If set, the results are filtered by note to person pinning state

         * @throws {RequiredError}
         */
        getNotes(user_id, lead_id, deal_id, person_id, org_id, start, limit, sort, start_date, end_date, pinned_to_lead_flag, pinned_to_deal_flag, pinned_to_organization_flag, pinned_to_person_flag) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNotes(user_id, lead_id, deal_id, person_id, org_id, start, limit, sort, start_date, end_date, pinned_to_lead_flag, pinned_to_deal_flag, pinned_to_organization_flag, pinned_to_person_flag);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a comment related to a note.
         * @summary Update a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment
         * @param {CommentPostPutObject} [CommentPostPutObject]

         * @throws {RequiredError}
         */
        updateCommentForNote(id, commentId, CommentPostPutObject) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateCommentForNote(id, commentId, CommentPostPutObject);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a note.
         * @summary Update a note
         * @param {number} id The ID of the note
         * @param {NoteRequest} [NoteRequest]

         * @throws {RequiredError}
         */
        updateNote(id, NoteRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateNote(id, NoteRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.NotesApiFp = NotesApiFp;
/**
 * NotesApi - factory interface
 * @export
 */
const NotesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotesApiFp)(configuration);
    return {
        /**
         * Adds a new note.
         * @summary Add a note
         * @param {NotesApiAddNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addNote(requestParameters = {}) {
            return localVarFp.addNote(requestParameters.AddNoteRequest).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to a note.
         * @summary Add a comment to a note
         * @param {NotesApiAddNoteCommentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addNoteComment(requestParameters) {
            return localVarFp.addNoteComment(requestParameters.id, requestParameters.CommentPostPutObject).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a comment.
         * @summary Delete a comment related to a note
         * @param {NotesApiDeleteCommentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteComment(requestParameters) {
            return localVarFp.deleteComment(requestParameters.id, requestParameters.commentId).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific note.
         * @summary Delete a note
         * @param {NotesApiDeleteNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteNote(requestParameters) {
            return localVarFp.deleteNote(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a comment.
         * @summary Get one comment
         * @param {NotesApiGetCommentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getComment(requestParameters) {
            return localVarFp.getComment(requestParameters.id, requestParameters.commentId).then((request) => request(axios, basePath));
        },
        /**
         * Returns details about a specific note.
         * @summary Get one note
         * @param {NotesApiGetNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getNote(requestParameters) {
            return localVarFp.getNote(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all comments associated with a note.
         * @summary Get all comments for a note
         * @param {NotesApiGetNoteCommentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getNoteComments(requestParameters) {
            return localVarFp.getNoteComments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Returns all notes.
         * @summary Get all notes
         * @param {NotesApiGetNotesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getNotes(requestParameters = {}) {
            return localVarFp.getNotes(requestParameters.user_id, requestParameters.lead_id, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.start_date, requestParameters.end_date, requestParameters.pinned_to_lead_flag, requestParameters.pinned_to_deal_flag, requestParameters.pinned_to_organization_flag, requestParameters.pinned_to_person_flag).then((request) => request(axios, basePath));
        },
        /**
         * Updates a comment related to a note.
         * @summary Update a comment related to a note
         * @param {NotesApiUpdateCommentForNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateCommentForNote(requestParameters) {
            return localVarFp.updateCommentForNote(requestParameters.id, requestParameters.commentId, requestParameters.CommentPostPutObject).then((request) => request(axios, basePath));
        },
        /**
         * Updates a note.
         * @summary Update a note
         * @param {NotesApiUpdateNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateNote(requestParameters) {
            return localVarFp.updateNote(requestParameters.id, requestParameters.NoteRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.NotesApiFactory = NotesApiFactory;
/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
class NotesApi extends base_1.BaseAPI {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {NotesApiAddNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    addNote(requestParameters = {}) {
        return (0, exports.NotesApiFp)(this.configuration).addNote(requestParameters.AddNoteRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {NotesApiAddNoteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    addNoteComment(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).addNoteComment(requestParameters.id, requestParameters.CommentPostPutObject).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {NotesApiDeleteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    deleteComment(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).deleteComment(requestParameters.id, requestParameters.commentId).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {NotesApiDeleteNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    deleteNote(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).deleteNote(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {NotesApiGetCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getComment(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).getComment(requestParameters.id, requestParameters.commentId).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {NotesApiGetNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getNote(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).getNote(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {NotesApiGetNoteCommentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getNoteComments(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).getNoteComments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {NotesApiGetNotesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    getNotes(requestParameters = {}) {
        return (0, exports.NotesApiFp)(this.configuration).getNotes(requestParameters.user_id, requestParameters.lead_id, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.start_date, requestParameters.end_date, requestParameters.pinned_to_lead_flag, requestParameters.pinned_to_deal_flag, requestParameters.pinned_to_organization_flag, requestParameters.pinned_to_person_flag).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {NotesApiUpdateCommentForNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    updateCommentForNote(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).updateCommentForNote(requestParameters.id, requestParameters.commentId, requestParameters.CommentPostPutObject).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a note.
     * @summary Update a note
     * @param {NotesApiUpdateNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    updateNote(requestParameters) {
        return (0, exports.NotesApiFp)(this.configuration).updateNote(requestParameters.id, requestParameters.NoteRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotesApi = NotesApi;
