/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddDealFollowerRequest } from '../models';
import { AddDealFollowerResponse } from '../models';
import { AddDealParticipantRequest } from '../models';
import { AddDealProductRequest } from '../models';
import { AddDealRequest } from '../models';
import { AddParticipantsResponse } from '../models';
import { DeleteDealFollowerResponse } from '../models';
import { DeleteDealParticipantResponse } from '../models';
import { DeleteDealProductResponse } from '../models';
import { DeleteDealResponse } from '../models';
import { DeleteDealsResponse } from '../models';
import { GetAddProductAttachmentDetailsResponse } from '../models';
import { GetAddedDealResponse } from '../models';
import { GetAssociatedFilesResponse } from '../models';
import { GetAssociatedMailMessagesResponse } from '../models';
import { GetChangelogResponse } from '../models';
import { GetDealActivitiesResponse } from '../models';
import { GetDealParticipantsResponse } from '../models';
import { GetDealResponse } from '../models';
import { GetDealSearchResponse } from '../models';
import { GetDealUpdatesResponse } from '../models';
import { GetDealsCollectionResponse } from '../models';
import { GetDealsResponse } from '../models';
import { GetDealsSummaryResponse } from '../models';
import { GetDealsTimelineResponse } from '../models';
import { GetDuplicatedDealResponse } from '../models';
import { GetListFollowersResponse } from '../models';
import { GetMergedDealResponse } from '../models';
import { GetParticipantsChangelogResponse } from '../models';
import { GetPermittedUsersResponse } from '../models';
import { GetPersonsResponse } from '../models';
import { GetProductAttachmentDetailsResponse } from '../models';
import { GetProductsResponse } from '../models';
import { MergeDealsRequest } from '../models';
import { UpdateDealProductRequest } from '../models';
import { UpdateDealRequest } from '../models';
/**
 * DealsApi - axios parameter creator
 * @export
 */
export declare const DealsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * @summary Add a deal
     * @param {AddDealRequest} [AddDealRequest]

     * @throws {RequiredError}
     */
    addDeal: (AddDealRequest?: AddDealRequest) => Promise<RequestArgs>;
    /**
     * Adds a follower to a deal.
     * @summary Add a follower to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealFollowerRequest} [AddDealFollowerRequest]

     * @throws {RequiredError}
     */
    addDealFollower: (id: number, AddDealFollowerRequest?: AddDealFollowerRequest) => Promise<RequestArgs>;
    /**
     * Adds a participant to a deal.
     * @summary Add a participant to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealParticipantRequest} [AddDealParticipantRequest]

     * @throws {RequiredError}
     */
    addDealParticipant: (id: number, AddDealParticipantRequest?: AddDealParticipantRequest) => Promise<RequestArgs>;
    /**
     * Adds a product to a deal, creating a new item called a deal-product.
     * @summary Add a product to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealProductRequest} [AddDealProductRequest]

     * @throws {RequiredError}
     */
    addDealProduct: (id: number, AddDealProductRequest?: AddDealProductRequest) => Promise<RequestArgs>;
    /**
     * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
     * @summary Delete a deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    deleteDeal: (id: number) => Promise<RequestArgs>;
    /**
     * Deletes a follower from a deal.
     * @summary Delete a follower from a deal
     * @param {number} id The ID of the deal
     * @param {number} follower_id The ID of the relationship between the follower and the deal

     * @throws {RequiredError}
     */
    deleteDealFollower: (id: number, follower_id: number) => Promise<RequestArgs>;
    /**
     * Deletes a participant from a deal.
     * @summary Delete a participant from a deal
     * @param {number} id The ID of the deal
     * @param {number} deal_participant_id The ID of the participant of the deal

     * @throws {RequiredError}
     */
    deleteDealParticipant: (id: number, deal_participant_id: number) => Promise<RequestArgs>;
    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`  Not possible to delete the attached product if the deal has installments associated and the product is the last one enabled
     * @summary Delete an attached product from a deal
     * @param {number} id The ID of the deal
     * @param {number} product_attachment_id The product attachment ID

     * @throws {RequiredError}
     */
    deleteDealProduct: (id: number, product_attachment_id: number) => Promise<RequestArgs>;
    /**
     * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
     * @summary Delete multiple deals in bulk
     * @param {string} ids The comma-separated IDs that will be deleted

     * @throws {RequiredError}
     */
    deleteDeals: (ids: string) => Promise<RequestArgs>;
    /**
     * Duplicates a deal.
     * @summary Duplicate deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    duplicateDeal: (id: number) => Promise<RequestArgs>;
    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals â€“ such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * @summary Get details of a deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    getDeal: (id: number) => Promise<RequestArgs>;
    /**
     * Lists activities associated with a deal.
     * @summary List activities associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

     * @throws {RequiredError}
     */
    getDealActivities: (id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string) => Promise<RequestArgs>;
    /**
     * Lists updates about field values of a deal.
     * @summary List updates about deal field values
     * @param {number} id The ID of the deal
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealChangelog: (id: number, cursor?: string, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists files associated with a deal.
     * @summary List files attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
     * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

     * @throws {RequiredError}
     */
    getDealFiles: (id: number, start?: number, limit?: number, sort?: string) => Promise<RequestArgs>;
    /**
     * Lists the followers of a deal.
     * @summary List followers of a deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    getDealFollowers: (id: number) => Promise<RequestArgs>;
    /**
     * Lists mail messages associated with a deal.
     * @summary List mail messages associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealMailMessages: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List participants of a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealParticipants: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * List updates about participants of a deal. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary List updates about participants of a deal
     * @param {number} id The ID of the deal
     * @param {number} [limit] Items shown per page
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getDealParticipantsChangelog: (id: number, limit?: number, cursor?: string) => Promise<RequestArgs>;
    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List all persons associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealPersons: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [include_product_data] Whether to fetch product data along with each attached product (1) or not (0, default)

     * @throws {RequiredError}
     */
    getDealProducts: (id: number, start?: number, limit?: number, include_product_data?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Lists updates about a deal.
     * @summary List updates about a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).

     * @throws {RequiredError}
     */
    getDealUpdates: (id: number, start?: number, limit?: number, all_changes?: string, items?: string) => Promise<RequestArgs>;
    /**
     * Lists the users permitted to access a deal.
     * @summary List permitted users
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    getDealUsers: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * @summary Get all deals
     * @param {number} [user_id] If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
     * @param {number} [filter_id] The ID of the filter to use
     * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {0 | 1} [owned_by_you] When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.

     * @throws {RequiredError}
     */
    getDeals: (user_id?: number, filter_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', start?: number, limit?: number, sort?: string, owned_by_you?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all deals (BETA)
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {number} [user_id] If supplied, only deals matching the given user will be returned
     * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
     * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

     * @throws {RequiredError}
     */
    getDealsCollection: (cursor?: string, limit?: number, since?: string, until?: string, user_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted') => Promise<RequestArgs>;
    /**
     * Returns a summary of all the deals.
     * @summary Get deals summary
     * @param {'open' | 'won' | 'lost'} [status] Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
     * @param {number} [filter_id] &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
     * @param {number} [user_id] Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
     * @param {number} [pipeline_id] Only deals within the given pipeline will be returned
     * @param {number} [stage_id] Only deals within the given stage will be returned

     * @throws {RequiredError}
     */
    getDealsSummary: (status?: 'open' | 'won' | 'lost', filter_id?: number, user_id?: number, pipeline_id?: number, stage_id?: number) => Promise<RequestArgs>;
    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) â€” e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups â€” January, February and March â€” based on the value of the given `field_key`.
     * @summary Get deals timeline
     * @param {string} start_date The date when the first interval starts. Format: YYYY-MM-DD.
     * @param {'day' | 'week' | 'month' | 'quarter'} interval The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * @param {number} amount The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
     * @param {string} field_key The date field key which deals will be retrieved from
     * @param {number} [user_id] If supplied, only deals matching the given user will be returned
     * @param {number} [pipeline_id] If supplied, only deals matching the given pipeline will be returned
     * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
     * @param {0 | 1} [exclude_deals] Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
     * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.

     * @throws {RequiredError}
     */
    getDealsTimeline: (start_date: string, interval: 'day' | 'week' | 'month' | 'quarter', amount: number, field_key: string, user_id?: number, pipeline_id?: number, filter_id?: number, exclude_deals?: 0 | 1, totals_convert_currency?: string) => Promise<RequestArgs>;
    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * @summary Merge two deals
     * @param {number} id The ID of the deal
     * @param {MergeDealsRequest} [MergeDealsRequest]

     * @throws {RequiredError}
     */
    mergeDeals: (id: number, MergeDealsRequest?: MergeDealsRequest) => Promise<RequestArgs>;
    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [person_id] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
     * @param {number} [organization_id] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
     * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
     * @param {'deal.cc_email'} [include_fields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    searchDeals: (term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, status?: 'open' | 'won' | 'lost', include_fields?: 'deal.cc_email', start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * @summary Update a deal
     * @param {number} id The ID of the deal
     * @param {UpdateDealRequest} [UpdateDealRequest]

     * @throws {RequiredError}
     */
    updateDeal: (id: number, UpdateDealRequest?: UpdateDealRequest) => Promise<RequestArgs>;
    /**
     * Updates the details of the product that has been attached to a deal.
     * @summary Update the product attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} product_attachment_id The ID of the deal-product (the ID of the product attached to the deal)
     * @param {UpdateDealProductRequest} [UpdateDealProductRequest]

     * @throws {RequiredError}
     */
    updateDealProduct: (id: number, product_attachment_id: number, UpdateDealProductRequest?: UpdateDealProductRequest) => Promise<RequestArgs>;
};
/**
 * DealsApi - functional programming interface
 * @export
 */
export declare const DealsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * @summary Add a deal
     * @param {AddDealRequest} [AddDealRequest]

     * @throws {RequiredError}
     */
    addDeal(AddDealRequest?: AddDealRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAddedDealResponse>>;
    /**
     * Adds a follower to a deal.
     * @summary Add a follower to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealFollowerRequest} [AddDealFollowerRequest]

     * @throws {RequiredError}
     */
    addDealFollower(id: number, AddDealFollowerRequest?: AddDealFollowerRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddDealFollowerResponse>>;
    /**
     * Adds a participant to a deal.
     * @summary Add a participant to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealParticipantRequest} [AddDealParticipantRequest]

     * @throws {RequiredError}
     */
    addDealParticipant(id: number, AddDealParticipantRequest?: AddDealParticipantRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddParticipantsResponse>>;
    /**
     * Adds a product to a deal, creating a new item called a deal-product.
     * @summary Add a product to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealProductRequest} [AddDealProductRequest]

     * @throws {RequiredError}
     */
    addDealProduct(id: number, AddDealProductRequest?: AddDealProductRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAddProductAttachmentDetailsResponse>>;
    /**
     * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
     * @summary Delete a deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    deleteDeal(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealResponse>>;
    /**
     * Deletes a follower from a deal.
     * @summary Delete a follower from a deal
     * @param {number} id The ID of the deal
     * @param {number} follower_id The ID of the relationship between the follower and the deal

     * @throws {RequiredError}
     */
    deleteDealFollower(id: number, follower_id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealFollowerResponse>>;
    /**
     * Deletes a participant from a deal.
     * @summary Delete a participant from a deal
     * @param {number} id The ID of the deal
     * @param {number} deal_participant_id The ID of the participant of the deal

     * @throws {RequiredError}
     */
    deleteDealParticipant(id: number, deal_participant_id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealParticipantResponse>>;
    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`  Not possible to delete the attached product if the deal has installments associated and the product is the last one enabled
     * @summary Delete an attached product from a deal
     * @param {number} id The ID of the deal
     * @param {number} product_attachment_id The product attachment ID

     * @throws {RequiredError}
     */
    deleteDealProduct(id: number, product_attachment_id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealProductResponse>>;
    /**
     * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
     * @summary Delete multiple deals in bulk
     * @param {string} ids The comma-separated IDs that will be deleted

     * @throws {RequiredError}
     */
    deleteDeals(ids: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealsResponse>>;
    /**
     * Duplicates a deal.
     * @summary Duplicate deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    duplicateDeal(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDuplicatedDealResponse>>;
    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals â€“ such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * @summary Get details of a deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    getDeal(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealResponse>>;
    /**
     * Lists activities associated with a deal.
     * @summary List activities associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

     * @throws {RequiredError}
     */
    getDealActivities(id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealActivitiesResponse>>;
    /**
     * Lists updates about field values of a deal.
     * @summary List updates about deal field values
     * @param {number} id The ID of the deal
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealChangelog(id: number, cursor?: string, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetChangelogResponse>>;
    /**
     * Lists files associated with a deal.
     * @summary List files attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
     * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

     * @throws {RequiredError}
     */
    getDealFiles(id: number, start?: number, limit?: number, sort?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFilesResponse>>;
    /**
     * Lists the followers of a deal.
     * @summary List followers of a deal
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    getDealFollowers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetListFollowersResponse>>;
    /**
     * Lists mail messages associated with a deal.
     * @summary List mail messages associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealMailMessages(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedMailMessagesResponse>>;
    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List participants of a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealParticipants(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealParticipantsResponse>>;
    /**
     * List updates about participants of a deal. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary List updates about participants of a deal
     * @param {number} id The ID of the deal
     * @param {number} [limit] Items shown per page
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getDealParticipantsChangelog(id: number, limit?: number, cursor?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetParticipantsChangelogResponse>>;
    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List all persons associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getDealPersons(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonsResponse>>;
    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [include_product_data] Whether to fetch product data along with each attached product (1) or not (0, default)

     * @throws {RequiredError}
     */
    getDealProducts(id: number, start?: number, limit?: number, include_product_data?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductsResponse>>;
    /**
     * Lists updates about a deal.
     * @summary List updates about a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).

     * @throws {RequiredError}
     */
    getDealUpdates(id: number, start?: number, limit?: number, all_changes?: string, items?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealUpdatesResponse>>;
    /**
     * Lists the users permitted to access a deal.
     * @summary List permitted users
     * @param {number} id The ID of the deal

     * @throws {RequiredError}
     */
    getDealUsers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPermittedUsersResponse>>;
    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * @summary Get all deals
     * @param {number} [user_id] If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
     * @param {number} [filter_id] The ID of the filter to use
     * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {0 | 1} [owned_by_you] When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.

     * @throws {RequiredError}
     */
    getDeals(user_id?: number, filter_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', start?: number, limit?: number, sort?: string, owned_by_you?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsResponse>>;
    /**
     * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all deals (BETA)
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @param {number} [user_id] If supplied, only deals matching the given user will be returned
     * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
     * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

     * @throws {RequiredError}
     */
    getDealsCollection(cursor?: string, limit?: number, since?: string, until?: string, user_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted'): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsCollectionResponse>>;
    /**
     * Returns a summary of all the deals.
     * @summary Get deals summary
     * @param {'open' | 'won' | 'lost'} [status] Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
     * @param {number} [filter_id] &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
     * @param {number} [user_id] Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
     * @param {number} [pipeline_id] Only deals within the given pipeline will be returned
     * @param {number} [stage_id] Only deals within the given stage will be returned

     * @throws {RequiredError}
     */
    getDealsSummary(status?: 'open' | 'won' | 'lost', filter_id?: number, user_id?: number, pipeline_id?: number, stage_id?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsSummaryResponse>>;
    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) â€” e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups â€” January, February and March â€” based on the value of the given `field_key`.
     * @summary Get deals timeline
     * @param {string} start_date The date when the first interval starts. Format: YYYY-MM-DD.
     * @param {'day' | 'week' | 'month' | 'quarter'} interval The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * @param {number} amount The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
     * @param {string} field_key The date field key which deals will be retrieved from
     * @param {number} [user_id] If supplied, only deals matching the given user will be returned
     * @param {number} [pipeline_id] If supplied, only deals matching the given pipeline will be returned
     * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
     * @param {0 | 1} [exclude_deals] Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
     * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.

     * @throws {RequiredError}
     */
    getDealsTimeline(start_date: string, interval: 'day' | 'week' | 'month' | 'quarter', amount: number, field_key: string, user_id?: number, pipeline_id?: number, filter_id?: number, exclude_deals?: 0 | 1, totals_convert_currency?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsTimelineResponse>>;
    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * @summary Merge two deals
     * @param {number} id The ID of the deal
     * @param {MergeDealsRequest} [MergeDealsRequest]

     * @throws {RequiredError}
     */
    mergeDeals(id: number, MergeDealsRequest?: MergeDealsRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetMergedDealResponse>>;
    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [person_id] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
     * @param {number} [organization_id] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
     * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
     * @param {'deal.cc_email'} [include_fields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    searchDeals(term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, status?: 'open' | 'won' | 'lost', include_fields?: 'deal.cc_email', start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealSearchResponse>>;
    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * @summary Update a deal
     * @param {number} id The ID of the deal
     * @param {UpdateDealRequest} [UpdateDealRequest]

     * @throws {RequiredError}
     */
    updateDeal(id: number, UpdateDealRequest?: UpdateDealRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAddedDealResponse>>;
    /**
     * Updates the details of the product that has been attached to a deal.
     * @summary Update the product attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} product_attachment_id The ID of the deal-product (the ID of the product attached to the deal)
     * @param {UpdateDealProductRequest} [UpdateDealProductRequest]

     * @throws {RequiredError}
     */
    updateDealProduct(id: number, product_attachment_id: number, UpdateDealProductRequest?: UpdateDealProductRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductAttachmentDetailsResponse>>;
};
/**
 * DealsApi - factory interface
 * @export
 */
export declare const DealsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * @summary Add a deal
     * @param {DealsApiAddDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addDeal(requestParameters?: DealsApiAddDealRequest): Promise<GetAddedDealResponse>;
    /**
     * Adds a follower to a deal.
     * @summary Add a follower to a deal
     * @param {DealsApiAddDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addDealFollower(requestParameters: DealsApiAddDealFollowerRequest): Promise<AddDealFollowerResponse>;
    /**
     * Adds a participant to a deal.
     * @summary Add a participant to a deal
     * @param {DealsApiAddDealParticipantRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addDealParticipant(requestParameters: DealsApiAddDealParticipantRequest): Promise<AddParticipantsResponse>;
    /**
     * Adds a product to a deal, creating a new item called a deal-product.
     * @summary Add a product to a deal
     * @param {DealsApiAddDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addDealProduct(requestParameters: DealsApiAddDealProductRequest): Promise<GetAddProductAttachmentDetailsResponse>;
    /**
     * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
     * @summary Delete a deal
     * @param {DealsApiDeleteDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteDeal(requestParameters: DealsApiDeleteDealRequest): Promise<DeleteDealResponse>;
    /**
     * Deletes a follower from a deal.
     * @summary Delete a follower from a deal
     * @param {DealsApiDeleteDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteDealFollower(requestParameters: DealsApiDeleteDealFollowerRequest): Promise<DeleteDealFollowerResponse>;
    /**
     * Deletes a participant from a deal.
     * @summary Delete a participant from a deal
     * @param {DealsApiDeleteDealParticipantRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteDealParticipant(requestParameters: DealsApiDeleteDealParticipantRequest): Promise<DeleteDealParticipantResponse>;
    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`  Not possible to delete the attached product if the deal has installments associated and the product is the last one enabled
     * @summary Delete an attached product from a deal
     * @param {DealsApiDeleteDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteDealProduct(requestParameters: DealsApiDeleteDealProductRequest): Promise<DeleteDealProductResponse>;
    /**
     * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
     * @summary Delete multiple deals in bulk
     * @param {DealsApiDeleteDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteDeals(requestParameters: DealsApiDeleteDealsRequest): Promise<DeleteDealsResponse>;
    /**
     * Duplicates a deal.
     * @summary Duplicate deal
     * @param {DealsApiDuplicateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    duplicateDeal(requestParameters: DealsApiDuplicateDealRequest): Promise<GetDuplicatedDealResponse>;
    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals â€“ such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * @summary Get details of a deal
     * @param {DealsApiGetDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDeal(requestParameters: DealsApiGetDealRequest): Promise<GetDealResponse>;
    /**
     * Lists activities associated with a deal.
     * @summary List activities associated with a deal
     * @param {DealsApiGetDealActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealActivities(requestParameters: DealsApiGetDealActivitiesRequest): Promise<GetDealActivitiesResponse>;
    /**
     * Lists updates about field values of a deal.
     * @summary List updates about deal field values
     * @param {DealsApiGetDealChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealChangelog(requestParameters: DealsApiGetDealChangelogRequest): Promise<GetChangelogResponse>;
    /**
     * Lists files associated with a deal.
     * @summary List files attached to a deal
     * @param {DealsApiGetDealFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealFiles(requestParameters: DealsApiGetDealFilesRequest): Promise<GetAssociatedFilesResponse>;
    /**
     * Lists the followers of a deal.
     * @summary List followers of a deal
     * @param {DealsApiGetDealFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealFollowers(requestParameters: DealsApiGetDealFollowersRequest): Promise<GetListFollowersResponse>;
    /**
     * Lists mail messages associated with a deal.
     * @summary List mail messages associated with a deal
     * @param {DealsApiGetDealMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealMailMessages(requestParameters: DealsApiGetDealMailMessagesRequest): Promise<GetAssociatedMailMessagesResponse>;
    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List participants of a deal
     * @param {DealsApiGetDealParticipantsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealParticipants(requestParameters: DealsApiGetDealParticipantsRequest): Promise<GetDealParticipantsResponse>;
    /**
     * List updates about participants of a deal. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary List updates about participants of a deal
     * @param {DealsApiGetDealParticipantsChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealParticipantsChangelog(requestParameters: DealsApiGetDealParticipantsChangelogRequest): Promise<GetParticipantsChangelogResponse>;
    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List all persons associated with a deal
     * @param {DealsApiGetDealPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealPersons(requestParameters: DealsApiGetDealPersonsRequest): Promise<GetPersonsResponse>;
    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {DealsApiGetDealProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealProducts(requestParameters: DealsApiGetDealProductsRequest): Promise<GetProductsResponse>;
    /**
     * Lists updates about a deal.
     * @summary List updates about a deal
     * @param {DealsApiGetDealUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealUpdates(requestParameters: DealsApiGetDealUpdatesRequest): Promise<GetDealUpdatesResponse>;
    /**
     * Lists the users permitted to access a deal.
     * @summary List permitted users
     * @param {DealsApiGetDealUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealUsers(requestParameters: DealsApiGetDealUsersRequest): Promise<GetPermittedUsersResponse>;
    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * @summary Get all deals
     * @param {DealsApiGetDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDeals(requestParameters?: DealsApiGetDealsRequest): Promise<GetDealsResponse>;
    /**
     * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all deals (BETA)
     * @param {DealsApiGetDealsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealsCollection(requestParameters?: DealsApiGetDealsCollectionRequest): Promise<GetDealsCollectionResponse>;
    /**
     * Returns a summary of all the deals.
     * @summary Get deals summary
     * @param {DealsApiGetDealsSummaryRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealsSummary(requestParameters?: DealsApiGetDealsSummaryRequest): Promise<GetDealsSummaryResponse>;
    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) â€” e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups â€” January, February and March â€” based on the value of the given `field_key`.
     * @summary Get deals timeline
     * @param {DealsApiGetDealsTimelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getDealsTimeline(requestParameters: DealsApiGetDealsTimelineRequest): Promise<GetDealsTimelineResponse>;
    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * @summary Merge two deals
     * @param {DealsApiMergeDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    mergeDeals(requestParameters: DealsApiMergeDealsRequest): Promise<GetMergedDealResponse>;
    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {DealsApiSearchDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    searchDeals(requestParameters: DealsApiSearchDealsRequest): Promise<GetDealSearchResponse>;
    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * @summary Update a deal
     * @param {DealsApiUpdateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateDeal(requestParameters: DealsApiUpdateDealRequest): Promise<GetAddedDealResponse>;
    /**
     * Updates the details of the product that has been attached to a deal.
     * @summary Update the product attached to a deal
     * @param {DealsApiUpdateDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateDealProduct(requestParameters: DealsApiUpdateDealProductRequest): Promise<GetProductAttachmentDetailsResponse>;
};
/**
 * Request parameters for addDeal operation in DealsApi.
 * @export
 * @interface DealsApiAddDealRequest
 */
export interface DealsApiAddDealRequest {
    /**
     *
     * @type {AddDealRequest}
     * @memberof DealsApiAddDeal
     */
    readonly AddDealRequest?: AddDealRequest;
}
/**
 * Request parameters for addDealFollower operation in DealsApi.
 * @export
 * @interface DealsApiAddDealFollowerRequest
 */
export interface DealsApiAddDealFollowerRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealFollower
     */
    readonly id: number;
    /**
     *
     * @type {AddDealFollowerRequest}
     * @memberof DealsApiAddDealFollower
     */
    readonly AddDealFollowerRequest?: AddDealFollowerRequest;
}
/**
 * Request parameters for addDealParticipant operation in DealsApi.
 * @export
 * @interface DealsApiAddDealParticipantRequest
 */
export interface DealsApiAddDealParticipantRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealParticipant
     */
    readonly id: number;
    /**
     *
     * @type {AddDealParticipantRequest}
     * @memberof DealsApiAddDealParticipant
     */
    readonly AddDealParticipantRequest?: AddDealParticipantRequest;
}
/**
 * Request parameters for addDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiAddDealProductRequest
 */
export interface DealsApiAddDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealProduct
     */
    readonly id: number;
    /**
     *
     * @type {AddDealProductRequest}
     * @memberof DealsApiAddDealProduct
     */
    readonly AddDealProductRequest?: AddDealProductRequest;
}
/**
 * Request parameters for deleteDeal operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealRequest
 */
export interface DealsApiDeleteDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDeal
     */
    readonly id: number;
}
/**
 * Request parameters for deleteDealFollower operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealFollowerRequest
 */
export interface DealsApiDeleteDealFollowerRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealFollower
     */
    readonly id: number;
    /**
     * The ID of the relationship between the follower and the deal
     * @type {number}
     * @memberof DealsApiDeleteDealFollower
     */
    readonly follower_id: number;
}
/**
 * Request parameters for deleteDealParticipant operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealParticipantRequest
 */
export interface DealsApiDeleteDealParticipantRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealParticipant
     */
    readonly id: number;
    /**
     * The ID of the participant of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealParticipant
     */
    readonly deal_participant_id: number;
}
/**
 * Request parameters for deleteDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealProductRequest
 */
export interface DealsApiDeleteDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealProduct
     */
    readonly id: number;
    /**
     * The product attachment ID
     * @type {number}
     * @memberof DealsApiDeleteDealProduct
     */
    readonly product_attachment_id: number;
}
/**
 * Request parameters for deleteDeals operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealsRequest
 */
export interface DealsApiDeleteDealsRequest {
    /**
     * The comma-separated IDs that will be deleted
     * @type {string}
     * @memberof DealsApiDeleteDeals
     */
    readonly ids: string;
}
/**
 * Request parameters for duplicateDeal operation in DealsApi.
 * @export
 * @interface DealsApiDuplicateDealRequest
 */
export interface DealsApiDuplicateDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDuplicateDeal
     */
    readonly id: number;
}
/**
 * Request parameters for getDeal operation in DealsApi.
 * @export
 * @interface DealsApiGetDealRequest
 */
export interface DealsApiGetDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDeal
     */
    readonly id: number;
}
/**
 * Request parameters for getDealActivities operation in DealsApi.
 * @export
 * @interface DealsApiGetDealActivitiesRequest
 */
export interface DealsApiGetDealActivitiesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealActivities
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealActivities
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealActivities
     */
    readonly limit?: number;
    /**
     * Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @type {0 | 1}
     * @memberof DealsApiGetDealActivities
     */
    readonly done?: 0 | 1;
    /**
     * A comma-separated string of activity IDs to exclude from result
     * @type {string}
     * @memberof DealsApiGetDealActivities
     */
    readonly exclude?: string;
}
/**
 * Request parameters for getDealChangelog operation in DealsApi.
 * @export
 * @interface DealsApiGetDealChangelogRequest
 */
export interface DealsApiGetDealChangelogRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealChangelog
     */
    readonly id: number;
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealChangelog
     */
    readonly cursor?: string;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealChangelog
     */
    readonly limit?: number;
}
/**
 * Request parameters for getDealFiles operation in DealsApi.
 * @export
 * @interface DealsApiGetDealFilesRequest
 */
export interface DealsApiGetDealFilesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealFiles
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealFiles
     */
    readonly start?: number;
    /**
     * Items shown per page. Please note that a maximum value of 100 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealFiles
     */
    readonly limit?: number;
    /**
     * Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;
     * @type {string}
     * @memberof DealsApiGetDealFiles
     */
    readonly sort?: string;
}
/**
 * Request parameters for getDealFollowers operation in DealsApi.
 * @export
 * @interface DealsApiGetDealFollowersRequest
 */
export interface DealsApiGetDealFollowersRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealFollowers
     */
    readonly id: number;
}
/**
 * Request parameters for getDealMailMessages operation in DealsApi.
 * @export
 * @interface DealsApiGetDealMailMessagesRequest
 */
export interface DealsApiGetDealMailMessagesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealMailMessages
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealMailMessages
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealMailMessages
     */
    readonly limit?: number;
}
/**
 * Request parameters for getDealParticipants operation in DealsApi.
 * @export
 * @interface DealsApiGetDealParticipantsRequest
 */
export interface DealsApiGetDealParticipantsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealParticipants
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealParticipants
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealParticipants
     */
    readonly limit?: number;
}
/**
 * Request parameters for getDealParticipantsChangelog operation in DealsApi.
 * @export
 * @interface DealsApiGetDealParticipantsChangelogRequest
 */
export interface DealsApiGetDealParticipantsChangelogRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealParticipantsChangelog
     */
    readonly id: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealParticipantsChangelog
     */
    readonly limit?: number;
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealParticipantsChangelog
     */
    readonly cursor?: string;
}
/**
 * Request parameters for getDealPersons operation in DealsApi.
 * @export
 * @interface DealsApiGetDealPersonsRequest
 */
export interface DealsApiGetDealPersonsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealPersons
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealPersons
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealPersons
     */
    readonly limit?: number;
}
/**
 * Request parameters for getDealProducts operation in DealsApi.
 * @export
 * @interface DealsApiGetDealProductsRequest
 */
export interface DealsApiGetDealProductsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly limit?: number;
    /**
     * Whether to fetch product data along with each attached product (1) or not (0, default)
     * @type {0 | 1}
     * @memberof DealsApiGetDealProducts
     */
    readonly include_product_data?: 0 | 1;
}
/**
 * Request parameters for getDealUpdates operation in DealsApi.
 * @export
 * @interface DealsApiGetDealUpdatesRequest
 */
export interface DealsApiGetDealUpdatesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealUpdates
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealUpdates
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealUpdates
     */
    readonly limit?: number;
    /**
     * Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @type {string}
     * @memberof DealsApiGetDealUpdates
     */
    readonly all_changes?: string;
    /**
     * A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).
     * @type {string}
     * @memberof DealsApiGetDealUpdates
     */
    readonly items?: string;
}
/**
 * Request parameters for getDealUsers operation in DealsApi.
 * @export
 * @interface DealsApiGetDealUsersRequest
 */
export interface DealsApiGetDealUsersRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealUsers
     */
    readonly id: number;
}
/**
 * Request parameters for getDeals operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsRequest
 */
export interface DealsApiGetDealsRequest {
    /**
     * If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly user_id?: number;
    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly filter_id?: number;
    /**
     * If supplied, only deals within the given stage will be returned
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly stage_id?: number;
    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'}
     * @memberof DealsApiGetDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted';
    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly limit?: number;
    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly sort?: string;
    /**
     * When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.
     * @type {0 | 1}
     * @memberof DealsApiGetDeals
     */
    readonly owned_by_you?: 0 | 1;
}
/**
 * Request parameters for getDealsCollection operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsCollectionRequest
 */
export interface DealsApiGetDealsCollectionRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealsCollection
     */
    readonly cursor?: string;
    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealsCollection
     */
    readonly limit?: number;
    /**
     * The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof DealsApiGetDealsCollection
     */
    readonly since?: string;
    /**
     * The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof DealsApiGetDealsCollection
     */
    readonly until?: string;
    /**
     * If supplied, only deals matching the given user will be returned
     * @type {number}
     * @memberof DealsApiGetDealsCollection
     */
    readonly user_id?: number;
    /**
     * If supplied, only deals within the given stage will be returned
     * @type {number}
     * @memberof DealsApiGetDealsCollection
     */
    readonly stage_id?: number;
    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted'}
     * @memberof DealsApiGetDealsCollection
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted';
}
/**
 * Request parameters for getDealsSummary operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsSummaryRequest
 */
export interface DealsApiGetDealsSummaryRequest {
    /**
     * Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
     * @type {'open' | 'won' | 'lost'}
     * @memberof DealsApiGetDealsSummary
     */
    readonly status?: 'open' | 'won' | 'lost';
    /**
     * &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly filter_id?: number;
    /**
     * Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly user_id?: number;
    /**
     * Only deals within the given pipeline will be returned
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly pipeline_id?: number;
    /**
     * Only deals within the given stage will be returned
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly stage_id?: number;
}
/**
 * Request parameters for getDealsTimeline operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsTimelineRequest
 */
export interface DealsApiGetDealsTimelineRequest {
    /**
     * The date when the first interval starts. Format: YYYY-MM-DD.
     * @type {string}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly start_date: string;
    /**
     * The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * @type {'day' | 'week' | 'month' | 'quarter'}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly interval: 'day' | 'week' | 'month' | 'quarter';
    /**
     * The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly amount: number;
    /**
     * The date field key which deals will be retrieved from
     * @type {string}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly field_key: string;
    /**
     * If supplied, only deals matching the given user will be returned
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly user_id?: number;
    /**
     * If supplied, only deals matching the given pipeline will be returned
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly pipeline_id?: number;
    /**
     * If supplied, only deals matching the given filter will be returned
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly filter_id?: number;
    /**
     * Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
     * @type {0 | 1}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly exclude_deals?: 0 | 1;
    /**
     * The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.
     * @type {string}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly totals_convert_currency?: string;
}
/**
 * Request parameters for mergeDeals operation in DealsApi.
 * @export
 * @interface DealsApiMergeDealsRequest
 */
export interface DealsApiMergeDealsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiMergeDeals
     */
    readonly id: number;
    /**
     *
     * @type {MergeDealsRequest}
     * @memberof DealsApiMergeDeals
     */
    readonly MergeDealsRequest?: MergeDealsRequest;
}
/**
 * Request parameters for searchDeals operation in DealsApi.
 * @export
 * @interface DealsApiSearchDealsRequest
 */
export interface DealsApiSearchDealsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof DealsApiSearchDeals
     */
    readonly term: string;
    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'custom_fields' | 'notes' | 'title'}
     * @memberof DealsApiSearchDeals
     */
    readonly fields?: 'custom_fields' | 'notes' | 'title';
    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof DealsApiSearchDeals
     */
    readonly exact_match?: boolean;
    /**
     * Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly person_id?: number;
    /**
     * Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly organization_id?: number;
    /**
     * Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
     * @type {'open' | 'won' | 'lost'}
     * @memberof DealsApiSearchDeals
     */
    readonly status?: 'open' | 'won' | 'lost';
    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'deal.cc_email'}
     * @memberof DealsApiSearchDeals
     */
    readonly include_fields?: 'deal.cc_email';
    /**
     * Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly limit?: number;
}
/**
 * Request parameters for updateDeal operation in DealsApi.
 * @export
 * @interface DealsApiUpdateDealRequest
 */
export interface DealsApiUpdateDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateDeal
     */
    readonly id: number;
    /**
     *
     * @type {UpdateDealRequest}
     * @memberof DealsApiUpdateDeal
     */
    readonly UpdateDealRequest?: UpdateDealRequest;
}
/**
 * Request parameters for updateDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiUpdateDealProductRequest
 */
export interface DealsApiUpdateDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly id: number;
    /**
     * The ID of the deal-product (the ID of the product attached to the deal)
     * @type {number}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly product_attachment_id: number;
    /**
     *
     * @type {UpdateDealProductRequest}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly UpdateDealProductRequest?: UpdateDealProductRequest;
}
/**
 * DealsApi - object-oriented interface
 * @export
 * @class DealsApi
 * @extends {BaseAPI}
 */
export declare class DealsApi extends BaseAPI {
    /**
     * Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * @summary Add a deal
     * @param {DealsApiAddDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    addDeal(requestParameters?: DealsApiAddDealRequest): Promise<GetAddedDealResponse>;
    /**
     * Adds a follower to a deal.
     * @summary Add a follower to a deal
     * @param {DealsApiAddDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    addDealFollower(requestParameters: DealsApiAddDealFollowerRequest): Promise<AddDealFollowerResponse>;
    /**
     * Adds a participant to a deal.
     * @summary Add a participant to a deal
     * @param {DealsApiAddDealParticipantRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    addDealParticipant(requestParameters: DealsApiAddDealParticipantRequest): Promise<AddParticipantsResponse>;
    /**
     * Adds a product to a deal, creating a new item called a deal-product.
     * @summary Add a product to a deal
     * @param {DealsApiAddDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    addDealProduct(requestParameters: DealsApiAddDealProductRequest): Promise<GetAddProductAttachmentDetailsResponse>;
    /**
     * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
     * @summary Delete a deal
     * @param {DealsApiDeleteDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    deleteDeal(requestParameters: DealsApiDeleteDealRequest): Promise<DeleteDealResponse>;
    /**
     * Deletes a follower from a deal.
     * @summary Delete a follower from a deal
     * @param {DealsApiDeleteDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    deleteDealFollower(requestParameters: DealsApiDeleteDealFollowerRequest): Promise<DeleteDealFollowerResponse>;
    /**
     * Deletes a participant from a deal.
     * @summary Delete a participant from a deal
     * @param {DealsApiDeleteDealParticipantRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    deleteDealParticipant(requestParameters: DealsApiDeleteDealParticipantRequest): Promise<DeleteDealParticipantResponse>;
    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`  Not possible to delete the attached product if the deal has installments associated and the product is the last one enabled
     * @summary Delete an attached product from a deal
     * @param {DealsApiDeleteDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    deleteDealProduct(requestParameters: DealsApiDeleteDealProductRequest): Promise<DeleteDealProductResponse>;
    /**
     * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
     * @summary Delete multiple deals in bulk
     * @param {DealsApiDeleteDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    deleteDeals(requestParameters: DealsApiDeleteDealsRequest): Promise<DeleteDealsResponse>;
    /**
     * Duplicates a deal.
     * @summary Duplicate deal
     * @param {DealsApiDuplicateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    duplicateDeal(requestParameters: DealsApiDuplicateDealRequest): Promise<GetDuplicatedDealResponse>;
    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals â€“ such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * @summary Get details of a deal
     * @param {DealsApiGetDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDeal(requestParameters: DealsApiGetDealRequest): Promise<GetDealResponse>;
    /**
     * Lists activities associated with a deal.
     * @summary List activities associated with a deal
     * @param {DealsApiGetDealActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealActivities(requestParameters: DealsApiGetDealActivitiesRequest): Promise<GetDealActivitiesResponse>;
    /**
     * Lists updates about field values of a deal.
     * @summary List updates about deal field values
     * @param {DealsApiGetDealChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealChangelog(requestParameters: DealsApiGetDealChangelogRequest): Promise<GetChangelogResponse>;
    /**
     * Lists files associated with a deal.
     * @summary List files attached to a deal
     * @param {DealsApiGetDealFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealFiles(requestParameters: DealsApiGetDealFilesRequest): Promise<GetAssociatedFilesResponse>;
    /**
     * Lists the followers of a deal.
     * @summary List followers of a deal
     * @param {DealsApiGetDealFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealFollowers(requestParameters: DealsApiGetDealFollowersRequest): Promise<GetListFollowersResponse>;
    /**
     * Lists mail messages associated with a deal.
     * @summary List mail messages associated with a deal
     * @param {DealsApiGetDealMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealMailMessages(requestParameters: DealsApiGetDealMailMessagesRequest): Promise<GetAssociatedMailMessagesResponse>;
    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List participants of a deal
     * @param {DealsApiGetDealParticipantsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealParticipants(requestParameters: DealsApiGetDealParticipantsRequest): Promise<GetDealParticipantsResponse>;
    /**
     * List updates about participants of a deal. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary List updates about participants of a deal
     * @param {DealsApiGetDealParticipantsChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealParticipantsChangelog(requestParameters: DealsApiGetDealParticipantsChangelogRequest): Promise<GetParticipantsChangelogResponse>;
    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List all persons associated with a deal
     * @param {DealsApiGetDealPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealPersons(requestParameters: DealsApiGetDealPersonsRequest): Promise<GetPersonsResponse>;
    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {DealsApiGetDealProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealProducts(requestParameters: DealsApiGetDealProductsRequest): Promise<GetProductsResponse>;
    /**
     * Lists updates about a deal.
     * @summary List updates about a deal
     * @param {DealsApiGetDealUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealUpdates(requestParameters: DealsApiGetDealUpdatesRequest): Promise<GetDealUpdatesResponse>;
    /**
     * Lists the users permitted to access a deal.
     * @summary List permitted users
     * @param {DealsApiGetDealUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealUsers(requestParameters: DealsApiGetDealUsersRequest): Promise<import("../models").BaseResponse1>;
    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * @summary Get all deals
     * @param {DealsApiGetDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDeals(requestParameters?: DealsApiGetDealsRequest): Promise<GetDealsResponse>;
    /**
     * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all deals (BETA)
     * @param {DealsApiGetDealsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealsCollection(requestParameters?: DealsApiGetDealsCollectionRequest): Promise<GetDealsCollectionResponse>;
    /**
     * Returns a summary of all the deals.
     * @summary Get deals summary
     * @param {DealsApiGetDealsSummaryRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealsSummary(requestParameters?: DealsApiGetDealsSummaryRequest): Promise<GetDealsSummaryResponse>;
    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) â€” e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups â€” January, February and March â€” based on the value of the given `field_key`.
     * @summary Get deals timeline
     * @param {DealsApiGetDealsTimelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    getDealsTimeline(requestParameters: DealsApiGetDealsTimelineRequest): Promise<GetDealsTimelineResponse>;
    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * @summary Merge two deals
     * @param {DealsApiMergeDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    mergeDeals(requestParameters: DealsApiMergeDealsRequest): Promise<GetMergedDealResponse>;
    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {DealsApiSearchDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    searchDeals(requestParameters: DealsApiSearchDealsRequest): Promise<GetDealSearchResponse>;
    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * @summary Update a deal
     * @param {DealsApiUpdateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    updateDeal(requestParameters: DealsApiUpdateDealRequest): Promise<GetAddedDealResponse>;
    /**
     * Updates the details of the product that has been attached to a deal.
     * @summary Update the product attached to a deal
     * @param {DealsApiUpdateDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    updateDealProduct(requestParameters: DealsApiUpdateDealProductRequest): Promise<GetProductAttachmentDetailsResponse>;
}
