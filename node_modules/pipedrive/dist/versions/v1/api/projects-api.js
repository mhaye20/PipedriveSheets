"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = exports.ProjectsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
const ProjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
         * @summary Add a project
         * @param {AddProjectRequest} [AddProjectRequest]

         * @throws {RequiredError}
         */
        addProject: (AddProjectRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddProjectRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Archives a project.
         * @summary Archive a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        archiveProject: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('archiveProject', 'id', id);
            const localVarPath = `/projects/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a project as deleted.
         * @summary Delete a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        deleteProject: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteProject', 'id', id);
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
         * @summary Get details of a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProject: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProject', 'id', id);
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns activities linked to a specific project.
         * @summary Returns project activities
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectActivities: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectActivities', 'id', id);
            const localVarPath = `/projects/{id}/activities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all active groups under a specific project.
         * @summary Returns project groups
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectGroups: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectGroups', 'id', id);
            const localVarPath = `/projects/{id}/groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
         * @summary Returns project plan
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectPlan: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectPlan', 'id', id);
            const localVarPath = `/projects/{id}/plan`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns tasks linked to a specific project.
         * @summary Returns project tasks
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectTasks: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectTasks', 'id', id);
            const localVarPath = `/projects/{id}/tasks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all projects
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [status] If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
         * @param {number} [phase_id] If supplied, only projects in specified phase are returned
         * @param {boolean} [include_archived] If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.

         * @throws {RequiredError}
         */
        getProjects: (cursor, limit, filter_id, status, phase_id, include_archived) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (phase_id !== undefined) {
                localVarQueryParameter['phase_id'] = phase_id;
            }
            if (include_archived !== undefined) {
                localVarQueryParameter['include_archived'] = include_archived;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all projects boards that are not deleted.
         * @summary Get all project boards

         * @throws {RequiredError}
         */
        getProjectsBoards: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/projects/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all active project phases under a specific board.
         * @summary Get project phases
         * @param {number} board_id ID of the board for which phases are requested

         * @throws {RequiredError}
         */
        getProjectsPhases: (board_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'board_id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectsPhases', 'board_id', board_id);
            const localVarPath = `/projects/phases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            if (board_id !== undefined) {
                localVarQueryParameter['board_id'] = board_id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an activity phase or group in a project.
         * @summary Update activity in project plan
         * @param {number} id The ID of the project
         * @param {number} activityId The ID of the activity
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject]

         * @throws {RequiredError}
         */
        putProjectPlanActivity: (id, activityId, ProjectPutPlanItemBodyObject) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('putProjectPlanActivity', 'id', id);
            // verify required parameter 'activityId' is not null or undefined
            (0, common_1.assertParamExists)('putProjectPlanActivity', 'activityId', activityId);
            const localVarPath = `/projects/{id}/plan/activities/{activityId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ProjectPutPlanItemBodyObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a task phase or group in a project.
         * @summary Update task in project plan
         * @param {number} id The ID of the project
         * @param {number} taskId The ID of the task
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject]

         * @throws {RequiredError}
         */
        putProjectPlanTask: (id, taskId, ProjectPutPlanItemBodyObject) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('putProjectPlanTask', 'id', id);
            // verify required parameter 'taskId' is not null or undefined
            (0, common_1.assertParamExists)('putProjectPlanTask', 'taskId', taskId);
            const localVarPath = `/projects/{id}/plan/tasks/{taskId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ProjectPutPlanItemBodyObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a project.
         * @summary Update a project
         * @param {number} id The ID of the project
         * @param {UpdateProjectRequest} [UpdateProjectRequest]

         * @throws {RequiredError}
         */
        updateProject: (id, UpdateProjectRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateProject', 'id', id);
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateProjectRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProjectsApiAxiosParamCreator = ProjectsApiAxiosParamCreator;
/**
 * ProjectsApi - functional programming interface
 * @export
 */
const ProjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
         * @summary Add a project
         * @param {AddProjectRequest} [AddProjectRequest]

         * @throws {RequiredError}
         */
        addProject(AddProjectRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addProject(AddProjectRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Archives a project.
         * @summary Archive a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        archiveProject(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.archiveProject(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks a project as deleted.
         * @summary Delete a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        deleteProject(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProject(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
         * @summary Get details of a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProject(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProject(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns activities linked to a specific project.
         * @summary Returns project activities
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectActivities(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectActivities(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all active groups under a specific project.
         * @summary Returns project groups
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectGroups(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectGroups(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
         * @summary Returns project plan
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectPlan(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectPlan(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns tasks linked to a specific project.
         * @summary Returns project tasks
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectTasks(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectTasks(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all projects
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [status] If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
         * @param {number} [phase_id] If supplied, only projects in specified phase are returned
         * @param {boolean} [include_archived] If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.

         * @throws {RequiredError}
         */
        getProjects(cursor, limit, filter_id, status, phase_id, include_archived) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjects(cursor, limit, filter_id, status, phase_id, include_archived);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all projects boards that are not deleted.
         * @summary Get all project boards

         * @throws {RequiredError}
         */
        getProjectsBoards() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectsBoards();
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all active project phases under a specific board.
         * @summary Get project phases
         * @param {number} board_id ID of the board for which phases are requested

         * @throws {RequiredError}
         */
        getProjectsPhases(board_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectsPhases(board_id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates an activity phase or group in a project.
         * @summary Update activity in project plan
         * @param {number} id The ID of the project
         * @param {number} activityId The ID of the activity
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject]

         * @throws {RequiredError}
         */
        putProjectPlanActivity(id, activityId, ProjectPutPlanItemBodyObject) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.putProjectPlanActivity(id, activityId, ProjectPutPlanItemBodyObject);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a task phase or group in a project.
         * @summary Update task in project plan
         * @param {number} id The ID of the project
         * @param {number} taskId The ID of the task
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject]

         * @throws {RequiredError}
         */
        putProjectPlanTask(id, taskId, ProjectPutPlanItemBodyObject) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.putProjectPlanTask(id, taskId, ProjectPutPlanItemBodyObject);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a project.
         * @summary Update a project
         * @param {number} id The ID of the project
         * @param {UpdateProjectRequest} [UpdateProjectRequest]

         * @throws {RequiredError}
         */
        updateProject(id, UpdateProjectRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateProject(id, UpdateProjectRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProjectsApiFp = ProjectsApiFp;
/**
 * ProjectsApi - factory interface
 * @export
 */
const ProjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectsApiFp)(configuration);
    return {
        /**
         * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
         * @summary Add a project
         * @param {ProjectsApiAddProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProject(requestParameters = {}) {
            return localVarFp.addProject(requestParameters.AddProjectRequest).then((request) => request(axios, basePath));
        },
        /**
         * Archives a project.
         * @summary Archive a project
         * @param {ProjectsApiArchiveProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        archiveProject(requestParameters) {
            return localVarFp.archiveProject(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Marks a project as deleted.
         * @summary Delete a project
         * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProject(requestParameters) {
            return localVarFp.deleteProject(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
         * @summary Get details of a project
         * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProject(requestParameters) {
            return localVarFp.getProject(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns activities linked to a specific project.
         * @summary Returns project activities
         * @param {ProjectsApiGetProjectActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectActivities(requestParameters) {
            return localVarFp.getProjectActivities(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all active groups under a specific project.
         * @summary Returns project groups
         * @param {ProjectsApiGetProjectGroupsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectGroups(requestParameters) {
            return localVarFp.getProjectGroups(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
         * @summary Returns project plan
         * @param {ProjectsApiGetProjectPlanRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectPlan(requestParameters) {
            return localVarFp.getProjectPlan(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns tasks linked to a specific project.
         * @summary Returns project tasks
         * @param {ProjectsApiGetProjectTasksRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectTasks(requestParameters) {
            return localVarFp.getProjectTasks(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all projects
         * @param {ProjectsApiGetProjectsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjects(requestParameters = {}) {
            return localVarFp.getProjects(requestParameters.cursor, requestParameters.limit, requestParameters.filter_id, requestParameters.status, requestParameters.phase_id, requestParameters.include_archived).then((request) => request(axios, basePath));
        },
        /**
         * Returns all projects boards that are not deleted.
         * @summary Get all project boards

         * @throws {RequiredError}
         */
        getProjectsBoards() {
            return localVarFp.getProjectsBoards().then((request) => request(axios, basePath));
        },
        /**
         * Returns all active project phases under a specific board.
         * @summary Get project phases
         * @param {ProjectsApiGetProjectsPhasesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectsPhases(requestParameters) {
            return localVarFp.getProjectsPhases(requestParameters.board_id).then((request) => request(axios, basePath));
        },
        /**
         * Updates an activity phase or group in a project.
         * @summary Update activity in project plan
         * @param {ProjectsApiPutProjectPlanActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        putProjectPlanActivity(requestParameters) {
            return localVarFp.putProjectPlanActivity(requestParameters.id, requestParameters.activityId, requestParameters.ProjectPutPlanItemBodyObject).then((request) => request(axios, basePath));
        },
        /**
         * Updates a task phase or group in a project.
         * @summary Update task in project plan
         * @param {ProjectsApiPutProjectPlanTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        putProjectPlanTask(requestParameters) {
            return localVarFp.putProjectPlanTask(requestParameters.id, requestParameters.taskId, requestParameters.ProjectPutPlanItemBodyObject).then((request) => request(axios, basePath));
        },
        /**
         * Updates a project.
         * @summary Update a project
         * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateProject(requestParameters) {
            return localVarFp.updateProject(requestParameters.id, requestParameters.UpdateProjectRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectsApiFactory = ProjectsApiFactory;
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
class ProjectsApi extends base_1.BaseAPI {
    /**
     * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
     * @summary Add a project
     * @param {ProjectsApiAddProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    addProject(requestParameters = {}) {
        return (0, exports.ProjectsApiFp)(this.configuration).addProject(requestParameters.AddProjectRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Archives a project.
     * @summary Archive a project
     * @param {ProjectsApiArchiveProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    archiveProject(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).archiveProject(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a project as deleted.
     * @summary Delete a project
     * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).deleteProject(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
     * @summary Get details of a project
     * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProject(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns activities linked to a specific project.
     * @summary Returns project activities
     * @param {ProjectsApiGetProjectActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectActivities(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectActivities(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all active groups under a specific project.
     * @summary Returns project groups
     * @param {ProjectsApiGetProjectGroupsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectGroups(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectGroups(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
     * @summary Returns project plan
     * @param {ProjectsApiGetProjectPlanRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectPlan(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectPlan(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns tasks linked to a specific project.
     * @summary Returns project tasks
     * @param {ProjectsApiGetProjectTasksRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectTasks(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectTasks(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all projects
     * @param {ProjectsApiGetProjectsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjects(requestParameters = {}) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjects(requestParameters.cursor, requestParameters.limit, requestParameters.filter_id, requestParameters.status, requestParameters.phase_id, requestParameters.include_archived).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all projects boards that are not deleted.
     * @summary Get all project boards

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectsBoards() {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectsBoards().then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all active project phases under a specific board.
     * @summary Get project phases
     * @param {ProjectsApiGetProjectsPhasesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectsPhases(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectsPhases(requestParameters.board_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an activity phase or group in a project.
     * @summary Update activity in project plan
     * @param {ProjectsApiPutProjectPlanActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    putProjectPlanActivity(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).putProjectPlanActivity(requestParameters.id, requestParameters.activityId, requestParameters.ProjectPutPlanItemBodyObject).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a task phase or group in a project.
     * @summary Update task in project plan
     * @param {ProjectsApiPutProjectPlanTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    putProjectPlanTask(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).putProjectPlanTask(requestParameters.id, requestParameters.taskId, requestParameters.ProjectPutPlanItemBodyObject).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a project.
     * @summary Update a project
     * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    updateProject(requestParameters) {
        return (0, exports.ProjectsApiFp)(this.configuration).updateProject(requestParameters.id, requestParameters.UpdateProjectRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectsApi = ProjectsApi;
