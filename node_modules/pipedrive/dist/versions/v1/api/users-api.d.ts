/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddUserRequest } from '../models';
import { GetCurrentUserResponse } from '../models';
import { GetRoleAssignmentsResponse } from '../models';
import { GetRoleSettingsResponse } from '../models';
import { GetUserPermissionsResponse } from '../models';
import { GetUserResponse } from '../models';
import { GetUsersResponse } from '../models';
import { UpdateUserRequest } from '../models';
import { UserIds } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {AddUserRequest} [AddUserRequest]

     * @throws {RequiredError}
     */
    addUser: (AddUserRequest?: AddUserRequest) => Promise<RequestArgs>;
    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {string} term The search term to look for
     * @param {0 | 1} [search_by_email] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.

     * @throws {RequiredError}
     */
    findUsersByName: (term: string, search_by_email?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data

     * @throws {RequiredError}
     */
    getCurrentUser: () => Promise<RequestArgs>;
    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUser: (id: number) => Promise<RequestArgs>;
    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUserFollowers: (id: number) => Promise<RequestArgs>;
    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUserPermissions: (id: number) => Promise<RequestArgs>;
    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {number} id The ID of the user
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getUserRoleAssignments: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUserRoleSettings: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about all users within the company.
     * @summary Get all users

     * @throws {RequiredError}
     */
    getUsers: () => Promise<RequestArgs>;
    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {number} id The ID of the user
     * @param {UpdateUserRequest} [UpdateUserRequest]

     * @throws {RequiredError}
     */
    updateUser: (id: number, UpdateUserRequest?: UpdateUserRequest) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {AddUserRequest} [AddUserRequest]

     * @throws {RequiredError}
     */
    addUser(AddUserRequest?: AddUserRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserResponse>>;
    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {string} term The search term to look for
     * @param {0 | 1} [search_by_email] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.

     * @throws {RequiredError}
     */
    findUsersByName(term: string, search_by_email?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUsersResponse>>;
    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data

     * @throws {RequiredError}
     */
    getCurrentUser(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCurrentUserResponse>>;
    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUser(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserResponse>>;
    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUserFollowers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>>;
    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUserPermissions(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserPermissionsResponse>>;
    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {number} id The ID of the user
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getUserRoleAssignments(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleAssignmentsResponse>>;
    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {number} id The ID of the user

     * @throws {RequiredError}
     */
    getUserRoleSettings(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleSettingsResponse>>;
    /**
     * Returns data about all users within the company.
     * @summary Get all users

     * @throws {RequiredError}
     */
    getUsers(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUsersResponse>>;
    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {number} id The ID of the user
     * @param {UpdateUserRequest} [UpdateUserRequest]

     * @throws {RequiredError}
     */
    updateUser(id: number, UpdateUserRequest?: UpdateUserRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserResponse>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {UsersApiAddUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addUser(requestParameters?: UsersApiAddUserRequest): Promise<GetUserResponse>;
    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {UsersApiFindUsersByNameRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    findUsersByName(requestParameters: UsersApiFindUsersByNameRequest): Promise<GetUsersResponse>;
    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data

     * @throws {RequiredError}
     */
    getCurrentUser(): Promise<GetCurrentUserResponse>;
    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getUser(requestParameters: UsersApiGetUserRequest): Promise<GetUserResponse>;
    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {UsersApiGetUserFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getUserFollowers(requestParameters: UsersApiGetUserFollowersRequest): Promise<UserIds>;
    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {UsersApiGetUserPermissionsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getUserPermissions(requestParameters: UsersApiGetUserPermissionsRequest): Promise<GetUserPermissionsResponse>;
    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {UsersApiGetUserRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getUserRoleAssignments(requestParameters: UsersApiGetUserRoleAssignmentsRequest): Promise<GetRoleAssignmentsResponse>;
    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {UsersApiGetUserRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getUserRoleSettings(requestParameters: UsersApiGetUserRoleSettingsRequest): Promise<GetRoleSettingsResponse>;
    /**
     * Returns data about all users within the company.
     * @summary Get all users

     * @throws {RequiredError}
     */
    getUsers(): Promise<GetUsersResponse>;
    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateUser(requestParameters: UsersApiUpdateUserRequest): Promise<GetUserResponse>;
};
/**
 * Request parameters for addUser operation in UsersApi.
 * @export
 * @interface UsersApiAddUserRequest
 */
export interface UsersApiAddUserRequest {
    /**
     *
     * @type {AddUserRequest}
     * @memberof UsersApiAddUser
     */
    readonly AddUserRequest?: AddUserRequest;
}
/**
 * Request parameters for findUsersByName operation in UsersApi.
 * @export
 * @interface UsersApiFindUsersByNameRequest
 */
export interface UsersApiFindUsersByNameRequest {
    /**
     * The search term to look for
     * @type {string}
     * @memberof UsersApiFindUsersByName
     */
    readonly term: string;
    /**
     * When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.
     * @type {0 | 1}
     * @memberof UsersApiFindUsersByName
     */
    readonly search_by_email?: 0 | 1;
}
/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUser
     */
    readonly id: number;
}
/**
 * Request parameters for getUserFollowers operation in UsersApi.
 * @export
 * @interface UsersApiGetUserFollowersRequest
 */
export interface UsersApiGetUserFollowersRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserFollowers
     */
    readonly id: number;
}
/**
 * Request parameters for getUserPermissions operation in UsersApi.
 * @export
 * @interface UsersApiGetUserPermissionsRequest
 */
export interface UsersApiGetUserPermissionsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserPermissions
     */
    readonly id: number;
}
/**
 * Request parameters for getUserRoleAssignments operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRoleAssignmentsRequest
 */
export interface UsersApiGetUserRoleAssignmentsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserRoleAssignments
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof UsersApiGetUserRoleAssignments
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof UsersApiGetUserRoleAssignments
     */
    readonly limit?: number;
}
/**
 * Request parameters for getUserRoleSettings operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRoleSettingsRequest
 */
export interface UsersApiGetUserRoleSettingsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserRoleSettings
     */
    readonly id: number;
}
/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiUpdateUser
     */
    readonly id: number;
    /**
     *
     * @type {UpdateUserRequest}
     * @memberof UsersApiUpdateUser
     */
    readonly UpdateUserRequest?: UpdateUserRequest;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {UsersApiAddUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    addUser(requestParameters?: UsersApiAddUserRequest): Promise<GetUserResponse>;
    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {UsersApiFindUsersByNameRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersByName(requestParameters: UsersApiFindUsersByNameRequest): Promise<GetUsersResponse>;
    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUser(): Promise<GetCurrentUserResponse>;
    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(requestParameters: UsersApiGetUserRequest): Promise<GetUserResponse>;
    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {UsersApiGetUserFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserFollowers(requestParameters: UsersApiGetUserFollowersRequest): Promise<UserIds>;
    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {UsersApiGetUserPermissionsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserPermissions(requestParameters: UsersApiGetUserPermissionsRequest): Promise<GetUserPermissionsResponse>;
    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {UsersApiGetUserRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserRoleAssignments(requestParameters: UsersApiGetUserRoleAssignmentsRequest): Promise<GetRoleAssignmentsResponse>;
    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {UsersApiGetUserRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserRoleSettings(requestParameters: UsersApiGetUserRoleSettingsRequest): Promise<GetRoleSettingsResponse>;
    /**
     * Returns data about all users within the company.
     * @summary Get all users

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(): Promise<GetUsersResponse>;
    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(requestParameters: UsersApiUpdateUserRequest): Promise<GetUserResponse>;
}
