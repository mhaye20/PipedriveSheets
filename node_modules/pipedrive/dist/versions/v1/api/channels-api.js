"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelsApi = exports.ChannelsApiFactory = exports.ChannelsApiFp = exports.ChannelsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
const ChannelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Add a channel
         * @param {AddChannelRequest} [AddChannelRequest]

         * @throws {RequiredError}
         */
        addChannel: (AddChannelRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["messengers-integration"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddChannelRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes an existing messengerâ€™s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Delete a channel
         * @param {string} id The ID of the channel provided by the integration

         * @throws {RequiredError}
         */
        deleteChannel: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteChannel', 'id', id);
            const localVarPath = `/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["messengers-integration"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Delete a conversation
         * @param {string} channel_id The ID of the channel provided by the integration
         * @param {string} conversation_id The ID of the conversation provided by the integration

         * @throws {RequiredError}
         */
        deleteConversation: (channel_id, conversation_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'channel_id' is not null or undefined
            (0, common_1.assertParamExists)('deleteConversation', 'channel_id', channel_id);
            // verify required parameter 'conversation_id' is not null or undefined
            (0, common_1.assertParamExists)('deleteConversation', 'conversation_id', conversation_id);
            const localVarPath = `/channels/{channel-id}/conversations/{conversation-id}`
                .replace(`{${"channel-id"}}`, encodeURIComponent(String(channel_id)))
                .replace(`{${"conversation-id"}}`, encodeURIComponent(String(conversation_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["messengers-integration"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Receives an incoming message
         * @param {ReceiveMessageRequest} [ReceiveMessageRequest]

         * @throws {RequiredError}
         */
        receiveMessage: (ReceiveMessageRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/channels/messages/receive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["messengers-integration"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ReceiveMessageRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ChannelsApiAxiosParamCreator = ChannelsApiAxiosParamCreator;
/**
 * ChannelsApi - functional programming interface
 * @export
 */
const ChannelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChannelsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Add a channel
         * @param {AddChannelRequest} [AddChannelRequest]

         * @throws {RequiredError}
         */
        addChannel(AddChannelRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addChannel(AddChannelRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes an existing messengerâ€™s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Delete a channel
         * @param {string} id The ID of the channel provided by the integration

         * @throws {RequiredError}
         */
        deleteChannel(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteChannel(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Delete a conversation
         * @param {string} channel_id The ID of the channel provided by the integration
         * @param {string} conversation_id The ID of the conversation provided by the integration

         * @throws {RequiredError}
         */
        deleteConversation(channel_id, conversation_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConversation(channel_id, conversation_id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Receives an incoming message
         * @param {ReceiveMessageRequest} [ReceiveMessageRequest]

         * @throws {RequiredError}
         */
        receiveMessage(ReceiveMessageRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.receiveMessage(ReceiveMessageRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ChannelsApiFp = ChannelsApiFp;
/**
 * ChannelsApi - factory interface
 * @export
 */
const ChannelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChannelsApiFp)(configuration);
    return {
        /**
         * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Add a channel
         * @param {ChannelsApiAddChannelRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addChannel(requestParameters = {}) {
            return localVarFp.addChannel(requestParameters.AddChannelRequest).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing messengerâ€™s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Delete a channel
         * @param {ChannelsApiDeleteChannelRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteChannel(requestParameters) {
            return localVarFp.deleteChannel(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Delete a conversation
         * @param {ChannelsApiDeleteConversationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteConversation(requestParameters) {
            return localVarFp.deleteConversation(requestParameters.channel_id, requestParameters.conversation_id).then((request) => request(axios, basePath));
        },
        /**
         * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
         * @summary Receives an incoming message
         * @param {ChannelsApiReceiveMessageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        receiveMessage(requestParameters = {}) {
            return localVarFp.receiveMessage(requestParameters.ReceiveMessageRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelsApiFactory = ChannelsApiFactory;
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
class ChannelsApi extends base_1.BaseAPI {
    /**
     * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Add a channel
     * @param {ChannelsApiAddChannelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    addChannel(requestParameters = {}) {
        return (0, exports.ChannelsApiFp)(this.configuration).addChannel(requestParameters.AddChannelRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing messengerâ€™s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a channel
     * @param {ChannelsApiDeleteChannelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteChannel(requestParameters) {
        return (0, exports.ChannelsApiFp)(this.configuration).deleteChannel(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a conversation
     * @param {ChannelsApiDeleteConversationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteConversation(requestParameters) {
        return (0, exports.ChannelsApiFp)(this.configuration).deleteConversation(requestParameters.channel_id, requestParameters.conversation_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Receives an incoming message
     * @param {ChannelsApiReceiveMessageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    receiveMessage(requestParameters = {}) {
        return (0, exports.ChannelsApiFp)(this.configuration).receiveMessage(requestParameters.ReceiveMessageRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelsApi = ChannelsApi;
