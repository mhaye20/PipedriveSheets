/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddOrUpdateRoleSettingRequest } from '../models';
import { AddRoleAssignmentRequest } from '../models';
import { AddRoleAssignmentResponse } from '../models';
import { AddRoleRequest } from '../models';
import { AddRolesResponse } from '../models';
import { BaseRoleRequest } from '../models';
import { DeleteRoleAssignmentRequest } from '../models';
import { DeleteRoleAssignmentResponse } from '../models';
import { DeleteRoleResponse } from '../models';
import { GetRoleAssignmentsResponse } from '../models';
import { GetRolePipelinesResponse } from '../models';
import { GetRoleResponse } from '../models';
import { GetRoleSettingsResponse } from '../models';
import { GetRolesResponse } from '../models';
import { PutRolePipelinesBody } from '../models';
import { UpdateRoleResponse } from '../models';
import { UpsertRoleSettingsResponse } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export declare const RolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {number} id The ID of the role
     * @param {AddOrUpdateRoleSettingRequest} [AddOrUpdateRoleSettingRequest]

     * @throws {RequiredError}
     */
    addOrUpdateRoleSetting: (id: number, AddOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest) => Promise<RequestArgs>;
    /**
     * Adds a new role.
     * @summary Add a role
     * @param {AddRoleRequest} [AddRoleRequest]

     * @throws {RequiredError}
     */
    addRole: (AddRoleRequest?: AddRoleRequest) => Promise<RequestArgs>;
    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {number} id The ID of the role
     * @param {AddRoleAssignmentRequest} [AddRoleAssignmentRequest]

     * @throws {RequiredError}
     */
    addRoleAssignment: (id: number, AddRoleAssignmentRequest?: AddRoleAssignmentRequest) => Promise<RequestArgs>;
    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {number} id The ID of the role

     * @throws {RequiredError}
     */
    deleteRole: (id: number) => Promise<RequestArgs>;
    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {number} id The ID of the role
     * @param {DeleteRoleAssignmentRequest} [DeleteRoleAssignmentRequest]

     * @throws {RequiredError}
     */
    deleteRoleAssignment: (id: number, DeleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest) => Promise<RequestArgs>;
    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {number} id The ID of the role

     * @throws {RequiredError}
     */
    getRole: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {number} id The ID of the role
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getRoleAssignments: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary List pipeline visibility for a role
     * @param {number} id The ID of the role
     * @param {boolean} [visible] Whether to return the visible or hidden pipelines for the role

     * @throws {RequiredError}
     */
    getRolePipelines: (id: number, visible?: boolean) => Promise<RequestArgs>;
    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {number} id The ID of the role

     * @throws {RequiredError}
     */
    getRoleSettings: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getRoles: (start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {number} id The ID of the role
     * @param {BaseRoleRequest} [BaseRoleRequest]

     * @throws {RequiredError}
     */
    updateRole: (id: number, BaseRoleRequest?: BaseRoleRequest) => Promise<RequestArgs>;
    /**
     * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary Update pipeline visibility for a role
     * @param {number} id The ID of the role
     * @param {PutRolePipelinesBody} [PutRolePipelinesBody]

     * @throws {RequiredError}
     */
    updateRolePipelines: (id: number, PutRolePipelinesBody?: PutRolePipelinesBody) => Promise<RequestArgs>;
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export declare const RolesApiFp: (configuration?: Configuration) => {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {number} id The ID of the role
     * @param {AddOrUpdateRoleSettingRequest} [AddOrUpdateRoleSettingRequest]

     * @throws {RequiredError}
     */
    addOrUpdateRoleSetting(id: number, AddOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertRoleSettingsResponse>>;
    /**
     * Adds a new role.
     * @summary Add a role
     * @param {AddRoleRequest} [AddRoleRequest]

     * @throws {RequiredError}
     */
    addRole(AddRoleRequest?: AddRoleRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddRolesResponse>>;
    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {number} id The ID of the role
     * @param {AddRoleAssignmentRequest} [AddRoleAssignmentRequest]

     * @throws {RequiredError}
     */
    addRoleAssignment(id: number, AddRoleAssignmentRequest?: AddRoleAssignmentRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddRoleAssignmentResponse>>;
    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {number} id The ID of the role

     * @throws {RequiredError}
     */
    deleteRole(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteRoleResponse>>;
    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {number} id The ID of the role
     * @param {DeleteRoleAssignmentRequest} [DeleteRoleAssignmentRequest]

     * @throws {RequiredError}
     */
    deleteRoleAssignment(id: number, DeleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteRoleAssignmentResponse>>;
    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {number} id The ID of the role

     * @throws {RequiredError}
     */
    getRole(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleResponse>>;
    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {number} id The ID of the role
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getRoleAssignments(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleAssignmentsResponse>>;
    /**
     * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary List pipeline visibility for a role
     * @param {number} id The ID of the role
     * @param {boolean} [visible] Whether to return the visible or hidden pipelines for the role

     * @throws {RequiredError}
     */
    getRolePipelines(id: number, visible?: boolean): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRolePipelinesResponse>>;
    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {number} id The ID of the role

     * @throws {RequiredError}
     */
    getRoleSettings(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleSettingsResponse>>;
    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getRoles(start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRolesResponse>>;
    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {number} id The ID of the role
     * @param {BaseRoleRequest} [BaseRoleRequest]

     * @throws {RequiredError}
     */
    updateRole(id: number, BaseRoleRequest?: BaseRoleRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateRoleResponse>>;
    /**
     * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary Update pipeline visibility for a role
     * @param {number} id The ID of the role
     * @param {PutRolePipelinesBody} [PutRolePipelinesBody]

     * @throws {RequiredError}
     */
    updateRolePipelines(id: number, PutRolePipelinesBody?: PutRolePipelinesBody): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRolePipelinesResponse>>;
};
/**
 * RolesApi - factory interface
 * @export
 */
export declare const RolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {RolesApiAddOrUpdateRoleSettingRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addOrUpdateRoleSetting(requestParameters: RolesApiAddOrUpdateRoleSettingRequest): Promise<UpsertRoleSettingsResponse>;
    /**
     * Adds a new role.
     * @summary Add a role
     * @param {RolesApiAddRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addRole(requestParameters?: RolesApiAddRoleRequest): Promise<AddRolesResponse>;
    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {RolesApiAddRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addRoleAssignment(requestParameters: RolesApiAddRoleAssignmentRequest): Promise<AddRoleAssignmentResponse>;
    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteRole(requestParameters: RolesApiDeleteRoleRequest): Promise<DeleteRoleResponse>;
    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {RolesApiDeleteRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteRoleAssignment(requestParameters: RolesApiDeleteRoleAssignmentRequest): Promise<DeleteRoleAssignmentResponse>;
    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getRole(requestParameters: RolesApiGetRoleRequest): Promise<GetRoleResponse>;
    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {RolesApiGetRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getRoleAssignments(requestParameters: RolesApiGetRoleAssignmentsRequest): Promise<GetRoleAssignmentsResponse>;
    /**
     * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary List pipeline visibility for a role
     * @param {RolesApiGetRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getRolePipelines(requestParameters: RolesApiGetRolePipelinesRequest): Promise<GetRolePipelinesResponse>;
    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {RolesApiGetRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getRoleSettings(requestParameters: RolesApiGetRoleSettingsRequest): Promise<GetRoleSettingsResponse>;
    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {RolesApiGetRolesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getRoles(requestParameters?: RolesApiGetRolesRequest): Promise<GetRolesResponse>;
    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateRole(requestParameters: RolesApiUpdateRoleRequest): Promise<UpdateRoleResponse>;
    /**
     * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary Update pipeline visibility for a role
     * @param {RolesApiUpdateRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateRolePipelines(requestParameters: RolesApiUpdateRolePipelinesRequest): Promise<GetRolePipelinesResponse>;
};
/**
 * Request parameters for addOrUpdateRoleSetting operation in RolesApi.
 * @export
 * @interface RolesApiAddOrUpdateRoleSettingRequest
 */
export interface RolesApiAddOrUpdateRoleSettingRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiAddOrUpdateRoleSetting
     */
    readonly id: number;
    /**
     *
     * @type {AddOrUpdateRoleSettingRequest}
     * @memberof RolesApiAddOrUpdateRoleSetting
     */
    readonly AddOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest;
}
/**
 * Request parameters for addRole operation in RolesApi.
 * @export
 * @interface RolesApiAddRoleRequest
 */
export interface RolesApiAddRoleRequest {
    /**
     *
     * @type {AddRoleRequest}
     * @memberof RolesApiAddRole
     */
    readonly AddRoleRequest?: AddRoleRequest;
}
/**
 * Request parameters for addRoleAssignment operation in RolesApi.
 * @export
 * @interface RolesApiAddRoleAssignmentRequest
 */
export interface RolesApiAddRoleAssignmentRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiAddRoleAssignment
     */
    readonly id: number;
    /**
     *
     * @type {AddRoleAssignmentRequest}
     * @memberof RolesApiAddRoleAssignment
     */
    readonly AddRoleAssignmentRequest?: AddRoleAssignmentRequest;
}
/**
 * Request parameters for deleteRole operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleRequest
 */
export interface RolesApiDeleteRoleRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiDeleteRole
     */
    readonly id: number;
}
/**
 * Request parameters for deleteRoleAssignment operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleAssignmentRequest
 */
export interface RolesApiDeleteRoleAssignmentRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiDeleteRoleAssignment
     */
    readonly id: number;
    /**
     *
     * @type {DeleteRoleAssignmentRequest}
     * @memberof RolesApiDeleteRoleAssignment
     */
    readonly DeleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest;
}
/**
 * Request parameters for getRole operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleRequest
 */
export interface RolesApiGetRoleRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRole
     */
    readonly id: number;
}
/**
 * Request parameters for getRoleAssignments operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleAssignmentsRequest
 */
export interface RolesApiGetRoleAssignmentsRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRoleAssignments
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof RolesApiGetRoleAssignments
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof RolesApiGetRoleAssignments
     */
    readonly limit?: number;
}
/**
 * Request parameters for getRolePipelines operation in RolesApi.
 * @export
 * @interface RolesApiGetRolePipelinesRequest
 */
export interface RolesApiGetRolePipelinesRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRolePipelines
     */
    readonly id: number;
    /**
     * Whether to return the visible or hidden pipelines for the role
     * @type {boolean}
     * @memberof RolesApiGetRolePipelines
     */
    readonly visible?: boolean;
}
/**
 * Request parameters for getRoleSettings operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleSettingsRequest
 */
export interface RolesApiGetRoleSettingsRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRoleSettings
     */
    readonly id: number;
}
/**
 * Request parameters for getRoles operation in RolesApi.
 * @export
 * @interface RolesApiGetRolesRequest
 */
export interface RolesApiGetRolesRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof RolesApiGetRoles
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof RolesApiGetRoles
     */
    readonly limit?: number;
}
/**
 * Request parameters for updateRole operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRoleRequest
 */
export interface RolesApiUpdateRoleRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiUpdateRole
     */
    readonly id: number;
    /**
     *
     * @type {BaseRoleRequest}
     * @memberof RolesApiUpdateRole
     */
    readonly BaseRoleRequest?: BaseRoleRequest;
}
/**
 * Request parameters for updateRolePipelines operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRolePipelinesRequest
 */
export interface RolesApiUpdateRolePipelinesRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiUpdateRolePipelines
     */
    readonly id: number;
    /**
     *
     * @type {PutRolePipelinesBody}
     * @memberof RolesApiUpdateRolePipelines
     */
    readonly PutRolePipelinesBody?: PutRolePipelinesBody;
}
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export declare class RolesApi extends BaseAPI {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {RolesApiAddOrUpdateRoleSettingRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addOrUpdateRoleSetting(requestParameters: RolesApiAddOrUpdateRoleSettingRequest): Promise<UpsertRoleSettingsResponse>;
    /**
     * Adds a new role.
     * @summary Add a role
     * @param {RolesApiAddRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addRole(requestParameters?: RolesApiAddRoleRequest): Promise<AddRolesResponse>;
    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {RolesApiAddRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addRoleAssignment(requestParameters: RolesApiAddRoleAssignmentRequest): Promise<AddRoleAssignmentResponse>;
    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRole(requestParameters: RolesApiDeleteRoleRequest): Promise<DeleteRoleResponse>;
    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {RolesApiDeleteRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRoleAssignment(requestParameters: RolesApiDeleteRoleAssignmentRequest): Promise<DeleteRoleAssignmentResponse>;
    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRole(requestParameters: RolesApiGetRoleRequest): Promise<GetRoleResponse>;
    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {RolesApiGetRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoleAssignments(requestParameters: RolesApiGetRoleAssignmentsRequest): Promise<GetRoleAssignmentsResponse>;
    /**
     * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary List pipeline visibility for a role
     * @param {RolesApiGetRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRolePipelines(requestParameters: RolesApiGetRolePipelinesRequest): Promise<GetRolePipelinesResponse>;
    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {RolesApiGetRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoleSettings(requestParameters: RolesApiGetRoleSettingsRequest): Promise<GetRoleSettingsResponse>;
    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {RolesApiGetRolesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoles(requestParameters?: RolesApiGetRolesRequest): Promise<GetRolesResponse>;
    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    updateRole(requestParameters: RolesApiUpdateRoleRequest): Promise<UpdateRoleResponse>;
    /**
     * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary Update pipeline visibility for a role
     * @param {RolesApiUpdateRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    updateRolePipelines(requestParameters: RolesApiUpdateRolePipelinesRequest): Promise<GetRolePipelinesResponse>;
}
