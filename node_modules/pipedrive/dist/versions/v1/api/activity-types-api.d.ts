/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddActivityTypeRequest } from '../models';
import { DeleteActivityTypesResponse } from '../models';
import { GetActivityTypesResponse } from '../models';
import { UpdateActivityTypeRequest } from '../models';
import { UpsertActivityTypeResponse } from '../models';
/**
 * ActivityTypesApi - axios parameter creator
 * @export
 */
export declare const ActivityTypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new activity type.
     * @summary Add new activity type
     * @param {AddActivityTypeRequest} [AddActivityTypeRequest]

     * @throws {RequiredError}
     */
    addActivityType: (AddActivityTypeRequest?: AddActivityTypeRequest) => Promise<RequestArgs>;
    /**
     * Marks an activity type as deleted.
     * @summary Delete an activity type
     * @param {number} id The ID of the activity type

     * @throws {RequiredError}
     */
    deleteActivityType: (id: number) => Promise<RequestArgs>;
    /**
     * Marks multiple activity types as deleted.
     * @summary Delete multiple activity types in bulk
     * @param {string} ids The comma-separated activity type IDs

     * @throws {RequiredError}
     */
    deleteActivityTypes: (ids: string) => Promise<RequestArgs>;
    /**
     * Returns all activity types.
     * @summary Get all activity types

     * @throws {RequiredError}
     */
    getActivityTypes: () => Promise<RequestArgs>;
    /**
     * Updates an activity type.
     * @summary Update an activity type
     * @param {number} id The ID of the activity type
     * @param {UpdateActivityTypeRequest} [UpdateActivityTypeRequest]

     * @throws {RequiredError}
     */
    updateActivityType: (id: number, UpdateActivityTypeRequest?: UpdateActivityTypeRequest) => Promise<RequestArgs>;
};
/**
 * ActivityTypesApi - functional programming interface
 * @export
 */
export declare const ActivityTypesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new activity type.
     * @summary Add new activity type
     * @param {AddActivityTypeRequest} [AddActivityTypeRequest]

     * @throws {RequiredError}
     */
    addActivityType(AddActivityTypeRequest?: AddActivityTypeRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityTypeResponse>>;
    /**
     * Marks an activity type as deleted.
     * @summary Delete an activity type
     * @param {number} id The ID of the activity type

     * @throws {RequiredError}
     */
    deleteActivityType(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityTypeResponse>>;
    /**
     * Marks multiple activity types as deleted.
     * @summary Delete multiple activity types in bulk
     * @param {string} ids The comma-separated activity type IDs

     * @throws {RequiredError}
     */
    deleteActivityTypes(ids: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteActivityTypesResponse>>;
    /**
     * Returns all activity types.
     * @summary Get all activity types

     * @throws {RequiredError}
     */
    getActivityTypes(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivityTypesResponse>>;
    /**
     * Updates an activity type.
     * @summary Update an activity type
     * @param {number} id The ID of the activity type
     * @param {UpdateActivityTypeRequest} [UpdateActivityTypeRequest]

     * @throws {RequiredError}
     */
    updateActivityType(id: number, UpdateActivityTypeRequest?: UpdateActivityTypeRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityTypeResponse>>;
};
/**
 * ActivityTypesApi - factory interface
 * @export
 */
export declare const ActivityTypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new activity type.
     * @summary Add new activity type
     * @param {ActivityTypesApiAddActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addActivityType(requestParameters?: ActivityTypesApiAddActivityTypeRequest): Promise<UpsertActivityTypeResponse>;
    /**
     * Marks an activity type as deleted.
     * @summary Delete an activity type
     * @param {ActivityTypesApiDeleteActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteActivityType(requestParameters: ActivityTypesApiDeleteActivityTypeRequest): Promise<UpsertActivityTypeResponse>;
    /**
     * Marks multiple activity types as deleted.
     * @summary Delete multiple activity types in bulk
     * @param {ActivityTypesApiDeleteActivityTypesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteActivityTypes(requestParameters: ActivityTypesApiDeleteActivityTypesRequest): Promise<DeleteActivityTypesResponse>;
    /**
     * Returns all activity types.
     * @summary Get all activity types

     * @throws {RequiredError}
     */
    getActivityTypes(): Promise<GetActivityTypesResponse>;
    /**
     * Updates an activity type.
     * @summary Update an activity type
     * @param {ActivityTypesApiUpdateActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateActivityType(requestParameters: ActivityTypesApiUpdateActivityTypeRequest): Promise<UpsertActivityTypeResponse>;
};
/**
 * Request parameters for addActivityType operation in ActivityTypesApi.
 * @export
 * @interface ActivityTypesApiAddActivityTypeRequest
 */
export interface ActivityTypesApiAddActivityTypeRequest {
    /**
     *
     * @type {AddActivityTypeRequest}
     * @memberof ActivityTypesApiAddActivityType
     */
    readonly AddActivityTypeRequest?: AddActivityTypeRequest;
}
/**
 * Request parameters for deleteActivityType operation in ActivityTypesApi.
 * @export
 * @interface ActivityTypesApiDeleteActivityTypeRequest
 */
export interface ActivityTypesApiDeleteActivityTypeRequest {
    /**
     * The ID of the activity type
     * @type {number}
     * @memberof ActivityTypesApiDeleteActivityType
     */
    readonly id: number;
}
/**
 * Request parameters for deleteActivityTypes operation in ActivityTypesApi.
 * @export
 * @interface ActivityTypesApiDeleteActivityTypesRequest
 */
export interface ActivityTypesApiDeleteActivityTypesRequest {
    /**
     * The comma-separated activity type IDs
     * @type {string}
     * @memberof ActivityTypesApiDeleteActivityTypes
     */
    readonly ids: string;
}
/**
 * Request parameters for updateActivityType operation in ActivityTypesApi.
 * @export
 * @interface ActivityTypesApiUpdateActivityTypeRequest
 */
export interface ActivityTypesApiUpdateActivityTypeRequest {
    /**
     * The ID of the activity type
     * @type {number}
     * @memberof ActivityTypesApiUpdateActivityType
     */
    readonly id: number;
    /**
     *
     * @type {UpdateActivityTypeRequest}
     * @memberof ActivityTypesApiUpdateActivityType
     */
    readonly UpdateActivityTypeRequest?: UpdateActivityTypeRequest;
}
/**
 * ActivityTypesApi - object-oriented interface
 * @export
 * @class ActivityTypesApi
 * @extends {BaseAPI}
 */
export declare class ActivityTypesApi extends BaseAPI {
    /**
     * Adds a new activity type.
     * @summary Add new activity type
     * @param {ActivityTypesApiAddActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    addActivityType(requestParameters?: ActivityTypesApiAddActivityTypeRequest): Promise<UpsertActivityTypeResponse>;
    /**
     * Marks an activity type as deleted.
     * @summary Delete an activity type
     * @param {ActivityTypesApiDeleteActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    deleteActivityType(requestParameters: ActivityTypesApiDeleteActivityTypeRequest): Promise<UpsertActivityTypeResponse>;
    /**
     * Marks multiple activity types as deleted.
     * @summary Delete multiple activity types in bulk
     * @param {ActivityTypesApiDeleteActivityTypesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    deleteActivityTypes(requestParameters: ActivityTypesApiDeleteActivityTypesRequest): Promise<DeleteActivityTypesResponse>;
    /**
     * Returns all activity types.
     * @summary Get all activity types

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    getActivityTypes(): Promise<GetActivityTypesResponse>;
    /**
     * Updates an activity type.
     * @summary Update an activity type
     * @param {ActivityTypesApiUpdateActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    updateActivityType(requestParameters: ActivityTypesApiUpdateActivityTypeRequest): Promise<UpsertActivityTypeResponse>;
}
