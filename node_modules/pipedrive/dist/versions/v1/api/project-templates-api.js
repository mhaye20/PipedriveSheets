"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectTemplatesApi = exports.ProjectTemplatesApiFactory = exports.ProjectTemplatesApiFp = exports.ProjectTemplatesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectTemplatesApi - axios parameter creator
 * @export
 */
const ProjectTemplatesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the details of a specific project template.
         * @summary Get details of a template
         * @param {number} id The ID of the project template

         * @throws {RequiredError}
         */
        getProjectTemplate: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectTemplate', 'id', id);
            const localVarPath = `/projectTemplates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all not deleted project templates. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all project templates
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.

         * @throws {RequiredError}
         */
        getProjectTemplates: (cursor, limit) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/projectTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific project board.
         * @summary Get details of a board
         * @param {number} id The ID of the project board

         * @throws {RequiredError}
         */
        getProjectsBoard: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectsBoard', 'id', id);
            const localVarPath = `/projects/boards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific project phase.
         * @summary Get details of a phase
         * @param {number} id The ID of the project phase

         * @throws {RequiredError}
         */
        getProjectsPhase: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getProjectsPhase', 'id', id);
            const localVarPath = `/projects/phases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["projects:read"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProjectTemplatesApiAxiosParamCreator = ProjectTemplatesApiAxiosParamCreator;
/**
 * ProjectTemplatesApi - functional programming interface
 * @export
 */
const ProjectTemplatesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectTemplatesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns the details of a specific project template.
         * @summary Get details of a template
         * @param {number} id The ID of the project template

         * @throws {RequiredError}
         */
        getProjectTemplate(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectTemplate(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all not deleted project templates. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all project templates
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.

         * @throws {RequiredError}
         */
        getProjectTemplates(cursor, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectTemplates(cursor, limit);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific project board.
         * @summary Get details of a board
         * @param {number} id The ID of the project board

         * @throws {RequiredError}
         */
        getProjectsBoard(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectsBoard(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific project phase.
         * @summary Get details of a phase
         * @param {number} id The ID of the project phase

         * @throws {RequiredError}
         */
        getProjectsPhase(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectsPhase(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProjectTemplatesApiFp = ProjectTemplatesApiFp;
/**
 * ProjectTemplatesApi - factory interface
 * @export
 */
const ProjectTemplatesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectTemplatesApiFp)(configuration);
    return {
        /**
         * Returns the details of a specific project template.
         * @summary Get details of a template
         * @param {ProjectTemplatesApiGetProjectTemplateRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectTemplate(requestParameters) {
            return localVarFp.getProjectTemplate(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all not deleted project templates. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all project templates
         * @param {ProjectTemplatesApiGetProjectTemplatesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectTemplates(requestParameters = {}) {
            return localVarFp.getProjectTemplates(requestParameters.cursor, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific project board.
         * @summary Get details of a board
         * @param {ProjectTemplatesApiGetProjectsBoardRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectsBoard(requestParameters) {
            return localVarFp.getProjectsBoard(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific project phase.
         * @summary Get details of a phase
         * @param {ProjectTemplatesApiGetProjectsPhaseRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectsPhase(requestParameters) {
            return localVarFp.getProjectsPhase(requestParameters.id).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectTemplatesApiFactory = ProjectTemplatesApiFactory;
/**
 * ProjectTemplatesApi - object-oriented interface
 * @export
 * @class ProjectTemplatesApi
 * @extends {BaseAPI}
 */
class ProjectTemplatesApi extends base_1.BaseAPI {
    /**
     * Returns the details of a specific project template.
     * @summary Get details of a template
     * @param {ProjectTemplatesApiGetProjectTemplateRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectTemplatesApi
     */
    getProjectTemplate(requestParameters) {
        return (0, exports.ProjectTemplatesApiFp)(this.configuration).getProjectTemplate(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all not deleted project templates. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all project templates
     * @param {ProjectTemplatesApiGetProjectTemplatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectTemplatesApi
     */
    getProjectTemplates(requestParameters = {}) {
        return (0, exports.ProjectTemplatesApiFp)(this.configuration).getProjectTemplates(requestParameters.cursor, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific project board.
     * @summary Get details of a board
     * @param {ProjectTemplatesApiGetProjectsBoardRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectTemplatesApi
     */
    getProjectsBoard(requestParameters) {
        return (0, exports.ProjectTemplatesApiFp)(this.configuration).getProjectsBoard(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific project phase.
     * @summary Get details of a phase
     * @param {ProjectTemplatesApiGetProjectsPhaseRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectTemplatesApi
     */
    getProjectsPhase(requestParameters) {
        return (0, exports.ProjectTemplatesApiFp)(this.configuration).getProjectsPhase(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectTemplatesApi = ProjectTemplatesApi;
