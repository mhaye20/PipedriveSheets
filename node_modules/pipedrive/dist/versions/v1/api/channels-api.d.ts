/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddChannelRequest } from '../models';
import { AddChannelResponse } from '../models';
import { DeleteChannel200Response } from '../models';
import { GetReceiveMessageSuccessResponse } from '../models';
import { ReceiveMessageRequest } from '../models';
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export declare const ChannelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Add a channel
     * @param {AddChannelRequest} [AddChannelRequest]

     * @throws {RequiredError}
     */
    addChannel: (AddChannelRequest?: AddChannelRequest) => Promise<RequestArgs>;
    /**
     * Deletes an existing messenger’s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a channel
     * @param {string} id The ID of the channel provided by the integration

     * @throws {RequiredError}
     */
    deleteChannel: (id: string) => Promise<RequestArgs>;
    /**
     * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a conversation
     * @param {string} channel_id The ID of the channel provided by the integration
     * @param {string} conversation_id The ID of the conversation provided by the integration

     * @throws {RequiredError}
     */
    deleteConversation: (channel_id: string, conversation_id: string) => Promise<RequestArgs>;
    /**
     * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Receives an incoming message
     * @param {ReceiveMessageRequest} [ReceiveMessageRequest]

     * @throws {RequiredError}
     */
    receiveMessage: (ReceiveMessageRequest?: ReceiveMessageRequest) => Promise<RequestArgs>;
};
/**
 * ChannelsApi - functional programming interface
 * @export
 */
export declare const ChannelsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Add a channel
     * @param {AddChannelRequest} [AddChannelRequest]

     * @throws {RequiredError}
     */
    addChannel(AddChannelRequest?: AddChannelRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddChannelResponse>>;
    /**
     * Deletes an existing messenger’s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a channel
     * @param {string} id The ID of the channel provided by the integration

     * @throws {RequiredError}
     */
    deleteChannel(id: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteChannel200Response>>;
    /**
     * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a conversation
     * @param {string} channel_id The ID of the channel provided by the integration
     * @param {string} conversation_id The ID of the conversation provided by the integration

     * @throws {RequiredError}
     */
    deleteConversation(channel_id: string, conversation_id: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteChannel200Response>>;
    /**
     * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Receives an incoming message
     * @param {ReceiveMessageRequest} [ReceiveMessageRequest]

     * @throws {RequiredError}
     */
    receiveMessage(ReceiveMessageRequest?: ReceiveMessageRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetReceiveMessageSuccessResponse>>;
};
/**
 * ChannelsApi - factory interface
 * @export
 */
export declare const ChannelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Add a channel
     * @param {ChannelsApiAddChannelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addChannel(requestParameters?: ChannelsApiAddChannelRequest): Promise<AddChannelResponse>;
    /**
     * Deletes an existing messenger’s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a channel
     * @param {ChannelsApiDeleteChannelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteChannel(requestParameters: ChannelsApiDeleteChannelRequest): Promise<DeleteChannel200Response>;
    /**
     * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a conversation
     * @param {ChannelsApiDeleteConversationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteConversation(requestParameters: ChannelsApiDeleteConversationRequest): Promise<DeleteChannel200Response>;
    /**
     * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Receives an incoming message
     * @param {ChannelsApiReceiveMessageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    receiveMessage(requestParameters?: ChannelsApiReceiveMessageRequest): Promise<GetReceiveMessageSuccessResponse>;
};
/**
 * Request parameters for addChannel operation in ChannelsApi.
 * @export
 * @interface ChannelsApiAddChannelRequest
 */
export interface ChannelsApiAddChannelRequest {
    /**
     *
     * @type {AddChannelRequest}
     * @memberof ChannelsApiAddChannel
     */
    readonly AddChannelRequest?: AddChannelRequest;
}
/**
 * Request parameters for deleteChannel operation in ChannelsApi.
 * @export
 * @interface ChannelsApiDeleteChannelRequest
 */
export interface ChannelsApiDeleteChannelRequest {
    /**
     * The ID of the channel provided by the integration
     * @type {string}
     * @memberof ChannelsApiDeleteChannel
     */
    readonly id: string;
}
/**
 * Request parameters for deleteConversation operation in ChannelsApi.
 * @export
 * @interface ChannelsApiDeleteConversationRequest
 */
export interface ChannelsApiDeleteConversationRequest {
    /**
     * The ID of the channel provided by the integration
     * @type {string}
     * @memberof ChannelsApiDeleteConversation
     */
    readonly channel_id: string;
    /**
     * The ID of the conversation provided by the integration
     * @type {string}
     * @memberof ChannelsApiDeleteConversation
     */
    readonly conversation_id: string;
}
/**
 * Request parameters for receiveMessage operation in ChannelsApi.
 * @export
 * @interface ChannelsApiReceiveMessageRequest
 */
export interface ChannelsApiReceiveMessageRequest {
    /**
     *
     * @type {ReceiveMessageRequest}
     * @memberof ChannelsApiReceiveMessage
     */
    readonly ReceiveMessageRequest?: ReceiveMessageRequest;
}
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export declare class ChannelsApi extends BaseAPI {
    /**
     * Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Add a channel
     * @param {ChannelsApiAddChannelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    addChannel(requestParameters?: ChannelsApiAddChannelRequest): Promise<AddChannelResponse>;
    /**
     * Deletes an existing messenger’s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a channel
     * @param {ChannelsApiDeleteChannelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteChannel(requestParameters: ChannelsApiDeleteChannelRequest): Promise<DeleteChannel200Response>;
    /**
     * Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Delete a conversation
     * @param {ChannelsApiDeleteConversationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteConversation(requestParameters: ChannelsApiDeleteConversationRequest): Promise<DeleteChannel200Response>;
    /**
     * Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
     * @summary Receives an incoming message
     * @param {ChannelsApiReceiveMessageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    receiveMessage(requestParameters?: ChannelsApiReceiveMessageRequest): Promise<GetReceiveMessageSuccessResponse>;
}
