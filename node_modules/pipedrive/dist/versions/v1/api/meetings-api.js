"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeetingsApi = exports.MeetingsApiFactory = exports.MeetingsApiFp = exports.MeetingsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * MeetingsApi - axios parameter creator
 * @export
 */
const MeetingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
         * @summary Delete the link between a user and the installed video call integration
         * @param {string} id Unique identifier linking a user to the installed integration

         * @throws {RequiredError}
         */
        deleteUserProviderLink: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteUserProviderLink', 'id', id);
            const localVarPath = `/meetings/userProviderLinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["video-calls"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * A video calling provider must call this endpoint after a user has installed the video calling app so that the new user\'s information is sent.
         * @summary Link a user with the installed video call integration
         * @param {AddUserProviderLinkRequest} [AddUserProviderLinkRequest]

         * @throws {RequiredError}
         */
        saveUserProviderLink: (AddUserProviderLinkRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/meetings/userProviderLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["video-calls"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddUserProviderLinkRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MeetingsApiAxiosParamCreator = MeetingsApiAxiosParamCreator;
/**
 * MeetingsApi - functional programming interface
 * @export
 */
const MeetingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MeetingsApiAxiosParamCreator)(configuration);
    return {
        /**
         * A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
         * @summary Delete the link between a user and the installed video call integration
         * @param {string} id Unique identifier linking a user to the installed integration

         * @throws {RequiredError}
         */
        deleteUserProviderLink(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteUserProviderLink(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * A video calling provider must call this endpoint after a user has installed the video calling app so that the new user\'s information is sent.
         * @summary Link a user with the installed video call integration
         * @param {AddUserProviderLinkRequest} [AddUserProviderLinkRequest]

         * @throws {RequiredError}
         */
        saveUserProviderLink(AddUserProviderLinkRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.saveUserProviderLink(AddUserProviderLinkRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MeetingsApiFp = MeetingsApiFp;
/**
 * MeetingsApi - factory interface
 * @export
 */
const MeetingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MeetingsApiFp)(configuration);
    return {
        /**
         * A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
         * @summary Delete the link between a user and the installed video call integration
         * @param {MeetingsApiDeleteUserProviderLinkRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteUserProviderLink(requestParameters) {
            return localVarFp.deleteUserProviderLink(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * A video calling provider must call this endpoint after a user has installed the video calling app so that the new user\'s information is sent.
         * @summary Link a user with the installed video call integration
         * @param {MeetingsApiSaveUserProviderLinkRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        saveUserProviderLink(requestParameters = {}) {
            return localVarFp.saveUserProviderLink(requestParameters.AddUserProviderLinkRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.MeetingsApiFactory = MeetingsApiFactory;
/**
 * MeetingsApi - object-oriented interface
 * @export
 * @class MeetingsApi
 * @extends {BaseAPI}
 */
class MeetingsApi extends base_1.BaseAPI {
    /**
     * A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
     * @summary Delete the link between a user and the installed video call integration
     * @param {MeetingsApiDeleteUserProviderLinkRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MeetingsApi
     */
    deleteUserProviderLink(requestParameters) {
        return (0, exports.MeetingsApiFp)(this.configuration).deleteUserProviderLink(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A video calling provider must call this endpoint after a user has installed the video calling app so that the new user\'s information is sent.
     * @summary Link a user with the installed video call integration
     * @param {MeetingsApiSaveUserProviderLinkRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof MeetingsApi
     */
    saveUserProviderLink(requestParameters = {}) {
        return (0, exports.MeetingsApiFp)(this.configuration).saveUserProviderLink(requestParameters.AddUserProviderLinkRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.MeetingsApi = MeetingsApi;
