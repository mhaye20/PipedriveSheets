"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRelationshipsApi = exports.OrganizationRelationshipsApiFactory = exports.OrganizationRelationshipsApiFp = exports.OrganizationRelationshipsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * OrganizationRelationshipsApi - axios parameter creator
 * @export
 */
const OrganizationRelationshipsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates and returns an organization relationship.
         * @summary Create an organization relationship
         * @param {AddOrganizationRelationshipRequest} [AddOrganizationRelationshipRequest]

         * @throws {RequiredError}
         */
        addOrganizationRelationship: (AddOrganizationRelationshipRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/organizationRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddOrganizationRelationshipRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes an organization relationship and returns the deleted ID.
         * @summary Delete an organization relationship
         * @param {number} id The ID of the organization relationship

         * @throws {RequiredError}
         */
        deleteOrganizationRelationship: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteOrganizationRelationship', 'id', id);
            const localVarPath = `/organizationRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Finds and returns an organization relationship from its ID.
         * @summary Get one organization relationship
         * @param {number} id The ID of the organization relationship
         * @param {number} [org_id] The ID of the base organization for the returned calculated values

         * @throws {RequiredError}
         */
        getOrganizationRelationship: (id, org_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getOrganizationRelationship', 'id', id);
            const localVarPath = `/organizationRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets all of the relationships for a supplied organization ID.
         * @summary Get all relationships for organization
         * @param {number} org_id The ID of the organization to get relationships for

         * @throws {RequiredError}
         */
        getOrganizationRelationships: (org_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'org_id' is not null or undefined
            (0, common_1.assertParamExists)('getOrganizationRelationships', 'org_id', org_id);
            const localVarPath = `/organizationRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates and returns an organization relationship.
         * @summary Update an organization relationship
         * @param {number} id The ID of the organization relationship
         * @param {OrganizationRelationship} [OrganizationRelationship]

         * @throws {RequiredError}
         */
        updateOrganizationRelationship: (id, OrganizationRelationship) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateOrganizationRelationship', 'id', id);
            const localVarPath = `/organizationRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(OrganizationRelationship, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.OrganizationRelationshipsApiAxiosParamCreator = OrganizationRelationshipsApiAxiosParamCreator;
/**
 * OrganizationRelationshipsApi - functional programming interface
 * @export
 */
const OrganizationRelationshipsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OrganizationRelationshipsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates and returns an organization relationship.
         * @summary Create an organization relationship
         * @param {AddOrganizationRelationshipRequest} [AddOrganizationRelationshipRequest]

         * @throws {RequiredError}
         */
        addOrganizationRelationship(AddOrganizationRelationshipRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addOrganizationRelationship(AddOrganizationRelationshipRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes an organization relationship and returns the deleted ID.
         * @summary Delete an organization relationship
         * @param {number} id The ID of the organization relationship

         * @throws {RequiredError}
         */
        deleteOrganizationRelationship(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrganizationRelationship(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Finds and returns an organization relationship from its ID.
         * @summary Get one organization relationship
         * @param {number} id The ID of the organization relationship
         * @param {number} [org_id] The ID of the base organization for the returned calculated values

         * @throws {RequiredError}
         */
        getOrganizationRelationship(id, org_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationRelationship(id, org_id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets all of the relationships for a supplied organization ID.
         * @summary Get all relationships for organization
         * @param {number} org_id The ID of the organization to get relationships for

         * @throws {RequiredError}
         */
        getOrganizationRelationships(org_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationRelationships(org_id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates and returns an organization relationship.
         * @summary Update an organization relationship
         * @param {number} id The ID of the organization relationship
         * @param {OrganizationRelationship} [OrganizationRelationship]

         * @throws {RequiredError}
         */
        updateOrganizationRelationship(id, OrganizationRelationship) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOrganizationRelationship(id, OrganizationRelationship);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.OrganizationRelationshipsApiFp = OrganizationRelationshipsApiFp;
/**
 * OrganizationRelationshipsApi - factory interface
 * @export
 */
const OrganizationRelationshipsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OrganizationRelationshipsApiFp)(configuration);
    return {
        /**
         * Creates and returns an organization relationship.
         * @summary Create an organization relationship
         * @param {OrganizationRelationshipsApiAddOrganizationRelationshipRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganizationRelationship(requestParameters = {}) {
            return localVarFp.addOrganizationRelationship(requestParameters.AddOrganizationRelationshipRequest).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an organization relationship and returns the deleted ID.
         * @summary Delete an organization relationship
         * @param {OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizationRelationship(requestParameters) {
            return localVarFp.deleteOrganizationRelationship(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Finds and returns an organization relationship from its ID.
         * @summary Get one organization relationship
         * @param {OrganizationRelationshipsApiGetOrganizationRelationshipRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationRelationship(requestParameters) {
            return localVarFp.getOrganizationRelationship(requestParameters.id, requestParameters.org_id).then((request) => request(axios, basePath));
        },
        /**
         * Gets all of the relationships for a supplied organization ID.
         * @summary Get all relationships for organization
         * @param {OrganizationRelationshipsApiGetOrganizationRelationshipsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationRelationships(requestParameters) {
            return localVarFp.getOrganizationRelationships(requestParameters.org_id).then((request) => request(axios, basePath));
        },
        /**
         * Updates and returns an organization relationship.
         * @summary Update an organization relationship
         * @param {OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateOrganizationRelationship(requestParameters) {
            return localVarFp.updateOrganizationRelationship(requestParameters.id, requestParameters.OrganizationRelationship).then((request) => request(axios, basePath));
        },
    };
};
exports.OrganizationRelationshipsApiFactory = OrganizationRelationshipsApiFactory;
/**
 * OrganizationRelationshipsApi - object-oriented interface
 * @export
 * @class OrganizationRelationshipsApi
 * @extends {BaseAPI}
 */
class OrganizationRelationshipsApi extends base_1.BaseAPI {
    /**
     * Creates and returns an organization relationship.
     * @summary Create an organization relationship
     * @param {OrganizationRelationshipsApiAddOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    addOrganizationRelationship(requestParameters = {}) {
        return (0, exports.OrganizationRelationshipsApiFp)(this.configuration).addOrganizationRelationship(requestParameters.AddOrganizationRelationshipRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an organization relationship and returns the deleted ID.
     * @summary Delete an organization relationship
     * @param {OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    deleteOrganizationRelationship(requestParameters) {
        return (0, exports.OrganizationRelationshipsApiFp)(this.configuration).deleteOrganizationRelationship(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Finds and returns an organization relationship from its ID.
     * @summary Get one organization relationship
     * @param {OrganizationRelationshipsApiGetOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    getOrganizationRelationship(requestParameters) {
        return (0, exports.OrganizationRelationshipsApiFp)(this.configuration).getOrganizationRelationship(requestParameters.id, requestParameters.org_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all of the relationships for a supplied organization ID.
     * @summary Get all relationships for organization
     * @param {OrganizationRelationshipsApiGetOrganizationRelationshipsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    getOrganizationRelationships(requestParameters) {
        return (0, exports.OrganizationRelationshipsApiFp)(this.configuration).getOrganizationRelationships(requestParameters.org_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates and returns an organization relationship.
     * @summary Update an organization relationship
     * @param {OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    updateOrganizationRelationship(requestParameters) {
        return (0, exports.OrganizationRelationshipsApiFp)(this.configuration).updateOrganizationRelationship(requestParameters.id, requestParameters.OrganizationRelationship).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrganizationRelationshipsApi = OrganizationRelationshipsApi;
