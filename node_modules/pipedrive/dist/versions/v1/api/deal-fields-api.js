"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DealFieldsApi = exports.DealFieldsApiFactory = exports.DealFieldsApiFp = exports.DealFieldsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DealFieldsApi - axios parameter creator
 * @export
 */
const DealFieldsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new deal field
         * @param {CreateFieldRequest} [CreateFieldRequest]

         * @throws {RequiredError}
         */
        addDealField: (CreateFieldRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/dealFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateFieldRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete a deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        deleteDealField: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteDealField', 'id', id);
            const localVarPath = `/dealFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks multiple deal fields as deleted.
         * @summary Delete multiple deal fields in bulk
         * @param {string} ids The comma-separated field IDs to delete

         * @throws {RequiredError}
         */
        deleteDealFields: (ids) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            (0, common_1.assertParamExists)('deleteDealFields', 'ids', ids);
            const localVarPath = `/dealFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific deal field.
         * @summary Get one deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        getDealField: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getDealField', 'id', id);
            const localVarPath = `/dealFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all deal fields.
         * @summary Get all deal fields
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getDealFields: (start, limit) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/dealFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update a deal field
         * @param {number} id The ID of the field
         * @param {UpdateFieldRequest} [UpdateFieldRequest]

         * @throws {RequiredError}
         */
        updateDealField: (id, UpdateFieldRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateDealField', 'id', id);
            const localVarPath = `/dealFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateFieldRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DealFieldsApiAxiosParamCreator = DealFieldsApiAxiosParamCreator;
/**
 * DealFieldsApi - functional programming interface
 * @export
 */
const DealFieldsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DealFieldsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new deal field
         * @param {CreateFieldRequest} [CreateFieldRequest]

         * @throws {RequiredError}
         */
        addDealField(CreateFieldRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addDealField(CreateFieldRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete a deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        deleteDealField(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDealField(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks multiple deal fields as deleted.
         * @summary Delete multiple deal fields in bulk
         * @param {string} ids The comma-separated field IDs to delete

         * @throws {RequiredError}
         */
        deleteDealFields(ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDealFields(ids);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific deal field.
         * @summary Get one deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        getDealField(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDealField(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all deal fields.
         * @summary Get all deal fields
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getDealFields(start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDealFields(start, limit);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update a deal field
         * @param {number} id The ID of the field
         * @param {UpdateFieldRequest} [UpdateFieldRequest]

         * @throws {RequiredError}
         */
        updateDealField(id, UpdateFieldRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateDealField(id, UpdateFieldRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DealFieldsApiFp = DealFieldsApiFp;
/**
 * DealFieldsApi - factory interface
 * @export
 */
const DealFieldsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DealFieldsApiFp)(configuration);
    return {
        /**
         * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new deal field
         * @param {DealFieldsApiAddDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealField(requestParameters = {}) {
            return localVarFp.addDealField(requestParameters.CreateFieldRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete a deal field
         * @param {DealFieldsApiDeleteDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealField(requestParameters) {
            return localVarFp.deleteDealField(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple deal fields as deleted.
         * @summary Delete multiple deal fields in bulk
         * @param {DealFieldsApiDeleteDealFieldsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealFields(requestParameters) {
            return localVarFp.deleteDealFields(requestParameters.ids).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific deal field.
         * @summary Get one deal field
         * @param {DealFieldsApiGetDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealField(requestParameters) {
            return localVarFp.getDealField(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all deal fields.
         * @summary Get all deal fields
         * @param {DealFieldsApiGetDealFieldsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealFields(requestParameters = {}) {
            return localVarFp.getDealFields(requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update a deal field
         * @param {DealFieldsApiUpdateDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateDealField(requestParameters) {
            return localVarFp.updateDealField(requestParameters.id, requestParameters.UpdateFieldRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.DealFieldsApiFactory = DealFieldsApiFactory;
/**
 * DealFieldsApi - object-oriented interface
 * @export
 * @class DealFieldsApi
 * @extends {BaseAPI}
 */
class DealFieldsApi extends base_1.BaseAPI {
    /**
     * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new deal field
     * @param {DealFieldsApiAddDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    addDealField(requestParameters = {}) {
        return (0, exports.DealFieldsApiFp)(this.configuration).addDealField(requestParameters.CreateFieldRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a deal field
     * @param {DealFieldsApiDeleteDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    deleteDealField(requestParameters) {
        return (0, exports.DealFieldsApiFp)(this.configuration).deleteDealField(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks multiple deal fields as deleted.
     * @summary Delete multiple deal fields in bulk
     * @param {DealFieldsApiDeleteDealFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    deleteDealFields(requestParameters) {
        return (0, exports.DealFieldsApiFp)(this.configuration).deleteDealFields(requestParameters.ids).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific deal field.
     * @summary Get one deal field
     * @param {DealFieldsApiGetDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    getDealField(requestParameters) {
        return (0, exports.DealFieldsApiFp)(this.configuration).getDealField(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all deal fields.
     * @summary Get all deal fields
     * @param {DealFieldsApiGetDealFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    getDealFields(requestParameters = {}) {
        return (0, exports.DealFieldsApiFp)(this.configuration).getDealFields(requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a deal field
     * @param {DealFieldsApiUpdateDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    updateDealField(requestParameters) {
        return (0, exports.DealFieldsApiFp)(this.configuration).updateDealField(requestParameters.id, requestParameters.UpdateFieldRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.DealFieldsApi = DealFieldsApi;
