/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddLeadLabelRequest } from '../models';
import { DeleteLeadIdResponse } from '../models';
import { GetLeadLabelsResponse } from '../models';
import { UpdateLeadLabelRequest } from '../models';
import { UpsertLeadLabelResponse } from '../models';
/**
 * LeadLabelsApi - axios parameter creator
 * @export
 */
export declare const LeadLabelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a lead label.
     * @summary Add a lead label
     * @param {AddLeadLabelRequest} [AddLeadLabelRequest]

     * @throws {RequiredError}
     */
    addLeadLabel: (AddLeadLabelRequest?: AddLeadLabelRequest) => Promise<RequestArgs>;
    /**
     * Deletes a specific lead label.
     * @summary Delete a lead label
     * @param {string} id The ID of the lead label

     * @throws {RequiredError}
     */
    deleteLeadLabel: (id: string) => Promise<RequestArgs>;
    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * @summary Get all lead labels

     * @throws {RequiredError}
     */
    getLeadLabels: () => Promise<RequestArgs>;
    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated.
     * @summary Update a lead label
     * @param {string} id The ID of the lead label
     * @param {UpdateLeadLabelRequest} [UpdateLeadLabelRequest]

     * @throws {RequiredError}
     */
    updateLeadLabel: (id: string, UpdateLeadLabelRequest?: UpdateLeadLabelRequest) => Promise<RequestArgs>;
};
/**
 * LeadLabelsApi - functional programming interface
 * @export
 */
export declare const LeadLabelsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a lead label.
     * @summary Add a lead label
     * @param {AddLeadLabelRequest} [AddLeadLabelRequest]

     * @throws {RequiredError}
     */
    addLeadLabel(AddLeadLabelRequest?: AddLeadLabelRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertLeadLabelResponse>>;
    /**
     * Deletes a specific lead label.
     * @summary Delete a lead label
     * @param {string} id The ID of the lead label

     * @throws {RequiredError}
     */
    deleteLeadLabel(id: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteLeadIdResponse>>;
    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * @summary Get all lead labels

     * @throws {RequiredError}
     */
    getLeadLabels(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetLeadLabelsResponse>>;
    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated.
     * @summary Update a lead label
     * @param {string} id The ID of the lead label
     * @param {UpdateLeadLabelRequest} [UpdateLeadLabelRequest]

     * @throws {RequiredError}
     */
    updateLeadLabel(id: string, UpdateLeadLabelRequest?: UpdateLeadLabelRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertLeadLabelResponse>>;
};
/**
 * LeadLabelsApi - factory interface
 * @export
 */
export declare const LeadLabelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a lead label.
     * @summary Add a lead label
     * @param {LeadLabelsApiAddLeadLabelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addLeadLabel(requestParameters?: LeadLabelsApiAddLeadLabelRequest): Promise<UpsertLeadLabelResponse>;
    /**
     * Deletes a specific lead label.
     * @summary Delete a lead label
     * @param {LeadLabelsApiDeleteLeadLabelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteLeadLabel(requestParameters: LeadLabelsApiDeleteLeadLabelRequest): Promise<DeleteLeadIdResponse>;
    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * @summary Get all lead labels

     * @throws {RequiredError}
     */
    getLeadLabels(): Promise<GetLeadLabelsResponse>;
    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated.
     * @summary Update a lead label
     * @param {LeadLabelsApiUpdateLeadLabelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateLeadLabel(requestParameters: LeadLabelsApiUpdateLeadLabelRequest): Promise<UpsertLeadLabelResponse>;
};
/**
 * Request parameters for addLeadLabel operation in LeadLabelsApi.
 * @export
 * @interface LeadLabelsApiAddLeadLabelRequest
 */
export interface LeadLabelsApiAddLeadLabelRequest {
    /**
     *
     * @type {AddLeadLabelRequest}
     * @memberof LeadLabelsApiAddLeadLabel
     */
    readonly AddLeadLabelRequest?: AddLeadLabelRequest;
}
/**
 * Request parameters for deleteLeadLabel operation in LeadLabelsApi.
 * @export
 * @interface LeadLabelsApiDeleteLeadLabelRequest
 */
export interface LeadLabelsApiDeleteLeadLabelRequest {
    /**
     * The ID of the lead label
     * @type {string}
     * @memberof LeadLabelsApiDeleteLeadLabel
     */
    readonly id: string;
}
/**
 * Request parameters for updateLeadLabel operation in LeadLabelsApi.
 * @export
 * @interface LeadLabelsApiUpdateLeadLabelRequest
 */
export interface LeadLabelsApiUpdateLeadLabelRequest {
    /**
     * The ID of the lead label
     * @type {string}
     * @memberof LeadLabelsApiUpdateLeadLabel
     */
    readonly id: string;
    /**
     *
     * @type {UpdateLeadLabelRequest}
     * @memberof LeadLabelsApiUpdateLeadLabel
     */
    readonly UpdateLeadLabelRequest?: UpdateLeadLabelRequest;
}
/**
 * LeadLabelsApi - object-oriented interface
 * @export
 * @class LeadLabelsApi
 * @extends {BaseAPI}
 */
export declare class LeadLabelsApi extends BaseAPI {
    /**
     * Creates a lead label.
     * @summary Add a lead label
     * @param {LeadLabelsApiAddLeadLabelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof LeadLabelsApi
     */
    addLeadLabel(requestParameters?: LeadLabelsApiAddLeadLabelRequest): Promise<UpsertLeadLabelResponse>;
    /**
     * Deletes a specific lead label.
     * @summary Delete a lead label
     * @param {LeadLabelsApiDeleteLeadLabelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof LeadLabelsApi
     */
    deleteLeadLabel(requestParameters: LeadLabelsApiDeleteLeadLabelRequest): Promise<DeleteLeadIdResponse>;
    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * @summary Get all lead labels

     * @throws {RequiredError}
     * @memberof LeadLabelsApi
     */
    getLeadLabels(): Promise<GetLeadLabelsResponse>;
    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated.
     * @summary Update a lead label
     * @param {LeadLabelsApiUpdateLeadLabelRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof LeadLabelsApi
     */
    updateLeadLabel(requestParameters: LeadLabelsApiUpdateLeadLabelRequest): Promise<UpsertLeadLabelResponse>;
}
