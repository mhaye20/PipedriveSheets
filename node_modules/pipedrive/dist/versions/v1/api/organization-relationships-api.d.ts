/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddOrganizationRelationshipRequest } from '../models';
import { AddOrganizationRelationshipResponse } from '../models';
import { DeleteOrganizationRelationshipResponse } from '../models';
import { GetOrganizationRelationshipResponse } from '../models';
import { GetOrganizationRelationshipsResponse } from '../models';
import { OrganizationRelationship } from '../models';
import { UpdateOrganizationRelationshipResponse } from '../models';
/**
 * OrganizationRelationshipsApi - axios parameter creator
 * @export
 */
export declare const OrganizationRelationshipsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates and returns an organization relationship.
     * @summary Create an organization relationship
     * @param {AddOrganizationRelationshipRequest} [AddOrganizationRelationshipRequest]

     * @throws {RequiredError}
     */
    addOrganizationRelationship: (AddOrganizationRelationshipRequest?: AddOrganizationRelationshipRequest) => Promise<RequestArgs>;
    /**
     * Deletes an organization relationship and returns the deleted ID.
     * @summary Delete an organization relationship
     * @param {number} id The ID of the organization relationship

     * @throws {RequiredError}
     */
    deleteOrganizationRelationship: (id: number) => Promise<RequestArgs>;
    /**
     * Finds and returns an organization relationship from its ID.
     * @summary Get one organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {number} [org_id] The ID of the base organization for the returned calculated values

     * @throws {RequiredError}
     */
    getOrganizationRelationship: (id: number, org_id?: number) => Promise<RequestArgs>;
    /**
     * Gets all of the relationships for a supplied organization ID.
     * @summary Get all relationships for organization
     * @param {number} org_id The ID of the organization to get relationships for

     * @throws {RequiredError}
     */
    getOrganizationRelationships: (org_id: number) => Promise<RequestArgs>;
    /**
     * Updates and returns an organization relationship.
     * @summary Update an organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {OrganizationRelationship} [OrganizationRelationship]

     * @throws {RequiredError}
     */
    updateOrganizationRelationship: (id: number, OrganizationRelationship?: OrganizationRelationship) => Promise<RequestArgs>;
};
/**
 * OrganizationRelationshipsApi - functional programming interface
 * @export
 */
export declare const OrganizationRelationshipsApiFp: (configuration?: Configuration) => {
    /**
     * Creates and returns an organization relationship.
     * @summary Create an organization relationship
     * @param {AddOrganizationRelationshipRequest} [AddOrganizationRelationshipRequest]

     * @throws {RequiredError}
     */
    addOrganizationRelationship(AddOrganizationRelationshipRequest?: AddOrganizationRelationshipRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddOrganizationRelationshipResponse>>;
    /**
     * Deletes an organization relationship and returns the deleted ID.
     * @summary Delete an organization relationship
     * @param {number} id The ID of the organization relationship

     * @throws {RequiredError}
     */
    deleteOrganizationRelationship(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteOrganizationRelationshipResponse>>;
    /**
     * Finds and returns an organization relationship from its ID.
     * @summary Get one organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {number} [org_id] The ID of the base organization for the returned calculated values

     * @throws {RequiredError}
     */
    getOrganizationRelationship(id: number, org_id?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetOrganizationRelationshipResponse>>;
    /**
     * Gets all of the relationships for a supplied organization ID.
     * @summary Get all relationships for organization
     * @param {number} org_id The ID of the organization to get relationships for

     * @throws {RequiredError}
     */
    getOrganizationRelationships(org_id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetOrganizationRelationshipsResponse>>;
    /**
     * Updates and returns an organization relationship.
     * @summary Update an organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {OrganizationRelationship} [OrganizationRelationship]

     * @throws {RequiredError}
     */
    updateOrganizationRelationship(id: number, OrganizationRelationship?: OrganizationRelationship): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateOrganizationRelationshipResponse>>;
};
/**
 * OrganizationRelationshipsApi - factory interface
 * @export
 */
export declare const OrganizationRelationshipsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates and returns an organization relationship.
     * @summary Create an organization relationship
     * @param {OrganizationRelationshipsApiAddOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addOrganizationRelationship(requestParameters?: OrganizationRelationshipsApiAddOrganizationRelationshipRequest): Promise<AddOrganizationRelationshipResponse>;
    /**
     * Deletes an organization relationship and returns the deleted ID.
     * @summary Delete an organization relationship
     * @param {OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteOrganizationRelationship(requestParameters: OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest): Promise<DeleteOrganizationRelationshipResponse>;
    /**
     * Finds and returns an organization relationship from its ID.
     * @summary Get one organization relationship
     * @param {OrganizationRelationshipsApiGetOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getOrganizationRelationship(requestParameters: OrganizationRelationshipsApiGetOrganizationRelationshipRequest): Promise<GetOrganizationRelationshipResponse>;
    /**
     * Gets all of the relationships for a supplied organization ID.
     * @summary Get all relationships for organization
     * @param {OrganizationRelationshipsApiGetOrganizationRelationshipsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getOrganizationRelationships(requestParameters: OrganizationRelationshipsApiGetOrganizationRelationshipsRequest): Promise<GetOrganizationRelationshipsResponse>;
    /**
     * Updates and returns an organization relationship.
     * @summary Update an organization relationship
     * @param {OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateOrganizationRelationship(requestParameters: OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest): Promise<UpdateOrganizationRelationshipResponse>;
};
/**
 * Request parameters for addOrganizationRelationship operation in OrganizationRelationshipsApi.
 * @export
 * @interface OrganizationRelationshipsApiAddOrganizationRelationshipRequest
 */
export interface OrganizationRelationshipsApiAddOrganizationRelationshipRequest {
    /**
     *
     * @type {AddOrganizationRelationshipRequest}
     * @memberof OrganizationRelationshipsApiAddOrganizationRelationship
     */
    readonly AddOrganizationRelationshipRequest?: AddOrganizationRelationshipRequest;
}
/**
 * Request parameters for deleteOrganizationRelationship operation in OrganizationRelationshipsApi.
 * @export
 * @interface OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest
 */
export interface OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest {
    /**
     * The ID of the organization relationship
     * @type {number}
     * @memberof OrganizationRelationshipsApiDeleteOrganizationRelationship
     */
    readonly id: number;
}
/**
 * Request parameters for getOrganizationRelationship operation in OrganizationRelationshipsApi.
 * @export
 * @interface OrganizationRelationshipsApiGetOrganizationRelationshipRequest
 */
export interface OrganizationRelationshipsApiGetOrganizationRelationshipRequest {
    /**
     * The ID of the organization relationship
     * @type {number}
     * @memberof OrganizationRelationshipsApiGetOrganizationRelationship
     */
    readonly id: number;
    /**
     * The ID of the base organization for the returned calculated values
     * @type {number}
     * @memberof OrganizationRelationshipsApiGetOrganizationRelationship
     */
    readonly org_id?: number;
}
/**
 * Request parameters for getOrganizationRelationships operation in OrganizationRelationshipsApi.
 * @export
 * @interface OrganizationRelationshipsApiGetOrganizationRelationshipsRequest
 */
export interface OrganizationRelationshipsApiGetOrganizationRelationshipsRequest {
    /**
     * The ID of the organization to get relationships for
     * @type {number}
     * @memberof OrganizationRelationshipsApiGetOrganizationRelationships
     */
    readonly org_id: number;
}
/**
 * Request parameters for updateOrganizationRelationship operation in OrganizationRelationshipsApi.
 * @export
 * @interface OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest
 */
export interface OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest {
    /**
     * The ID of the organization relationship
     * @type {number}
     * @memberof OrganizationRelationshipsApiUpdateOrganizationRelationship
     */
    readonly id: number;
    /**
     *
     * @type {OrganizationRelationship}
     * @memberof OrganizationRelationshipsApiUpdateOrganizationRelationship
     */
    readonly OrganizationRelationship?: OrganizationRelationship;
}
/**
 * OrganizationRelationshipsApi - object-oriented interface
 * @export
 * @class OrganizationRelationshipsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationRelationshipsApi extends BaseAPI {
    /**
     * Creates and returns an organization relationship.
     * @summary Create an organization relationship
     * @param {OrganizationRelationshipsApiAddOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    addOrganizationRelationship(requestParameters?: OrganizationRelationshipsApiAddOrganizationRelationshipRequest): Promise<AddOrganizationRelationshipResponse>;
    /**
     * Deletes an organization relationship and returns the deleted ID.
     * @summary Delete an organization relationship
     * @param {OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    deleteOrganizationRelationship(requestParameters: OrganizationRelationshipsApiDeleteOrganizationRelationshipRequest): Promise<DeleteOrganizationRelationshipResponse>;
    /**
     * Finds and returns an organization relationship from its ID.
     * @summary Get one organization relationship
     * @param {OrganizationRelationshipsApiGetOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    getOrganizationRelationship(requestParameters: OrganizationRelationshipsApiGetOrganizationRelationshipRequest): Promise<GetOrganizationRelationshipResponse>;
    /**
     * Gets all of the relationships for a supplied organization ID.
     * @summary Get all relationships for organization
     * @param {OrganizationRelationshipsApiGetOrganizationRelationshipsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    getOrganizationRelationships(requestParameters: OrganizationRelationshipsApiGetOrganizationRelationshipsRequest): Promise<GetOrganizationRelationshipsResponse>;
    /**
     * Updates and returns an organization relationship.
     * @summary Update an organization relationship
     * @param {OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApi
     */
    updateOrganizationRelationship(requestParameters: OrganizationRelationshipsApiUpdateOrganizationRelationshipRequest): Promise<UpdateOrganizationRelationshipResponse>;
}
