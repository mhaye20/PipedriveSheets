"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivitiesApi = exports.ActivitiesApiFactory = exports.ActivitiesApiFp = exports.ActivitiesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
const ActivitiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Add an activity
         * @param {AddActivityRequest} [AddActivityRequest]

         * @throws {RequiredError}
         */
        addActivity: (AddActivityRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddActivityRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted.
         * @summary Delete multiple activities in bulk
         * @param {string} ids The comma-separated IDs of activities that will be deleted

         * @throws {RequiredError}
         */
        deleteActivities: (ids) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            (0, common_1.assertParamExists)('deleteActivities', 'ids', ids);
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:full"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {number} id The ID of the activity

         * @throws {RequiredError}
         */
        deleteActivity: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteActivity', 'id', id);
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all activities assigned to a particular user.
         * @summary Get all activities assigned to a particular user
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.
         * @param {number} [filter_id] The ID of the filter to use (will narrow down results if used together with &#x60;user_id&#x60; parameter)
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [start] For pagination, the position that represents the first result for the page
         * @param {string} [start_date] Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {string} [end_date] Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both done and not done activities.

         * @throws {RequiredError}
         */
        getActivities: (user_id, filter_id, type, limit, start, start_date, end_date, done) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration);
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date instanceof Date) ?
                    start_date.toISOString().substr(0, 10) :
                    start_date;
            }
            if (end_date !== undefined) {
                localVarQueryParameter['end_date'] = (end_date instanceof Date) ?
                    end_date.toISOString().substr(0, 10) :
                    end_date;
            }
            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all activities. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all activities (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, all activities are returned.
         * @param {boolean} [done] Whether the activity is done or not. &#x60;false&#x60; &#x3D; Not done, &#x60;true&#x60; &#x3D; Done. If omitted, returns both done and not done activities.
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.

         * @throws {RequiredError}
         */
        getActivitiesCollection: (cursor, limit, since, until, user_id, done, type) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/activities/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration);
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }
            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {number} id The ID of the activity

         * @throws {RequiredError}
         */
        getActivity: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getActivity', 'id', id);
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Update an activity
         * @param {number} id The ID of the activity
         * @param {UpdateActivityRequest} [UpdateActivityRequest]

         * @throws {RequiredError}
         */
        updateActivity: (id, UpdateActivityRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateActivity', 'id', id);
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["activities:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateActivityRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ActivitiesApiAxiosParamCreator = ActivitiesApiAxiosParamCreator;
/**
 * ActivitiesApi - functional programming interface
 * @export
 */
const ActivitiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ActivitiesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Add an activity
         * @param {AddActivityRequest} [AddActivityRequest]

         * @throws {RequiredError}
         */
        addActivity(AddActivityRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addActivity(AddActivityRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted.
         * @summary Delete multiple activities in bulk
         * @param {string} ids The comma-separated IDs of activities that will be deleted

         * @throws {RequiredError}
         */
        deleteActivities(ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteActivities(ids);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {number} id The ID of the activity

         * @throws {RequiredError}
         */
        deleteActivity(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteActivity(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all activities assigned to a particular user.
         * @summary Get all activities assigned to a particular user
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.
         * @param {number} [filter_id] The ID of the filter to use (will narrow down results if used together with &#x60;user_id&#x60; parameter)
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [start] For pagination, the position that represents the first result for the page
         * @param {string} [start_date] Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {string} [end_date] Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both done and not done activities.

         * @throws {RequiredError}
         */
        getActivities(user_id, filter_id, type, limit, start, start_date, end_date, done) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getActivities(user_id, filter_id, type, limit, start, start_date, end_date, done);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all activities. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all activities (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, all activities are returned.
         * @param {boolean} [done] Whether the activity is done or not. &#x60;false&#x60; &#x3D; Not done, &#x60;true&#x60; &#x3D; Done. If omitted, returns both done and not done activities.
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.

         * @throws {RequiredError}
         */
        getActivitiesCollection(cursor, limit, since, until, user_id, done, type) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getActivitiesCollection(cursor, limit, since, until, user_id, done, type);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {number} id The ID of the activity

         * @throws {RequiredError}
         */
        getActivity(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getActivity(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Update an activity
         * @param {number} id The ID of the activity
         * @param {UpdateActivityRequest} [UpdateActivityRequest]

         * @throws {RequiredError}
         */
        updateActivity(id, UpdateActivityRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateActivity(id, UpdateActivityRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ActivitiesApiFp = ActivitiesApiFp;
/**
 * ActivitiesApi - factory interface
 * @export
 */
const ActivitiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ActivitiesApiFp)(configuration);
    return {
        /**
         * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Add an activity
         * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addActivity(requestParameters = {}) {
            return localVarFp.addActivity(requestParameters.AddActivityRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted.
         * @summary Delete multiple activities in bulk
         * @param {ActivitiesApiDeleteActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteActivities(requestParameters) {
            return localVarFp.deleteActivities(requestParameters.ids).then((request) => request(axios, basePath));
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteActivity(requestParameters) {
            return localVarFp.deleteActivity(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all activities assigned to a particular user.
         * @summary Get all activities assigned to a particular user
         * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getActivities(requestParameters = {}) {
            return localVarFp.getActivities(requestParameters.user_id, requestParameters.filter_id, requestParameters.type, requestParameters.limit, requestParameters.start, requestParameters.start_date, requestParameters.end_date, requestParameters.done).then((request) => request(axios, basePath));
        },
        /**
         * Returns all activities. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all activities (BETA)
         * @param {ActivitiesApiGetActivitiesCollectionRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getActivitiesCollection(requestParameters = {}) {
            return localVarFp.getActivitiesCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.user_id, requestParameters.done, requestParameters.type).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getActivity(requestParameters) {
            return localVarFp.getActivity(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Update an activity
         * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateActivity(requestParameters) {
            return localVarFp.updateActivity(requestParameters.id, requestParameters.UpdateActivityRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.ActivitiesApiFactory = ActivitiesApiFactory;
/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
class ActivitiesApi extends base_1.BaseAPI {
    /**
     * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
     * @summary Add an activity
     * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    addActivity(requestParameters = {}) {
        return (0, exports.ActivitiesApiFp)(this.configuration).addActivity(requestParameters.AddActivityRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted.
     * @summary Delete multiple activities in bulk
     * @param {ActivitiesApiDeleteActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    deleteActivities(requestParameters) {
        return (0, exports.ActivitiesApiFp)(this.configuration).deleteActivities(requestParameters.ids).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    deleteActivity(requestParameters) {
        return (0, exports.ActivitiesApiFp)(this.configuration).deleteActivity(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all activities assigned to a particular user.
     * @summary Get all activities assigned to a particular user
     * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    getActivities(requestParameters = {}) {
        return (0, exports.ActivitiesApiFp)(this.configuration).getActivities(requestParameters.user_id, requestParameters.filter_id, requestParameters.type, requestParameters.limit, requestParameters.start, requestParameters.start_date, requestParameters.end_date, requestParameters.done).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all activities. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all activities (BETA)
     * @param {ActivitiesApiGetActivitiesCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    getActivitiesCollection(requestParameters = {}) {
        return (0, exports.ActivitiesApiFp)(this.configuration).getActivitiesCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.user_id, requestParameters.done, requestParameters.type).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    getActivity(requestParameters) {
        return (0, exports.ActivitiesApiFp)(this.configuration).getActivity(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
     * @summary Update an activity
     * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    updateActivity(requestParameters) {
        return (0, exports.ActivitiesApiFp)(this.configuration).updateActivity(requestParameters.id, requestParameters.UpdateActivityRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.ActivitiesApi = ActivitiesApi;
