/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddStageRequest } from '../models';
import { DeleteStageResponse } from '../models';
import { GetStagesResponse } from '../models';
import { UpdateStageRequest } from '../models';
import { UpsertStageResponse } from '../models';
/**
 * StagesApi - axios parameter creator
 * @export
 */
export declare const StagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {AddStageRequest} [AddStageRequest]

     * @throws {RequiredError}
     */
    addStage: (AddStageRequest?: AddStageRequest) => Promise<RequestArgs>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {number} id The ID of the stage

     * @throws {RequiredError}
     */
    deleteStage: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {number} id The ID of the stage

     * @throws {RequiredError}
     */
    getStage: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @param {'id' | 'update_time' | 'add_time' | 'order_nr'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;, &#x60;order_nr&#x60;.
     * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getStages: (pipeline_id?: number, sort_by?: 'id' | 'update_time' | 'add_time' | 'order_nr', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string) => Promise<RequestArgs>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {number} id The ID of the stage
     * @param {UpdateStageRequest} [UpdateStageRequest]

     * @throws {RequiredError}
     */
    updateStage: (id: number, UpdateStageRequest?: UpdateStageRequest) => Promise<RequestArgs>;
};
/**
 * StagesApi - functional programming interface
 * @export
 */
export declare const StagesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {AddStageRequest} [AddStageRequest]

     * @throws {RequiredError}
     */
    addStage(AddStageRequest?: AddStageRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {number} id The ID of the stage

     * @throws {RequiredError}
     */
    deleteStage(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteStageResponse>>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {number} id The ID of the stage

     * @throws {RequiredError}
     */
    getStage(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @param {'id' | 'update_time' | 'add_time' | 'order_nr'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;, &#x60;order_nr&#x60;.
     * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getStages(pipeline_id?: number, sort_by?: 'id' | 'update_time' | 'add_time' | 'order_nr', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStagesResponse>>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {number} id The ID of the stage
     * @param {UpdateStageRequest} [UpdateStageRequest]

     * @throws {RequiredError}
     */
    updateStage(id: number, UpdateStageRequest?: UpdateStageRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>>;
};
/**
 * StagesApi - factory interface
 * @export
 */
export declare const StagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addStage(requestParameters?: StagesApiAddStageRequest): Promise<UpsertStageResponse>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteStage(requestParameters: StagesApiDeleteStageRequest): Promise<DeleteStageResponse>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getStage(requestParameters: StagesApiGetStageRequest): Promise<UpsertStageResponse>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getStages(requestParameters?: StagesApiGetStagesRequest): Promise<GetStagesResponse>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateStage(requestParameters: StagesApiUpdateStageRequest): Promise<UpsertStageResponse>;
};
/**
 * Request parameters for addStage operation in StagesApi.
 * @export
 * @interface StagesApiAddStageRequest
 */
export interface StagesApiAddStageRequest {
    /**
     *
     * @type {AddStageRequest}
     * @memberof StagesApiAddStage
     */
    readonly AddStageRequest?: AddStageRequest;
}
/**
 * Request parameters for deleteStage operation in StagesApi.
 * @export
 * @interface StagesApiDeleteStageRequest
 */
export interface StagesApiDeleteStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiDeleteStage
     */
    readonly id: number;
}
/**
 * Request parameters for getStage operation in StagesApi.
 * @export
 * @interface StagesApiGetStageRequest
 */
export interface StagesApiGetStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiGetStage
     */
    readonly id: number;
}
/**
 * Request parameters for getStages operation in StagesApi.
 * @export
 * @interface StagesApiGetStagesRequest
 */
export interface StagesApiGetStagesRequest {
    /**
     * The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly pipeline_id?: number;
    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;, &#x60;order_nr&#x60;.
     * @type {'id' | 'update_time' | 'add_time' | 'order_nr'}
     * @memberof StagesApiGetStages
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time' | 'order_nr';
    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof StagesApiGetStages
     */
    readonly sort_direction?: 'asc' | 'desc';
    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly limit?: number;
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof StagesApiGetStages
     */
    readonly cursor?: string;
}
/**
 * Request parameters for updateStage operation in StagesApi.
 * @export
 * @interface StagesApiUpdateStageRequest
 */
export interface StagesApiUpdateStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiUpdateStage
     */
    readonly id: number;
    /**
     *
     * @type {UpdateStageRequest}
     * @memberof StagesApiUpdateStage
     */
    readonly UpdateStageRequest?: UpdateStageRequest;
}
/**
 * StagesApi - object-oriented interface
 * @export
 * @class StagesApi
 * @extends {BaseAPI}
 */
export declare class StagesApi extends BaseAPI {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    addStage(requestParameters?: StagesApiAddStageRequest): Promise<UpsertStageResponse>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    deleteStage(requestParameters: StagesApiDeleteStageRequest): Promise<DeleteStageResponse>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStage(requestParameters: StagesApiGetStageRequest): Promise<UpsertStageResponse>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStages(requestParameters?: StagesApiGetStagesRequest): Promise<GetStagesResponse>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    updateStage(requestParameters: StagesApiUpdateStageRequest): Promise<UpsertStageResponse>;
}
