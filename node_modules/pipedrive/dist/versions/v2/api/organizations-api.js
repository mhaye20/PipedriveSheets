"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationsApi = exports.OrganizationsApiFactory = exports.OrganizationsApiFp = exports.OrganizationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
const OrganizationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new organization.
         * @summary Add a new organization
         * @param {AddOrganizationRequest} [AddOrganizationRequest]

         * @throws {RequiredError}
         */
        addOrganization: (AddOrganizationRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddOrganizationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a user as a follower to the organization.
         * @summary Add a follower to an organization
         * @param {number} id The ID of the organization
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest]

         * @throws {RequiredError}
         */
        addOrganizationFollower: (id, AddDealFollowerRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('addOrganizationFollower', 'id', id);
            const localVarPath = `/organizations/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddDealFollowerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete a organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        deleteOrganization: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteOrganization', 'id', id);
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a user follower from the organization.
         * @summary Delete a follower from an organization
         * @param {number} id The ID of the organization
         * @param {number} follower_id The ID of the following user

         * @throws {RequiredError}
         */
        deleteOrganizationFollower: (id, follower_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteOrganizationFollower', 'id', id);
            // verify required parameter 'follower_id' is not null or undefined
            (0, common_1.assertParamExists)('deleteOrganizationFollower', 'follower_id', follower_id);
            const localVarPath = `/organizations/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific organization.
         * @summary Get details of a organization
         * @param {number} id The ID of the organization
         * @param {'next_activity_id' | 'last_activity_id' | 'open_deals_count' | 'related_open_deals_count' | 'closed_deals_count' | 'related_closed_deals_count' | 'email_messages_count' | 'people_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'files_count' | 'notes_count' | 'followers_count' | 'won_deals_count' | 'related_won_deals_count' | 'lost_deals_count' | 'related_lost_deals_count'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.

         * @throws {RequiredError}
         */
        getOrganization: (id, include_fields, custom_fields) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getOrganization', 'id', id);
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }
            if (custom_fields !== undefined) {
                localVarQueryParameter['custom_fields'] = custom_fields;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists users who are following the organization.
         * @summary List followers of an organization
         * @param {number} id The ID of the organization
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getOrganizationFollowers: (id, limit, cursor) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getOrganizationFollowers', 'id', id);
            const localVarPath = `/organizations/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists changelogs about users have followed the organization.
         * @summary List followers changelog of an organization
         * @param {number} id The ID of the organization
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getOrganizationFollowersChangelog: (id, limit, cursor) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getOrganizationFollowersChangelog', 'id', id);
            const localVarPath = `/organizations/{id}/followers/changelog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all organizations.
         * @summary Get all organizations
         * @param {number} [filter_id] If supplied, only organizations matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only organization owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only organizations with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only organizations with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'next_activity_id' | 'last_activity_id' | 'open_deals_count' | 'related_open_deals_count' | 'closed_deals_count' | 'related_closed_deals_count' | 'email_messages_count' | 'people_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'files_count' | 'notes_count' | 'followers_count' | 'won_deals_count' | 'related_won_deals_count' | 'lost_deals_count' | 'related_lost_deals_count'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getOrganizations: (filter_id, ids, owner_id, updated_since, updated_until, sort_by, sort_direction, include_fields, custom_fields, limit, cursor) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }
            if (updated_since !== undefined) {
                localVarQueryParameter['updated_since'] = updated_since;
            }
            if (updated_until !== undefined) {
                localVarQueryParameter['updated_until'] = updated_until;
            }
            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }
            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }
            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }
            if (custom_fields !== undefined) {
                localVarQueryParameter['custom_fields'] = custom_fields;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        searchOrganization: (term, fields, exact_match, limit, cursor) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'term' is not null or undefined
            (0, common_1.assertParamExists)('searchOrganization', 'term', term);
            const localVarPath = `/organizations/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full", "search:read"], configuration);
            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a organization.
         * @summary Update a organization
         * @param {number} id The ID of the organization
         * @param {UpdateOrganizationRequest} [UpdateOrganizationRequest]

         * @throws {RequiredError}
         */
        updateOrganization: (id, UpdateOrganizationRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateOrganization', 'id', id);
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateOrganizationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.OrganizationsApiAxiosParamCreator = OrganizationsApiAxiosParamCreator;
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
const OrganizationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OrganizationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new organization.
         * @summary Add a new organization
         * @param {AddOrganizationRequest} [AddOrganizationRequest]

         * @throws {RequiredError}
         */
        addOrganization(AddOrganizationRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addOrganization(AddOrganizationRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Adds a user as a follower to the organization.
         * @summary Add a follower to an organization
         * @param {number} id The ID of the organization
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest]

         * @throws {RequiredError}
         */
        addOrganizationFollower(id, AddDealFollowerRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addOrganizationFollower(id, AddDealFollowerRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks a organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete a organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        deleteOrganization(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrganization(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a user follower from the organization.
         * @summary Delete a follower from an organization
         * @param {number} id The ID of the organization
         * @param {number} follower_id The ID of the following user

         * @throws {RequiredError}
         */
        deleteOrganizationFollower(id, follower_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrganizationFollower(id, follower_id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific organization.
         * @summary Get details of a organization
         * @param {number} id The ID of the organization
         * @param {'next_activity_id' | 'last_activity_id' | 'open_deals_count' | 'related_open_deals_count' | 'closed_deals_count' | 'related_closed_deals_count' | 'email_messages_count' | 'people_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'files_count' | 'notes_count' | 'followers_count' | 'won_deals_count' | 'related_won_deals_count' | 'lost_deals_count' | 'related_lost_deals_count'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.

         * @throws {RequiredError}
         */
        getOrganization(id, include_fields, custom_fields) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganization(id, include_fields, custom_fields);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Lists users who are following the organization.
         * @summary List followers of an organization
         * @param {number} id The ID of the organization
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getOrganizationFollowers(id, limit, cursor) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationFollowers(id, limit, cursor);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Lists changelogs about users have followed the organization.
         * @summary List followers changelog of an organization
         * @param {number} id The ID of the organization
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getOrganizationFollowersChangelog(id, limit, cursor) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationFollowersChangelog(id, limit, cursor);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all organizations.
         * @summary Get all organizations
         * @param {number} [filter_id] If supplied, only organizations matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only organization owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only organizations with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only organizations with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'next_activity_id' | 'last_activity_id' | 'open_deals_count' | 'related_open_deals_count' | 'closed_deals_count' | 'related_closed_deals_count' | 'email_messages_count' | 'people_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'files_count' | 'notes_count' | 'followers_count' | 'won_deals_count' | 'related_won_deals_count' | 'lost_deals_count' | 'related_lost_deals_count'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getOrganizations(filter_id, ids, owner_id, updated_since, updated_until, sort_by, sort_direction, include_fields, custom_fields, limit, cursor) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizations(filter_id, ids, owner_id, updated_since, updated_until, sort_by, sort_direction, include_fields, custom_fields, limit, cursor);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        searchOrganization(term, fields, exact_match, limit, cursor) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.searchOrganization(term, fields, exact_match, limit, cursor);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a organization.
         * @summary Update a organization
         * @param {number} id The ID of the organization
         * @param {UpdateOrganizationRequest} [UpdateOrganizationRequest]

         * @throws {RequiredError}
         */
        updateOrganization(id, UpdateOrganizationRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOrganization(id, UpdateOrganizationRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.OrganizationsApiFp = OrganizationsApiFp;
/**
 * OrganizationsApi - factory interface
 * @export
 */
const OrganizationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OrganizationsApiFp)(configuration);
    return {
        /**
         * Adds a new organization.
         * @summary Add a new organization
         * @param {OrganizationsApiAddOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganization(requestParameters = {}) {
            return localVarFp.addOrganization(requestParameters.AddOrganizationRequest).then((request) => request(axios, basePath));
        },
        /**
         * Adds a user as a follower to the organization.
         * @summary Add a follower to an organization
         * @param {OrganizationsApiAddOrganizationFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganizationFollower(requestParameters) {
            return localVarFp.addOrganizationFollower(requestParameters.id, requestParameters.AddDealFollowerRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete a organization
         * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganization(requestParameters) {
            return localVarFp.deleteOrganization(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a user follower from the organization.
         * @summary Delete a follower from an organization
         * @param {OrganizationsApiDeleteOrganizationFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizationFollower(requestParameters) {
            return localVarFp.deleteOrganizationFollower(requestParameters.id, requestParameters.follower_id).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific organization.
         * @summary Get details of a organization
         * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganization(requestParameters) {
            return localVarFp.getOrganization(requestParameters.id, requestParameters.include_fields, requestParameters.custom_fields).then((request) => request(axios, basePath));
        },
        /**
         * Lists users who are following the organization.
         * @summary List followers of an organization
         * @param {OrganizationsApiGetOrganizationFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFollowers(requestParameters) {
            return localVarFp.getOrganizationFollowers(requestParameters.id, requestParameters.limit, requestParameters.cursor).then((request) => request(axios, basePath));
        },
        /**
         * Lists changelogs about users have followed the organization.
         * @summary List followers changelog of an organization
         * @param {OrganizationsApiGetOrganizationFollowersChangelogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFollowersChangelog(requestParameters) {
            return localVarFp.getOrganizationFollowersChangelog(requestParameters.id, requestParameters.limit, requestParameters.cursor).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all organizations.
         * @summary Get all organizations
         * @param {OrganizationsApiGetOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizations(requestParameters = {}) {
            return localVarFp.getOrganizations(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.custom_fields, requestParameters.limit, requestParameters.cursor).then((request) => request(axios, basePath));
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {OrganizationsApiSearchOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchOrganization(requestParameters) {
            return localVarFp.searchOrganization(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.limit, requestParameters.cursor).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a organization.
         * @summary Update a organization
         * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateOrganization(requestParameters) {
            return localVarFp.updateOrganization(requestParameters.id, requestParameters.UpdateOrganizationRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.OrganizationsApiFactory = OrganizationsApiFactory;
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
class OrganizationsApi extends base_1.BaseAPI {
    /**
     * Adds a new organization.
     * @summary Add a new organization
     * @param {OrganizationsApiAddOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    addOrganization(requestParameters = {}) {
        return (0, exports.OrganizationsApiFp)(this.configuration).addOrganization(requestParameters.AddOrganizationRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a user as a follower to the organization.
     * @summary Add a follower to an organization
     * @param {OrganizationsApiAddOrganizationFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    addOrganizationFollower(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).addOrganizationFollower(requestParameters.id, requestParameters.AddDealFollowerRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a organization as deleted. After 30 days, the organization will be permanently deleted.
     * @summary Delete a organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganization(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).deleteOrganization(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a user follower from the organization.
     * @summary Delete a follower from an organization
     * @param {OrganizationsApiDeleteOrganizationFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganizationFollower(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).deleteOrganizationFollower(requestParameters.id, requestParameters.follower_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific organization.
     * @summary Get details of a organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).getOrganization(requestParameters.id, requestParameters.include_fields, requestParameters.custom_fields).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists users who are following the organization.
     * @summary List followers of an organization
     * @param {OrganizationsApiGetOrganizationFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationFollowers(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).getOrganizationFollowers(requestParameters.id, requestParameters.limit, requestParameters.cursor).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists changelogs about users have followed the organization.
     * @summary List followers changelog of an organization
     * @param {OrganizationsApiGetOrganizationFollowersChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationFollowersChangelog(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).getOrganizationFollowersChangelog(requestParameters.id, requestParameters.limit, requestParameters.cursor).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all organizations.
     * @summary Get all organizations
     * @param {OrganizationsApiGetOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizations(requestParameters = {}) {
        return (0, exports.OrganizationsApiFp)(this.configuration).getOrganizations(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.custom_fields, requestParameters.limit, requestParameters.cursor).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search organizations
     * @param {OrganizationsApiSearchOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    searchOrganization(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).searchOrganization(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.limit, requestParameters.cursor).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a organization.
     * @summary Update a organization
     * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganization(requestParameters) {
        return (0, exports.OrganizationsApiFp)(this.configuration).updateOrganization(requestParameters.id, requestParameters.UpdateOrganizationRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrganizationsApi = OrganizationsApi;
