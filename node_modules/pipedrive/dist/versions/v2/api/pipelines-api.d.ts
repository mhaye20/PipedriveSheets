/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddPipelineRequest } from '../models';
import { DeletePipelineResponse } from '../models';
import { GetPipelinesResponse } from '../models';
import { UpdatePipelineRequest } from '../models';
import { UpsertPipelineResponse } from '../models';
/**
 * PipelinesApi - axios parameter creator
 * @export
 */
export declare const PipelinesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {AddPipelineRequest} [AddPipelineRequest]

     * @throws {RequiredError}
     */
    addPipeline: (AddPipelineRequest?: AddPipelineRequest) => Promise<RequestArgs>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {number} id The ID of the pipeline

     * @throws {RequiredError}
     */
    deletePipeline: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about a specific pipeline.
     * @summary Get one pipeline
     * @param {number} id The ID of the pipeline

     * @throws {RequiredError}
     */
    getPipeline: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getPipelines: (sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string) => Promise<RequestArgs>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {number} id The ID of the pipeline
     * @param {UpdatePipelineRequest} [UpdatePipelineRequest]

     * @throws {RequiredError}
     */
    updatePipeline: (id: number, UpdatePipelineRequest?: UpdatePipelineRequest) => Promise<RequestArgs>;
};
/**
 * PipelinesApi - functional programming interface
 * @export
 */
export declare const PipelinesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {AddPipelineRequest} [AddPipelineRequest]

     * @throws {RequiredError}
     */
    addPipeline(AddPipelineRequest?: AddPipelineRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertPipelineResponse>>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {number} id The ID of the pipeline

     * @throws {RequiredError}
     */
    deletePipeline(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePipelineResponse>>;
    /**
     * Returns data about a specific pipeline.
     * @summary Get one pipeline
     * @param {number} id The ID of the pipeline

     * @throws {RequiredError}
     */
    getPipeline(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertPipelineResponse>>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getPipelines(sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPipelinesResponse>>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {number} id The ID of the pipeline
     * @param {UpdatePipelineRequest} [UpdatePipelineRequest]

     * @throws {RequiredError}
     */
    updatePipeline(id: number, UpdatePipelineRequest?: UpdatePipelineRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertPipelineResponse>>;
};
/**
 * PipelinesApi - factory interface
 * @export
 */
export declare const PipelinesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addPipeline(requestParameters?: PipelinesApiAddPipelineRequest): Promise<UpsertPipelineResponse>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deletePipeline(requestParameters: PipelinesApiDeletePipelineRequest): Promise<DeletePipelineResponse>;
    /**
     * Returns data about a specific pipeline.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPipeline(requestParameters: PipelinesApiGetPipelineRequest): Promise<UpsertPipelineResponse>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {PipelinesApiGetPipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getPipelines(requestParameters?: PipelinesApiGetPipelinesRequest): Promise<GetPipelinesResponse>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updatePipeline(requestParameters: PipelinesApiUpdatePipelineRequest): Promise<UpsertPipelineResponse>;
};
/**
 * Request parameters for addPipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiAddPipelineRequest
 */
export interface PipelinesApiAddPipelineRequest {
    /**
     *
     * @type {AddPipelineRequest}
     * @memberof PipelinesApiAddPipeline
     */
    readonly AddPipelineRequest?: AddPipelineRequest;
}
/**
 * Request parameters for deletePipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiDeletePipelineRequest
 */
export interface PipelinesApiDeletePipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiDeletePipeline
     */
    readonly id: number;
}
/**
 * Request parameters for getPipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelineRequest
 */
export interface PipelinesApiGetPipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiGetPipeline
     */
    readonly id: number;
}
/**
 * Request parameters for getPipelines operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelinesRequest
 */
export interface PipelinesApiGetPipelinesRequest {
    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @type {'id' | 'update_time' | 'add_time'}
     * @memberof PipelinesApiGetPipelines
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time';
    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof PipelinesApiGetPipelines
     */
    readonly sort_direction?: 'asc' | 'desc';
    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof PipelinesApiGetPipelines
     */
    readonly limit?: number;
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof PipelinesApiGetPipelines
     */
    readonly cursor?: string;
}
/**
 * Request parameters for updatePipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiUpdatePipelineRequest
 */
export interface PipelinesApiUpdatePipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiUpdatePipeline
     */
    readonly id: number;
    /**
     *
     * @type {UpdatePipelineRequest}
     * @memberof PipelinesApiUpdatePipeline
     */
    readonly UpdatePipelineRequest?: UpdatePipelineRequest;
}
/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
export declare class PipelinesApi extends BaseAPI {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    addPipeline(requestParameters?: PipelinesApiAddPipelineRequest): Promise<UpsertPipelineResponse>;
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    deletePipeline(requestParameters: PipelinesApiDeletePipelineRequest): Promise<DeletePipelineResponse>;
    /**
     * Returns data about a specific pipeline.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipeline(requestParameters: PipelinesApiGetPipelineRequest): Promise<UpsertPipelineResponse>;
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {PipelinesApiGetPipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelines(requestParameters?: PipelinesApiGetPipelinesRequest): Promise<GetPipelinesResponse>;
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    updatePipeline(requestParameters: PipelinesApiUpdatePipelineRequest): Promise<UpsertPipelineResponse>;
}
