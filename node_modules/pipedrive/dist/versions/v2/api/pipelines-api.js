"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelinesApi = exports.PipelinesApiFactory = exports.PipelinesApiFp = exports.PipelinesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PipelinesApi - axios parameter creator
 * @export
 */
const PipelinesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {AddPipelineRequest} [AddPipelineRequest]

         * @throws {RequiredError}
         */
        addPipeline: (AddPipelineRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AddPipelineRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        deletePipeline: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deletePipeline', 'id', id);
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific pipeline.
         * @summary Get one pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        getPipeline: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getPipeline', 'id', id);
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getPipelines: (sort_by, sort_direction, limit, cursor) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }
            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {number} id The ID of the pipeline
         * @param {UpdatePipelineRequest} [UpdatePipelineRequest]

         * @throws {RequiredError}
         */
        updatePipeline: (id, UpdatePipelineRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updatePipeline', 'id', id);
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield (0, common_1.setApiKeyToObject)(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdatePipelineRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PipelinesApiAxiosParamCreator = PipelinesApiAxiosParamCreator;
/**
 * PipelinesApi - functional programming interface
 * @export
 */
const PipelinesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PipelinesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {AddPipelineRequest} [AddPipelineRequest]

         * @throws {RequiredError}
         */
        addPipeline(AddPipelineRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPipeline(AddPipelineRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        deletePipeline(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deletePipeline(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific pipeline.
         * @summary Get one pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        getPipeline(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipeline(id);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getPipelines(sort_by, sort_direction, limit, cursor) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipelines(sort_by, sort_direction, limit, cursor);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {number} id The ID of the pipeline
         * @param {UpdatePipelineRequest} [UpdatePipelineRequest]

         * @throws {RequiredError}
         */
        updatePipeline(id, UpdatePipelineRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updatePipeline(id, UpdatePipelineRequest);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.PipelinesApiFp = PipelinesApiFp;
/**
 * PipelinesApi - factory interface
 * @export
 */
const PipelinesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PipelinesApiFp)(configuration);
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addPipeline(requestParameters = {}) {
            return localVarFp.addPipeline(requestParameters.AddPipelineRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deletePipeline(requestParameters) {
            return localVarFp.deletePipeline(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific pipeline.
         * @summary Get one pipeline
         * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipeline(requestParameters) {
            return localVarFp.getPipeline(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines
         * @param {PipelinesApiGetPipelinesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipelines(requestParameters = {}) {
            return localVarFp.getPipelines(requestParameters.sort_by, requestParameters.sort_direction, requestParameters.limit, requestParameters.cursor).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updatePipeline(requestParameters) {
            return localVarFp.updatePipeline(requestParameters.id, requestParameters.UpdatePipelineRequest).then((request) => request(axios, basePath));
        },
    };
};
exports.PipelinesApiFactory = PipelinesApiFactory;
/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
class PipelinesApi extends base_1.BaseAPI {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    addPipeline(requestParameters = {}) {
        return (0, exports.PipelinesApiFp)(this.configuration).addPipeline(requestParameters.AddPipelineRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    deletePipeline(requestParameters) {
        return (0, exports.PipelinesApiFp)(this.configuration).deletePipeline(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific pipeline.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipeline(requestParameters) {
        return (0, exports.PipelinesApiFp)(this.configuration).getPipeline(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {PipelinesApiGetPipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelines(requestParameters = {}) {
        return (0, exports.PipelinesApiFp)(this.configuration).getPipelines(requestParameters.sort_by, requestParameters.sort_direction, requestParameters.limit, requestParameters.cursor).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    updatePipeline(requestParameters) {
        return (0, exports.PipelinesApiFp)(this.configuration).updatePipeline(requestParameters.id, requestParameters.UpdatePipelineRequest).then((request) => request(this.axios, this.basePath));
    }
}
exports.PipelinesApi = PipelinesApi;
