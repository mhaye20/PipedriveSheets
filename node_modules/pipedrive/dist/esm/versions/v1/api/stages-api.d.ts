/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddStageRequest } from '../models';
import { DeleteStageResponse } from '../models';
import { DeleteStagesResponse } from '../models';
import { GetStageDealsResponse } from '../models';
import { GetStageResponse } from '../models';
import { GetStagesResponse } from '../models';
import { UpdateStageRequest } from '../models';
import { UpsertStageResponse } from '../models';
/**
 * StagesApi - axios parameter creator
 * @export
 */
export declare const StagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {AddStageRequest} [AddStageRequest]

     * @throws {RequiredError}
     */
    addStage: (AddStageRequest?: AddStageRequest) => Promise<RequestArgs>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {number} id The ID of the stage

     * @throws {RequiredError}
     */
    deleteStage: (id: number) => Promise<RequestArgs>;
    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {string} ids The comma-separated stage IDs to delete

     * @throws {RequiredError}
     */
    deleteStages: (ids: string) => Promise<RequestArgs>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {number} id The ID of the stage
     * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user

     * @throws {RequiredError}
     */
    getStage: (id: number, everyone?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a stage
     * @param {number} id The ID of the stage
     * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
     * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getStageDeals: (id: number, filter_id?: number, user_id?: number, everyone?: 0 | 1, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getStages: (pipeline_id?: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {number} id The ID of the stage
     * @param {UpdateStageRequest} [UpdateStageRequest]

     * @throws {RequiredError}
     */
    updateStage: (id: number, UpdateStageRequest?: UpdateStageRequest) => Promise<RequestArgs>;
};
/**
 * StagesApi - functional programming interface
 * @export
 */
export declare const StagesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {AddStageRequest} [AddStageRequest]

     * @throws {RequiredError}
     */
    addStage(AddStageRequest?: AddStageRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {number} id The ID of the stage

     * @throws {RequiredError}
     */
    deleteStage(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteStageResponse>>;
    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {string} ids The comma-separated stage IDs to delete

     * @throws {RequiredError}
     */
    deleteStages(ids: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteStagesResponse>>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {number} id The ID of the stage
     * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user

     * @throws {RequiredError}
     */
    getStage(id: number, everyone?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStageResponse>>;
    /**
     * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a stage
     * @param {number} id The ID of the stage
     * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
     * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getStageDeals(id: number, filter_id?: number, user_id?: number, everyone?: 0 | 1, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStageDealsResponse>>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getStages(pipeline_id?: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStagesResponse>>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {number} id The ID of the stage
     * @param {UpdateStageRequest} [UpdateStageRequest]

     * @throws {RequiredError}
     */
    updateStage(id: number, UpdateStageRequest?: UpdateStageRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>>;
};
/**
 * StagesApi - factory interface
 * @export
 */
export declare const StagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addStage(requestParameters?: StagesApiAddStageRequest): Promise<UpsertStageResponse>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteStage(requestParameters: StagesApiDeleteStageRequest): Promise<DeleteStageResponse>;
    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {StagesApiDeleteStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteStages(requestParameters: StagesApiDeleteStagesRequest): Promise<DeleteStagesResponse>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getStage(requestParameters: StagesApiGetStageRequest): Promise<GetStageResponse>;
    /**
     * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a stage
     * @param {StagesApiGetStageDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getStageDeals(requestParameters: StagesApiGetStageDealsRequest): Promise<GetStageDealsResponse>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getStages(requestParameters?: StagesApiGetStagesRequest): Promise<GetStagesResponse>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateStage(requestParameters: StagesApiUpdateStageRequest): Promise<UpsertStageResponse>;
};
/**
 * Request parameters for addStage operation in StagesApi.
 * @export
 * @interface StagesApiAddStageRequest
 */
export interface StagesApiAddStageRequest {
    /**
     *
     * @type {AddStageRequest}
     * @memberof StagesApiAddStage
     */
    readonly AddStageRequest?: AddStageRequest;
}
/**
 * Request parameters for deleteStage operation in StagesApi.
 * @export
 * @interface StagesApiDeleteStageRequest
 */
export interface StagesApiDeleteStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiDeleteStage
     */
    readonly id: number;
}
/**
 * Request parameters for deleteStages operation in StagesApi.
 * @export
 * @interface StagesApiDeleteStagesRequest
 */
export interface StagesApiDeleteStagesRequest {
    /**
     * The comma-separated stage IDs to delete
     * @type {string}
     * @memberof StagesApiDeleteStages
     */
    readonly ids: string;
}
/**
 * Request parameters for getStage operation in StagesApi.
 * @export
 * @interface StagesApiGetStageRequest
 */
export interface StagesApiGetStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiGetStage
     */
    readonly id: number;
    /**
     * If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user
     * @type {0 | 1}
     * @memberof StagesApiGetStage
     */
    readonly everyone?: 0 | 1;
}
/**
 * Request parameters for getStageDeals operation in StagesApi.
 * @export
 * @interface StagesApiGetStageDealsRequest
 */
export interface StagesApiGetStageDealsRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly id: number;
    /**
     * If supplied, only deals matching the given filter will be returned
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly filter_id?: number;
    /**
     * If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly user_id?: number;
    /**
     * If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
     * @type {0 | 1}
     * @memberof StagesApiGetStageDeals
     */
    readonly everyone?: 0 | 1;
    /**
     * Pagination start
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly limit?: number;
}
/**
 * Request parameters for getStages operation in StagesApi.
 * @export
 * @interface StagesApiGetStagesRequest
 */
export interface StagesApiGetStagesRequest {
    /**
     * The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly pipeline_id?: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly limit?: number;
}
/**
 * Request parameters for updateStage operation in StagesApi.
 * @export
 * @interface StagesApiUpdateStageRequest
 */
export interface StagesApiUpdateStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiUpdateStage
     */
    readonly id: number;
    /**
     *
     * @type {UpdateStageRequest}
     * @memberof StagesApiUpdateStage
     */
    readonly UpdateStageRequest?: UpdateStageRequest;
}
/**
 * StagesApi - object-oriented interface
 * @export
 * @class StagesApi
 * @extends {BaseAPI}
 */
export declare class StagesApi extends BaseAPI {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    addStage(requestParameters?: StagesApiAddStageRequest): Promise<UpsertStageResponse>;
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    deleteStage(requestParameters: StagesApiDeleteStageRequest): Promise<DeleteStageResponse>;
    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {StagesApiDeleteStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    deleteStages(requestParameters: StagesApiDeleteStagesRequest): Promise<DeleteStagesResponse>;
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStage(requestParameters: StagesApiGetStageRequest): Promise<GetStageResponse>;
    /**
     * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a stage
     * @param {StagesApiGetStageDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStageDeals(requestParameters: StagesApiGetStageDealsRequest): Promise<GetStageDealsResponse>;
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStages(requestParameters?: StagesApiGetStagesRequest): Promise<GetStagesResponse>;
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    updateStage(requestParameters: StagesApiUpdateStageRequest): Promise<UpsertStageResponse>;
}
