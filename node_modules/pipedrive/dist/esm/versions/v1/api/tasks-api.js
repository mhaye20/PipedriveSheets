/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new task.
         * @summary Add a task
         * @param {AddTaskRequest} [AddTaskRequest]

         * @throws {RequiredError}
         */
        addTask: (AddTaskRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddTaskRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a task as deleted. If the task has subtasks then those will also be deleted.
         * @summary Delete a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        deleteTask: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTask', 'id', id);
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific task.
         * @summary Get details of a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        getTask: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTask', 'id', id);
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all tasks
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
         * @param {number} [assignee_id] If supplied, only tasks that are assigned to this user are returned
         * @param {number} [project_id] If supplied, only tasks that are assigned to this project are returned
         * @param {number} [parent_task_id] If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
         * @param {0 | 1} [done] Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.

         * @throws {RequiredError}
         */
        getTasks: (cursor, limit, assignee_id, project_id, parent_task_id, done) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration);
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (assignee_id !== undefined) {
                localVarQueryParameter['assignee_id'] = assignee_id;
            }
            if (project_id !== undefined) {
                localVarQueryParameter['project_id'] = project_id;
            }
            if (parent_task_id !== undefined) {
                localVarQueryParameter['parent_task_id'] = parent_task_id;
            }
            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a task.
         * @summary Update a task
         * @param {number} id The ID of the task
         * @param {UpdateProjectRequest2} [UpdateProjectRequest2]

         * @throws {RequiredError}
         */
        updateTask: (id, UpdateProjectRequest2) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTask', 'id', id);
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateProjectRequest2, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function (configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new task.
         * @summary Add a task
         * @param {AddTaskRequest} [AddTaskRequest]

         * @throws {RequiredError}
         */
        addTask(AddTaskRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addTask(AddTaskRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a task as deleted. If the task has subtasks then those will also be deleted.
         * @summary Delete a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        deleteTask(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteTask(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific task.
         * @summary Get details of a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        getTask(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTask(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all tasks
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
         * @param {number} [assignee_id] If supplied, only tasks that are assigned to this user are returned
         * @param {number} [project_id] If supplied, only tasks that are assigned to this project are returned
         * @param {number} [parent_task_id] If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
         * @param {0 | 1} [done] Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.

         * @throws {RequiredError}
         */
        getTasks(cursor, limit, assignee_id, project_id, parent_task_id, done) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTasks(cursor, limit, assignee_id, project_id, parent_task_id, done);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates a task.
         * @summary Update a task
         * @param {number} id The ID of the task
         * @param {UpdateProjectRequest2} [UpdateProjectRequest2]

         * @throws {RequiredError}
         */
        updateTask(id, UpdateProjectRequest2) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateTask(id, UpdateProjectRequest2);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = TasksApiFp(configuration);
    return {
        /**
         * Adds a new task.
         * @summary Add a task
         * @param {TasksApiAddTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addTask(requestParameters = {}) {
            return localVarFp.addTask(requestParameters.AddTaskRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a task as deleted. If the task has subtasks then those will also be deleted.
         * @summary Delete a task
         * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteTask(requestParameters) {
            return localVarFp.deleteTask(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific task.
         * @summary Get details of a task
         * @param {TasksApiGetTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getTask(requestParameters) {
            return localVarFp.getTask(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all tasks
         * @param {TasksApiGetTasksRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getTasks(requestParameters = {}) {
            return localVarFp.getTasks(requestParameters.cursor, requestParameters.limit, requestParameters.assignee_id, requestParameters.project_id, requestParameters.parent_task_id, requestParameters.done).then((request) => request(axios, basePath));
        },
        /**
         * Updates a task.
         * @summary Update a task
         * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateTask(requestParameters) {
            return localVarFp.updateTask(requestParameters.id, requestParameters.UpdateProjectRequest2).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Adds a new task.
     * @summary Add a task
     * @param {TasksApiAddTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    addTask(requestParameters = {}) {
        return TasksApiFp(this.configuration).addTask(requestParameters.AddTaskRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a task as deleted. If the task has subtasks then those will also be deleted.
     * @summary Delete a task
     * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    deleteTask(requestParameters) {
        return TasksApiFp(this.configuration).deleteTask(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific task.
     * @summary Get details of a task
     * @param {TasksApiGetTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getTask(requestParameters) {
        return TasksApiFp(this.configuration).getTask(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all tasks
     * @param {TasksApiGetTasksRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getTasks(requestParameters = {}) {
        return TasksApiFp(this.configuration).getTasks(requestParameters.cursor, requestParameters.limit, requestParameters.assignee_id, requestParameters.project_id, requestParameters.parent_task_id, requestParameters.done).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a task.
     * @summary Update a task
     * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    updateTask(requestParameters) {
        return TasksApiFp(this.configuration).updateTask(requestParameters.id, requestParameters.UpdateProjectRequest2).then((request) => request(this.axios, this.basePath));
    }
}
