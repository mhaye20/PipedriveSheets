/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * StagesApi - axios parameter creator
 * @export
 */
export const StagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {AddStageRequest} [AddStageRequest]

         * @throws {RequiredError}
         */
        addStage: (AddStageRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddStageRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        deleteStage: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStage', 'id', id);
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks multiple stages as deleted.
         * @summary Delete multiple stages in bulk
         * @param {string} ids The comma-separated stage IDs to delete

         * @throws {RequiredError}
         */
        deleteStages: (ids) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteStages', 'ids', ids);
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {number} id The ID of the stage
         * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user

         * @throws {RequiredError}
         */
        getStage: (id, everyone) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStage', 'id', id);
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            if (everyone !== undefined) {
                localVarQueryParameter['everyone'] = everyone;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
         * @summary Get deals in a stage
         * @param {number} id The ID of the stage
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
         * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getStageDeals: (id, filter_id, user_id, everyone, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStageDeals', 'id', id);
            const localVarPath = `/stages/{id}/deals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            if (everyone !== undefined) {
                localVarQueryParameter['everyone'] = everyone;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getStages: (pipeline_id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            if (pipeline_id !== undefined) {
                localVarQueryParameter['pipeline_id'] = pipeline_id;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {number} id The ID of the stage
         * @param {UpdateStageRequest} [UpdateStageRequest]

         * @throws {RequiredError}
         */
        updateStage: (id, UpdateStageRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStage', 'id', id);
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateStageRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StagesApi - functional programming interface
 * @export
 */
export const StagesApiFp = function (configuration) {
    const localVarAxiosParamCreator = StagesApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {AddStageRequest} [AddStageRequest]

         * @throws {RequiredError}
         */
        addStage(AddStageRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addStage(AddStageRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        deleteStage(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStage(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks multiple stages as deleted.
         * @summary Delete multiple stages in bulk
         * @param {string} ids The comma-separated stage IDs to delete

         * @throws {RequiredError}
         */
        deleteStages(ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStages(ids);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {number} id The ID of the stage
         * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user

         * @throws {RequiredError}
         */
        getStage(id, everyone) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStage(id, everyone);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
         * @summary Get deals in a stage
         * @param {number} id The ID of the stage
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
         * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getStageDeals(id, filter_id, user_id, everyone, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStageDeals(id, filter_id, user_id, everyone, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getStages(pipeline_id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStages(pipeline_id, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {number} id The ID of the stage
         * @param {UpdateStageRequest} [UpdateStageRequest]

         * @throws {RequiredError}
         */
        updateStage(id, UpdateStageRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateStage(id, UpdateStageRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StagesApi - factory interface
 * @export
 */
export const StagesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StagesApiFp(configuration);
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {StagesApiAddStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addStage(requestParameters = {}) {
            return localVarFp.addStage(requestParameters.AddStageRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteStage(requestParameters) {
            return localVarFp.deleteStage(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple stages as deleted.
         * @summary Delete multiple stages in bulk
         * @param {StagesApiDeleteStagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteStages(requestParameters) {
            return localVarFp.deleteStages(requestParameters.ids).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {StagesApiGetStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStage(requestParameters) {
            return localVarFp.getStage(requestParameters.id, requestParameters.everyone).then((request) => request(axios, basePath));
        },
        /**
         * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
         * @summary Get deals in a stage
         * @param {StagesApiGetStageDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStageDeals(requestParameters) {
            return localVarFp.getStageDeals(requestParameters.id, requestParameters.filter_id, requestParameters.user_id, requestParameters.everyone, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStages(requestParameters = {}) {
            return localVarFp.getStages(requestParameters.pipeline_id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateStage(requestParameters) {
            return localVarFp.updateStage(requestParameters.id, requestParameters.UpdateStageRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StagesApi - object-oriented interface
 * @export
 * @class StagesApi
 * @extends {BaseAPI}
 */
export class StagesApi extends BaseAPI {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    addStage(requestParameters = {}) {
        return StagesApiFp(this.configuration).addStage(requestParameters.AddStageRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    deleteStage(requestParameters) {
        return StagesApiFp(this.configuration).deleteStage(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {StagesApiDeleteStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    deleteStages(requestParameters) {
        return StagesApiFp(this.configuration).deleteStages(requestParameters.ids).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStage(requestParameters) {
        return StagesApiFp(this.configuration).getStage(requestParameters.id, requestParameters.everyone).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists deals in a specific stage. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a stage
     * @param {StagesApiGetStageDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStageDeals(requestParameters) {
        return StagesApiFp(this.configuration).getStageDeals(requestParameters.id, requestParameters.filter_id, requestParameters.user_id, requestParameters.everyone, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    getStages(requestParameters = {}) {
        return StagesApiFp(this.configuration).getStages(requestParameters.pipeline_id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    updateStage(requestParameters) {
        return StagesApiFp(this.configuration).updateStage(requestParameters.id, requestParameters.UpdateStageRequest).then((request) => request(this.axios, this.basePath));
    }
}
