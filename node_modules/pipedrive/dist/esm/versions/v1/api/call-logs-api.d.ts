/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddCallLogRequest } from '../models';
import { BaseResponse } from '../models';
import { GetCallLogResponse } from '../models';
import { GetCallLogsResponse } from '../models';
/**
 * CallLogsApi - axios parameter creator
 * @export
 */
export declare const CallLogsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new call log.
     * @summary Add a call log
     * @param {AddCallLogRequest} [AddCallLogRequest]

     * @throws {RequiredError}
     */
    addCallLog: (AddCallLogRequest?: AddCallLogRequest) => Promise<RequestArgs>;
    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @summary Attach an audio file to the call log
     * @param {string} id The ID received when you create the call log
     * @param {File} file Audio file supported by the HTML5 specification

     * @throws {RequiredError}
     */
    addCallLogAudioFile: (id: string, file: File) => Promise<RequestArgs>;
    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @summary Delete a call log
     * @param {string} id The ID received when you create the call log

     * @throws {RequiredError}
     */
    deleteCallLog: (id: string) => Promise<RequestArgs>;
    /**
     * Returns details of a specific call log.
     * @summary Get details of a call log
     * @param {string} id The ID received when you create the call log

     * @throws {RequiredError}
     */
    getCallLog: (id: string) => Promise<RequestArgs>;
    /**
     * Returns all call logs assigned to a particular user.
     * @summary Get all call logs assigned to a particular user
     * @param {number} [start] Pagination start
     * @param {number} [limit] For pagination, the limit of entries to be returned. The upper limit is 50.

     * @throws {RequiredError}
     */
    getUserCallLogs: (start?: number, limit?: number) => Promise<RequestArgs>;
};
/**
 * CallLogsApi - functional programming interface
 * @export
 */
export declare const CallLogsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new call log.
     * @summary Add a call log
     * @param {AddCallLogRequest} [AddCallLogRequest]

     * @throws {RequiredError}
     */
    addCallLog(AddCallLogRequest?: AddCallLogRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCallLogResponse>>;
    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @summary Attach an audio file to the call log
     * @param {string} id The ID received when you create the call log
     * @param {File} file Audio file supported by the HTML5 specification

     * @throws {RequiredError}
     */
    addCallLogAudioFile(id: string, file: File): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<BaseResponse>>;
    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @summary Delete a call log
     * @param {string} id The ID received when you create the call log

     * @throws {RequiredError}
     */
    deleteCallLog(id: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<BaseResponse>>;
    /**
     * Returns details of a specific call log.
     * @summary Get details of a call log
     * @param {string} id The ID received when you create the call log

     * @throws {RequiredError}
     */
    getCallLog(id: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCallLogResponse>>;
    /**
     * Returns all call logs assigned to a particular user.
     * @summary Get all call logs assigned to a particular user
     * @param {number} [start] Pagination start
     * @param {number} [limit] For pagination, the limit of entries to be returned. The upper limit is 50.

     * @throws {RequiredError}
     */
    getUserCallLogs(start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCallLogsResponse>>;
};
/**
 * CallLogsApi - factory interface
 * @export
 */
export declare const CallLogsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new call log.
     * @summary Add a call log
     * @param {CallLogsApiAddCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addCallLog(requestParameters?: CallLogsApiAddCallLogRequest): Promise<GetCallLogResponse>;
    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @summary Attach an audio file to the call log
     * @param {CallLogsApiAddCallLogAudioFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addCallLogAudioFile(requestParameters: CallLogsApiAddCallLogAudioFileRequest): Promise<BaseResponse>;
    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @summary Delete a call log
     * @param {CallLogsApiDeleteCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteCallLog(requestParameters: CallLogsApiDeleteCallLogRequest): Promise<BaseResponse>;
    /**
     * Returns details of a specific call log.
     * @summary Get details of a call log
     * @param {CallLogsApiGetCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getCallLog(requestParameters: CallLogsApiGetCallLogRequest): Promise<GetCallLogResponse>;
    /**
     * Returns all call logs assigned to a particular user.
     * @summary Get all call logs assigned to a particular user
     * @param {CallLogsApiGetUserCallLogsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getUserCallLogs(requestParameters?: CallLogsApiGetUserCallLogsRequest): Promise<GetCallLogsResponse>;
};
/**
 * Request parameters for addCallLog operation in CallLogsApi.
 * @export
 * @interface CallLogsApiAddCallLogRequest
 */
export interface CallLogsApiAddCallLogRequest {
    /**
     *
     * @type {AddCallLogRequest}
     * @memberof CallLogsApiAddCallLog
     */
    readonly AddCallLogRequest?: AddCallLogRequest;
}
/**
 * Request parameters for addCallLogAudioFile operation in CallLogsApi.
 * @export
 * @interface CallLogsApiAddCallLogAudioFileRequest
 */
export interface CallLogsApiAddCallLogAudioFileRequest {
    /**
     * The ID received when you create the call log
     * @type {string}
     * @memberof CallLogsApiAddCallLogAudioFile
     */
    readonly id: string;
    /**
     * Audio file supported by the HTML5 specification
     * @type {File}
     * @memberof CallLogsApiAddCallLogAudioFile
     */
    readonly file: File;
}
/**
 * Request parameters for deleteCallLog operation in CallLogsApi.
 * @export
 * @interface CallLogsApiDeleteCallLogRequest
 */
export interface CallLogsApiDeleteCallLogRequest {
    /**
     * The ID received when you create the call log
     * @type {string}
     * @memberof CallLogsApiDeleteCallLog
     */
    readonly id: string;
}
/**
 * Request parameters for getCallLog operation in CallLogsApi.
 * @export
 * @interface CallLogsApiGetCallLogRequest
 */
export interface CallLogsApiGetCallLogRequest {
    /**
     * The ID received when you create the call log
     * @type {string}
     * @memberof CallLogsApiGetCallLog
     */
    readonly id: string;
}
/**
 * Request parameters for getUserCallLogs operation in CallLogsApi.
 * @export
 * @interface CallLogsApiGetUserCallLogsRequest
 */
export interface CallLogsApiGetUserCallLogsRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof CallLogsApiGetUserCallLogs
     */
    readonly start?: number;
    /**
     * For pagination, the limit of entries to be returned. The upper limit is 50.
     * @type {number}
     * @memberof CallLogsApiGetUserCallLogs
     */
    readonly limit?: number;
}
/**
 * CallLogsApi - object-oriented interface
 * @export
 * @class CallLogsApi
 * @extends {BaseAPI}
 */
export declare class CallLogsApi extends BaseAPI {
    /**
     * Adds a new call log.
     * @summary Add a call log
     * @param {CallLogsApiAddCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    addCallLog(requestParameters?: CallLogsApiAddCallLogRequest): Promise<GetCallLogResponse>;
    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @summary Attach an audio file to the call log
     * @param {CallLogsApiAddCallLogAudioFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    addCallLogAudioFile(requestParameters: CallLogsApiAddCallLogAudioFileRequest): Promise<BaseResponse>;
    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @summary Delete a call log
     * @param {CallLogsApiDeleteCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    deleteCallLog(requestParameters: CallLogsApiDeleteCallLogRequest): Promise<BaseResponse>;
    /**
     * Returns details of a specific call log.
     * @summary Get details of a call log
     * @param {CallLogsApiGetCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    getCallLog(requestParameters: CallLogsApiGetCallLogRequest): Promise<GetCallLogResponse>;
    /**
     * Returns all call logs assigned to a particular user.
     * @summary Get all call logs assigned to a particular user
     * @param {CallLogsApiGetUserCallLogsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    getUserCallLogs(requestParameters?: CallLogsApiGetUserCallLogsRequest): Promise<GetCallLogsResponse>;
}
