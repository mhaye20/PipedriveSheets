/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddNewFollowerResponse } from '../models';
import { AddProductFollowerRequest } from '../models';
import { AddProductRequest } from '../models';
import { DeleteProductFollowerResponse } from '../models';
import { DeleteProductResponse } from '../models';
import { GetAssociatedDealsResponse } from '../models';
import { GetAssociatedProductFilesResponse } from '../models';
import { GetProductFollowersResponse } from '../models';
import { GetProductResponse } from '../models';
import { GetProductSearchResponse } from '../models';
import { GetProductsResponse1 } from '../models';
import { UpdateProductRequest } from '../models';
import { UpdateProductResponse } from '../models';
import { UserIds } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {AddProductRequest} [AddProductRequest]

     * @throws {RequiredError}
     */
    addProduct: (AddProductRequest?: AddProductRequest) => Promise<RequestArgs>;
    /**
     * Adds a follower to a product.
     * @summary Add a follower to a product
     * @param {number} id The ID of the product
     * @param {AddProductFollowerRequest} [AddProductFollowerRequest]

     * @throws {RequiredError}
     */
    addProductFollower: (id: number, AddProductFollowerRequest?: AddProductFollowerRequest) => Promise<RequestArgs>;
    /**
     * Marks a product as deleted. After 30 days, the product will be permanently deleted.
     * @summary Delete a product
     * @param {number} id The ID of the product

     * @throws {RequiredError}
     */
    deleteProduct: (id: number) => Promise<RequestArgs>;
    /**
     * Deletes a follower from a product.
     * @summary Delete a follower from a product
     * @param {number} id The ID of the product
     * @param {number} follower_id The ID of the relationship between the follower and the product

     * @throws {RequiredError}
     */
    deleteProductFollower: (id: number, follower_id: number) => Promise<RequestArgs>;
    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {number} id The ID of the product

     * @throws {RequiredError}
     */
    getProduct: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about deals that have a product attached to it.
     * @summary Get deals where a product is attached to
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

     * @throws {RequiredError}
     */
    getProductDeals: (id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted') => Promise<RequestArgs>;
    /**
     * Lists files associated with a product.
     * @summary List files attached to a product
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
     * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

     * @throws {RequiredError}
     */
    getProductFiles: (id: number, start?: number, limit?: number, sort?: string) => Promise<RequestArgs>;
    /**
     * Lists the followers of a product.
     * @summary List followers of a product
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getProductFollowers: (id: number, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Lists users permitted to access a product.
     * @summary List permitted users
     * @param {number} id The ID of the product

     * @throws {RequiredError}
     */
    getProductUsers: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {number} [user_id] If supplied, only products owned by the given user will be returned
     * @param {number} [filter_id] The ID of the filter to use
     * @param {Array<number>} [ids] An array of integers with the IDs of the products that should be returned in the response
     * @param {string} [first_char] If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
     * @param {boolean} [get_summary] If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getProducts: (user_id?: number, filter_id?: number, ids?: Array<number>, first_char?: string, get_summary?: boolean, start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {'product.price'} [include_fields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    searchProducts: (term: string, fields?: 'code' | 'custom_fields' | 'name', exact_match?: boolean, include_fields?: 'product.price', start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Updates product data.
     * @summary Update a product
     * @param {number} id The ID of the product
     * @param {UpdateProductRequest} [UpdateProductRequest]

     * @throws {RequiredError}
     */
    updateProduct: (id: number, UpdateProductRequest?: UpdateProductRequest) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {AddProductRequest} [AddProductRequest]

     * @throws {RequiredError}
     */
    addProduct(AddProductRequest?: AddProductRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductResponse>>;
    /**
     * Adds a follower to a product.
     * @summary Add a follower to a product
     * @param {number} id The ID of the product
     * @param {AddProductFollowerRequest} [AddProductFollowerRequest]

     * @throws {RequiredError}
     */
    addProductFollower(id: number, AddProductFollowerRequest?: AddProductFollowerRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddNewFollowerResponse>>;
    /**
     * Marks a product as deleted. After 30 days, the product will be permanently deleted.
     * @summary Delete a product
     * @param {number} id The ID of the product

     * @throws {RequiredError}
     */
    deleteProduct(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductResponse>>;
    /**
     * Deletes a follower from a product.
     * @summary Delete a follower from a product
     * @param {number} id The ID of the product
     * @param {number} follower_id The ID of the relationship between the follower and the product

     * @throws {RequiredError}
     */
    deleteProductFollower(id: number, follower_id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductFollowerResponse>>;
    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {number} id The ID of the product

     * @throws {RequiredError}
     */
    getProduct(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductResponse>>;
    /**
     * Returns data about deals that have a product attached to it.
     * @summary Get deals where a product is attached to
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

     * @throws {RequiredError}
     */
    getProductDeals(id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedDealsResponse>>;
    /**
     * Lists files associated with a product.
     * @summary List files attached to a product
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
     * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

     * @throws {RequiredError}
     */
    getProductFiles(id: number, start?: number, limit?: number, sort?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedProductFilesResponse>>;
    /**
     * Lists the followers of a product.
     * @summary List followers of a product
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getProductFollowers(id: number, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductFollowersResponse>>;
    /**
     * Lists users permitted to access a product.
     * @summary List permitted users
     * @param {number} id The ID of the product

     * @throws {RequiredError}
     */
    getProductUsers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>>;
    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {number} [user_id] If supplied, only products owned by the given user will be returned
     * @param {number} [filter_id] The ID of the filter to use
     * @param {Array<number>} [ids] An array of integers with the IDs of the products that should be returned in the response
     * @param {string} [first_char] If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
     * @param {boolean} [get_summary] If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getProducts(user_id?: number, filter_id?: number, ids?: Array<number>, first_char?: string, get_summary?: boolean, start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductsResponse1>>;
    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {'product.price'} [include_fields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    searchProducts(term: string, fields?: 'code' | 'custom_fields' | 'name', exact_match?: boolean, include_fields?: 'product.price', start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductSearchResponse>>;
    /**
     * Updates product data.
     * @summary Update a product
     * @param {number} id The ID of the product
     * @param {UpdateProductRequest} [UpdateProductRequest]

     * @throws {RequiredError}
     */
    updateProduct(id: number, UpdateProductRequest?: UpdateProductRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateProductResponse>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {ProductsApiAddProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addProduct(requestParameters?: ProductsApiAddProductRequest): Promise<GetProductResponse>;
    /**
     * Adds a follower to a product.
     * @summary Add a follower to a product
     * @param {ProductsApiAddProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addProductFollower(requestParameters: ProductsApiAddProductFollowerRequest): Promise<AddNewFollowerResponse>;
    /**
     * Marks a product as deleted. After 30 days, the product will be permanently deleted.
     * @summary Delete a product
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteProduct(requestParameters: ProductsApiDeleteProductRequest): Promise<DeleteProductResponse>;
    /**
     * Deletes a follower from a product.
     * @summary Delete a follower from a product
     * @param {ProductsApiDeleteProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteProductFollower(requestParameters: ProductsApiDeleteProductFollowerRequest): Promise<DeleteProductFollowerResponse>;
    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {ProductsApiGetProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProduct(requestParameters: ProductsApiGetProductRequest): Promise<GetProductResponse>;
    /**
     * Returns data about deals that have a product attached to it.
     * @summary Get deals where a product is attached to
     * @param {ProductsApiGetProductDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProductDeals(requestParameters: ProductsApiGetProductDealsRequest): Promise<GetAssociatedDealsResponse>;
    /**
     * Lists files associated with a product.
     * @summary List files attached to a product
     * @param {ProductsApiGetProductFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProductFiles(requestParameters: ProductsApiGetProductFilesRequest): Promise<GetAssociatedProductFilesResponse>;
    /**
     * Lists the followers of a product.
     * @summary List followers of a product
     * @param {ProductsApiGetProductFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProductFollowers(requestParameters: ProductsApiGetProductFollowersRequest): Promise<GetProductFollowersResponse>;
    /**
     * Lists users permitted to access a product.
     * @summary List permitted users
     * @param {ProductsApiGetProductUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProductUsers(requestParameters: ProductsApiGetProductUsersRequest): Promise<UserIds>;
    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProducts(requestParameters?: ProductsApiGetProductsRequest): Promise<GetProductsResponse1>;
    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    searchProducts(requestParameters: ProductsApiSearchProductsRequest): Promise<GetProductSearchResponse>;
    /**
     * Updates product data.
     * @summary Update a product
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateProduct(requestParameters: ProductsApiUpdateProductRequest): Promise<UpdateProductResponse>;
};
/**
 * Request parameters for addProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductRequest
 */
export interface ProductsApiAddProductRequest {
    /**
     *
     * @type {AddProductRequest}
     * @memberof ProductsApiAddProduct
     */
    readonly AddProductRequest?: AddProductRequest;
}
/**
 * Request parameters for addProductFollower operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductFollowerRequest
 */
export interface ProductsApiAddProductFollowerRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiAddProductFollower
     */
    readonly id: number;
    /**
     *
     * @type {AddProductFollowerRequest}
     * @memberof ProductsApiAddProductFollower
     */
    readonly AddProductFollowerRequest?: AddProductFollowerRequest;
}
/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProduct
     */
    readonly id: number;
}
/**
 * Request parameters for deleteProductFollower operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductFollowerRequest
 */
export interface ProductsApiDeleteProductFollowerRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProductFollower
     */
    readonly id: number;
    /**
     * The ID of the relationship between the follower and the product
     * @type {number}
     * @memberof ProductsApiDeleteProductFollower
     */
    readonly follower_id: number;
}
/**
 * Request parameters for getProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductRequest
 */
export interface ProductsApiGetProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProduct
     */
    readonly id: number;
}
/**
 * Request parameters for getProductDeals operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductDealsRequest
 */
export interface ProductsApiGetProductDealsRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductDeals
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProductDeals
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProductDeals
     */
    readonly limit?: number;
    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'}
     * @memberof ProductsApiGetProductDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted';
}
/**
 * Request parameters for getProductFiles operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductFilesRequest
 */
export interface ProductsApiGetProductFilesRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductFiles
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProductFiles
     */
    readonly start?: number;
    /**
     * Items shown per page. Please note that a maximum value of 100 is allowed.
     * @type {number}
     * @memberof ProductsApiGetProductFiles
     */
    readonly limit?: number;
    /**
     * Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;
     * @type {string}
     * @memberof ProductsApiGetProductFiles
     */
    readonly sort?: string;
}
/**
 * Request parameters for getProductFollowers operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductFollowersRequest
 */
export interface ProductsApiGetProductFollowersRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly id: number;
    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly limit?: number;
}
/**
 * Request parameters for getProductUsers operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductUsersRequest
 */
export interface ProductsApiGetProductUsersRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductUsers
     */
    readonly id: number;
}
/**
 * Request parameters for getProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductsRequest
 */
export interface ProductsApiGetProductsRequest {
    /**
     * If supplied, only products owned by the given user will be returned
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly user_id?: number;
    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly filter_id?: number;
    /**
     * An array of integers with the IDs of the products that should be returned in the response
     * @type {Array<number>}
     * @memberof ProductsApiGetProducts
     */
    readonly ids?: Array<number>;
    /**
     * If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly first_char?: string;
    /**
     * If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
     * @type {boolean}
     * @memberof ProductsApiGetProducts
     */
    readonly get_summary?: boolean;
    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly limit?: number;
}
/**
 * Request parameters for searchProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiSearchProductsRequest
 */
export interface ProductsApiSearchProductsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly term: string;
    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'code' | 'custom_fields' | 'name'}
     * @memberof ProductsApiSearchProducts
     */
    readonly fields?: 'code' | 'custom_fields' | 'name';
    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof ProductsApiSearchProducts
     */
    readonly exact_match?: boolean;
    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'product.price'}
     * @memberof ProductsApiSearchProducts
     */
    readonly include_fields?: 'product.price';
    /**
     * Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly limit?: number;
}
/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiUpdateProduct
     */
    readonly id: number;
    /**
     *
     * @type {UpdateProductRequest}
     * @memberof ProductsApiUpdateProduct
     */
    readonly UpdateProductRequest?: UpdateProductRequest;
}
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {ProductsApiAddProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    addProduct(requestParameters?: ProductsApiAddProductRequest): Promise<GetProductResponse>;
    /**
     * Adds a follower to a product.
     * @summary Add a follower to a product
     * @param {ProductsApiAddProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    addProductFollower(requestParameters: ProductsApiAddProductFollowerRequest): Promise<AddNewFollowerResponse>;
    /**
     * Marks a product as deleted. After 30 days, the product will be permanently deleted.
     * @summary Delete a product
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProduct(requestParameters: ProductsApiDeleteProductRequest): Promise<DeleteProductResponse>;
    /**
     * Deletes a follower from a product.
     * @summary Delete a follower from a product
     * @param {ProductsApiDeleteProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductFollower(requestParameters: ProductsApiDeleteProductFollowerRequest): Promise<DeleteProductFollowerResponse>;
    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {ProductsApiGetProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProduct(requestParameters: ProductsApiGetProductRequest): Promise<GetProductResponse>;
    /**
     * Returns data about deals that have a product attached to it.
     * @summary Get deals where a product is attached to
     * @param {ProductsApiGetProductDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductDeals(requestParameters: ProductsApiGetProductDealsRequest): Promise<GetAssociatedDealsResponse>;
    /**
     * Lists files associated with a product.
     * @summary List files attached to a product
     * @param {ProductsApiGetProductFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductFiles(requestParameters: ProductsApiGetProductFilesRequest): Promise<GetAssociatedProductFilesResponse>;
    /**
     * Lists the followers of a product.
     * @summary List followers of a product
     * @param {ProductsApiGetProductFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductFollowers(requestParameters: ProductsApiGetProductFollowersRequest): Promise<GetProductFollowersResponse>;
    /**
     * Lists users permitted to access a product.
     * @summary List permitted users
     * @param {ProductsApiGetProductUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductUsers(requestParameters: ProductsApiGetProductUsersRequest): Promise<UserIds>;
    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProducts(requestParameters?: ProductsApiGetProductsRequest): Promise<GetProductsResponse1>;
    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    searchProducts(requestParameters: ProductsApiSearchProductsRequest): Promise<GetProductSearchResponse>;
    /**
     * Updates product data.
     * @summary Update a product
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    updateProduct(requestParameters: ProductsApiUpdateProductRequest): Promise<UpdateProductResponse>;
}
