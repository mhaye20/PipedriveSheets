/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ActivityTypesApi - axios parameter creator
 * @export
 */
export const ActivityTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new activity type.
         * @summary Add new activity type
         * @param {AddActivityTypeRequest} [AddActivityTypeRequest]

         * @throws {RequiredError}
         */
        addActivityType: (AddActivityTypeRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/activityTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddActivityTypeRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks an activity type as deleted.
         * @summary Delete an activity type
         * @param {number} id The ID of the activity type

         * @throws {RequiredError}
         */
        deleteActivityType: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteActivityType', 'id', id);
            const localVarPath = `/activityTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks multiple activity types as deleted.
         * @summary Delete multiple activity types in bulk
         * @param {string} ids The comma-separated activity type IDs

         * @throws {RequiredError}
         */
        deleteActivityTypes: (ids) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteActivityTypes', 'ids', ids);
            const localVarPath = `/activityTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all activity types.
         * @summary Get all activity types

         * @throws {RequiredError}
         */
        getActivityTypes: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/activityTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full", "admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an activity type.
         * @summary Update an activity type
         * @param {number} id The ID of the activity type
         * @param {UpdateActivityTypeRequest} [UpdateActivityTypeRequest]

         * @throws {RequiredError}
         */
        updateActivityType: (id, UpdateActivityTypeRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateActivityType', 'id', id);
            const localVarPath = `/activityTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateActivityTypeRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ActivityTypesApi - functional programming interface
 * @export
 */
export const ActivityTypesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ActivityTypesApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new activity type.
         * @summary Add new activity type
         * @param {AddActivityTypeRequest} [AddActivityTypeRequest]

         * @throws {RequiredError}
         */
        addActivityType(AddActivityTypeRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addActivityType(AddActivityTypeRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks an activity type as deleted.
         * @summary Delete an activity type
         * @param {number} id The ID of the activity type

         * @throws {RequiredError}
         */
        deleteActivityType(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteActivityType(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks multiple activity types as deleted.
         * @summary Delete multiple activity types in bulk
         * @param {string} ids The comma-separated activity type IDs

         * @throws {RequiredError}
         */
        deleteActivityTypes(ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteActivityTypes(ids);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all activity types.
         * @summary Get all activity types

         * @throws {RequiredError}
         */
        getActivityTypes() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getActivityTypes();
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates an activity type.
         * @summary Update an activity type
         * @param {number} id The ID of the activity type
         * @param {UpdateActivityTypeRequest} [UpdateActivityTypeRequest]

         * @throws {RequiredError}
         */
        updateActivityType(id, UpdateActivityTypeRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateActivityType(id, UpdateActivityTypeRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ActivityTypesApi - factory interface
 * @export
 */
export const ActivityTypesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ActivityTypesApiFp(configuration);
    return {
        /**
         * Adds a new activity type.
         * @summary Add new activity type
         * @param {ActivityTypesApiAddActivityTypeRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addActivityType(requestParameters = {}) {
            return localVarFp.addActivityType(requestParameters.AddActivityTypeRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks an activity type as deleted.
         * @summary Delete an activity type
         * @param {ActivityTypesApiDeleteActivityTypeRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteActivityType(requestParameters) {
            return localVarFp.deleteActivityType(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple activity types as deleted.
         * @summary Delete multiple activity types in bulk
         * @param {ActivityTypesApiDeleteActivityTypesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteActivityTypes(requestParameters) {
            return localVarFp.deleteActivityTypes(requestParameters.ids).then((request) => request(axios, basePath));
        },
        /**
         * Returns all activity types.
         * @summary Get all activity types

         * @throws {RequiredError}
         */
        getActivityTypes() {
            return localVarFp.getActivityTypes().then((request) => request(axios, basePath));
        },
        /**
         * Updates an activity type.
         * @summary Update an activity type
         * @param {ActivityTypesApiUpdateActivityTypeRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateActivityType(requestParameters) {
            return localVarFp.updateActivityType(requestParameters.id, requestParameters.UpdateActivityTypeRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ActivityTypesApi - object-oriented interface
 * @export
 * @class ActivityTypesApi
 * @extends {BaseAPI}
 */
export class ActivityTypesApi extends BaseAPI {
    /**
     * Adds a new activity type.
     * @summary Add new activity type
     * @param {ActivityTypesApiAddActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    addActivityType(requestParameters = {}) {
        return ActivityTypesApiFp(this.configuration).addActivityType(requestParameters.AddActivityTypeRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks an activity type as deleted.
     * @summary Delete an activity type
     * @param {ActivityTypesApiDeleteActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    deleteActivityType(requestParameters) {
        return ActivityTypesApiFp(this.configuration).deleteActivityType(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks multiple activity types as deleted.
     * @summary Delete multiple activity types in bulk
     * @param {ActivityTypesApiDeleteActivityTypesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    deleteActivityTypes(requestParameters) {
        return ActivityTypesApiFp(this.configuration).deleteActivityTypes(requestParameters.ids).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all activity types.
     * @summary Get all activity types

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    getActivityTypes() {
        return ActivityTypesApiFp(this.configuration).getActivityTypes().then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an activity type.
     * @summary Update an activity type
     * @param {ActivityTypesApiUpdateActivityTypeRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivityTypesApi
     */
    updateActivityType(requestParameters) {
        return ActivityTypesApiFp(this.configuration).updateActivityType(requestParameters.id, requestParameters.UpdateActivityTypeRequest).then((request) => request(this.axios, this.basePath));
    }
}
