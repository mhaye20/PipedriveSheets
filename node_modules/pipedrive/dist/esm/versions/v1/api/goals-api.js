/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
         * @summary Add a new goal
         * @param {AddGoalRequest} [AddGoalRequest]

         * @throws {RequiredError}
         */
        addGoal: (AddGoalRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["goals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddGoalRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a goal as deleted.
         * @summary Delete existing goal
         * @param {string} id The ID of the goal

         * @throws {RequiredError}
         */
        deleteGoal: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGoal', 'id', id);
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["goals:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the progress of a goal for the specified period.
         * @summary Get result of a goal
         * @param {string} id The ID of the goal that the results are looked for
         * @param {string} period_start The start date of the period for which to find the goal\&#39;s progress. Format: YYYY-MM-DD. This date must be the same or after the goal duration start date.
         * @param {string} period_end The end date of the period for which to find the goal\&#39;s progress. Format: YYYY-MM-DD. This date must be the same or before the goal duration end date.

         * @throws {RequiredError}
         */
        getGoalResult: (id, period_start, period_end) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGoalResult', 'id', id);
            // verify required parameter 'period_start' is not null or undefined
            assertParamExists('getGoalResult', 'period_start', period_start);
            // verify required parameter 'period_end' is not null or undefined
            assertParamExists('getGoalResult', 'period_end', period_end);
            const localVarPath = `/goals/{id}/results`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["goals:read", "goals:full"], configuration);
            if (period_start !== undefined) {
                localVarQueryParameter['period.start'] = (period_start instanceof Date) ?
                    period_start.toISOString().substr(0, 10) :
                    period_start;
            }
            if (period_end !== undefined) {
                localVarQueryParameter['period.end'] = (period_end instanceof Date) ?
                    period_end.toISOString().substr(0, 10) :
                    period_end;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about goals based on criteria. For searching, append `{searchField}={searchValue}` to the URL, where `searchField` can be any one of the lowest-level fields in dot-notation (e.g. `type.params.pipeline_id`; `title`). `searchValue` should be the value you are looking for on that field. Additionally, `is_active=<true|false>` can be provided to search for only active/inactive goals. When providing `period.start`, `period.end` must also be provided and vice versa.
         * @summary Find goals
         * @param {'deals_won' | 'deals_progressed' | 'activities_completed' | 'activities_added' | 'deals_started'} [type_name] The type of the goal. If provided, everyone\&#39;s goals will be returned.
         * @param {string} [title] The title of the goal
         * @param {boolean} [is_active] Whether the goal is active or not
         * @param {number} [assignee_id] The ID of the user who\&#39;s goal to fetch. When omitted, only your goals will be returned.
         * @param {'person' | 'company' | 'team'} [assignee_type] The type of the goal\&#39;s assignee. If provided, everyone\&#39;s goals will be returned.
         * @param {number} [expected_outcome_target] The numeric value of the outcome. If provided, everyone\&#39;s goals will be returned.
         * @param {'quantity' | 'sum'} [expected_outcome_tracking_metric] The tracking metric of the expected outcome of the goal. If provided, everyone\&#39;s goals will be returned.
         * @param {number} [expected_outcome_currency_id] The numeric ID of the goal\&#39;s currency. Only applicable to goals with &#x60;expected_outcome.tracking_metric&#x60; with value &#x60;sum&#x60;. If provided, everyone\&#39;s goals will be returned.
         * @param {Array<number>} [type_params_pipeline_id] An array of pipeline IDs or &#x60;null&#x60; for all pipelines. If provided, everyone\&#39;s goals will be returned.
         * @param {number} [type_params_stage_id] The ID of the stage. Applicable to only &#x60;deals_progressed&#x60; type of goals. If provided, everyone\&#39;s goals will be returned.
         * @param {Array<number>} [type_params_activity_type_id] An array of IDs or &#x60;null&#x60; for all activity types. Only applicable for &#x60;activities_completed&#x60; and/or &#x60;activities_added&#x60; types of goals. If provided, everyone\&#39;s goals will be returned.
         * @param {string} [period_start] The start date of the period for which to find goals. Date in format of YYYY-MM-DD. When &#x60;period.start&#x60; is provided, &#x60;period.end&#x60; must be provided too.
         * @param {string} [period_end] The end date of the period for which to find goals. Date in format of YYYY-MM-DD.

         * @throws {RequiredError}
         */
        getGoals: (type_name, title, is_active, assignee_id, assignee_type, expected_outcome_target, expected_outcome_tracking_metric, expected_outcome_currency_id, type_params_pipeline_id, type_params_stage_id, type_params_activity_type_id, period_start, period_end) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/goals/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["goals:read", "goals:full"], configuration);
            if (type_name !== undefined) {
                localVarQueryParameter['type.name'] = type_name;
            }
            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }
            if (is_active !== undefined) {
                localVarQueryParameter['is_active'] = is_active;
            }
            if (assignee_id !== undefined) {
                localVarQueryParameter['assignee.id'] = assignee_id;
            }
            if (assignee_type !== undefined) {
                localVarQueryParameter['assignee.type'] = assignee_type;
            }
            if (expected_outcome_target !== undefined) {
                localVarQueryParameter['expected_outcome.target'] = expected_outcome_target;
            }
            if (expected_outcome_tracking_metric !== undefined) {
                localVarQueryParameter['expected_outcome.tracking_metric'] = expected_outcome_tracking_metric;
            }
            if (expected_outcome_currency_id !== undefined) {
                localVarQueryParameter['expected_outcome.currency_id'] = expected_outcome_currency_id;
            }
            if (type_params_pipeline_id) {
                localVarQueryParameter['type.params.pipeline_id'] = type_params_pipeline_id;
            }
            if (type_params_stage_id !== undefined) {
                localVarQueryParameter['type.params.stage_id'] = type_params_stage_id;
            }
            if (type_params_activity_type_id) {
                localVarQueryParameter['type.params.activity_type_id'] = type_params_activity_type_id;
            }
            if (period_start !== undefined) {
                localVarQueryParameter['period.start'] = (period_start instanceof Date) ?
                    period_start.toISOString().substr(0, 10) :
                    period_start;
            }
            if (period_end !== undefined) {
                localVarQueryParameter['period.end'] = (period_end instanceof Date) ?
                    period_end.toISOString().substr(0, 10) :
                    period_end;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an existing goal.
         * @summary Update existing goal
         * @param {string} id The ID of the goal
         * @param {BasicGoalRequest} [BasicGoalRequest]

         * @throws {RequiredError}
         */
        updateGoal: (id, BasicGoalRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGoal', 'id', id);
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["goals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(BasicGoalRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function (configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
         * @summary Add a new goal
         * @param {AddGoalRequest} [AddGoalRequest]

         * @throws {RequiredError}
         */
        addGoal(AddGoalRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addGoal(AddGoalRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a goal as deleted.
         * @summary Delete existing goal
         * @param {string} id The ID of the goal

         * @throws {RequiredError}
         */
        deleteGoal(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGoal(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Gets the progress of a goal for the specified period.
         * @summary Get result of a goal
         * @param {string} id The ID of the goal that the results are looked for
         * @param {string} period_start The start date of the period for which to find the goal\&#39;s progress. Format: YYYY-MM-DD. This date must be the same or after the goal duration start date.
         * @param {string} period_end The end date of the period for which to find the goal\&#39;s progress. Format: YYYY-MM-DD. This date must be the same or before the goal duration end date.

         * @throws {RequiredError}
         */
        getGoalResult(id, period_start, period_end) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGoalResult(id, period_start, period_end);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about goals based on criteria. For searching, append `{searchField}={searchValue}` to the URL, where `searchField` can be any one of the lowest-level fields in dot-notation (e.g. `type.params.pipeline_id`; `title`). `searchValue` should be the value you are looking for on that field. Additionally, `is_active=<true|false>` can be provided to search for only active/inactive goals. When providing `period.start`, `period.end` must also be provided and vice versa.
         * @summary Find goals
         * @param {'deals_won' | 'deals_progressed' | 'activities_completed' | 'activities_added' | 'deals_started'} [type_name] The type of the goal. If provided, everyone\&#39;s goals will be returned.
         * @param {string} [title] The title of the goal
         * @param {boolean} [is_active] Whether the goal is active or not
         * @param {number} [assignee_id] The ID of the user who\&#39;s goal to fetch. When omitted, only your goals will be returned.
         * @param {'person' | 'company' | 'team'} [assignee_type] The type of the goal\&#39;s assignee. If provided, everyone\&#39;s goals will be returned.
         * @param {number} [expected_outcome_target] The numeric value of the outcome. If provided, everyone\&#39;s goals will be returned.
         * @param {'quantity' | 'sum'} [expected_outcome_tracking_metric] The tracking metric of the expected outcome of the goal. If provided, everyone\&#39;s goals will be returned.
         * @param {number} [expected_outcome_currency_id] The numeric ID of the goal\&#39;s currency. Only applicable to goals with &#x60;expected_outcome.tracking_metric&#x60; with value &#x60;sum&#x60;. If provided, everyone\&#39;s goals will be returned.
         * @param {Array<number>} [type_params_pipeline_id] An array of pipeline IDs or &#x60;null&#x60; for all pipelines. If provided, everyone\&#39;s goals will be returned.
         * @param {number} [type_params_stage_id] The ID of the stage. Applicable to only &#x60;deals_progressed&#x60; type of goals. If provided, everyone\&#39;s goals will be returned.
         * @param {Array<number>} [type_params_activity_type_id] An array of IDs or &#x60;null&#x60; for all activity types. Only applicable for &#x60;activities_completed&#x60; and/or &#x60;activities_added&#x60; types of goals. If provided, everyone\&#39;s goals will be returned.
         * @param {string} [period_start] The start date of the period for which to find goals. Date in format of YYYY-MM-DD. When &#x60;period.start&#x60; is provided, &#x60;period.end&#x60; must be provided too.
         * @param {string} [period_end] The end date of the period for which to find goals. Date in format of YYYY-MM-DD.

         * @throws {RequiredError}
         */
        getGoals(type_name, title, is_active, assignee_id, assignee_type, expected_outcome_target, expected_outcome_tracking_metric, expected_outcome_currency_id, type_params_pipeline_id, type_params_stage_id, type_params_activity_type_id, period_start, period_end) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGoals(type_name, title, is_active, assignee_id, assignee_type, expected_outcome_target, expected_outcome_tracking_metric, expected_outcome_currency_id, type_params_pipeline_id, type_params_stage_id, type_params_activity_type_id, period_start, period_end);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates an existing goal.
         * @summary Update existing goal
         * @param {string} id The ID of the goal
         * @param {BasicGoalRequest} [BasicGoalRequest]

         * @throws {RequiredError}
         */
        updateGoal(id, BasicGoalRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateGoal(id, BasicGoalRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = GoalsApiFp(configuration);
    return {
        /**
         * Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
         * @summary Add a new goal
         * @param {GoalsApiAddGoalRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addGoal(requestParameters = {}) {
            return localVarFp.addGoal(requestParameters.AddGoalRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a goal as deleted.
         * @summary Delete existing goal
         * @param {GoalsApiDeleteGoalRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteGoal(requestParameters) {
            return localVarFp.deleteGoal(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Gets the progress of a goal for the specified period.
         * @summary Get result of a goal
         * @param {GoalsApiGetGoalResultRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getGoalResult(requestParameters) {
            return localVarFp.getGoalResult(requestParameters.id, requestParameters.period_start, requestParameters.period_end).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about goals based on criteria. For searching, append `{searchField}={searchValue}` to the URL, where `searchField` can be any one of the lowest-level fields in dot-notation (e.g. `type.params.pipeline_id`; `title`). `searchValue` should be the value you are looking for on that field. Additionally, `is_active=<true|false>` can be provided to search for only active/inactive goals. When providing `period.start`, `period.end` must also be provided and vice versa.
         * @summary Find goals
         * @param {GoalsApiGetGoalsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getGoals(requestParameters = {}) {
            return localVarFp.getGoals(requestParameters.type_name, requestParameters.title, requestParameters.is_active, requestParameters.assignee_id, requestParameters.assignee_type, requestParameters.expected_outcome_target, requestParameters.expected_outcome_tracking_metric, requestParameters.expected_outcome_currency_id, requestParameters.type_params_pipeline_id, requestParameters.type_params_stage_id, requestParameters.type_params_activity_type_id, requestParameters.period_start, requestParameters.period_end).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing goal.
         * @summary Update existing goal
         * @param {GoalsApiUpdateGoalRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateGoal(requestParameters) {
            return localVarFp.updateGoal(requestParameters.id, requestParameters.BasicGoalRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GoalsApi - object-oriented interface
 * @export
 * @class GoalsApi
 * @extends {BaseAPI}
 */
export class GoalsApi extends BaseAPI {
    /**
     * Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
     * @summary Add a new goal
     * @param {GoalsApiAddGoalRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    addGoal(requestParameters = {}) {
        return GoalsApiFp(this.configuration).addGoal(requestParameters.AddGoalRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a goal as deleted.
     * @summary Delete existing goal
     * @param {GoalsApiDeleteGoalRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    deleteGoal(requestParameters) {
        return GoalsApiFp(this.configuration).deleteGoal(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the progress of a goal for the specified period.
     * @summary Get result of a goal
     * @param {GoalsApiGetGoalResultRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    getGoalResult(requestParameters) {
        return GoalsApiFp(this.configuration).getGoalResult(requestParameters.id, requestParameters.period_start, requestParameters.period_end).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about goals based on criteria. For searching, append `{searchField}={searchValue}` to the URL, where `searchField` can be any one of the lowest-level fields in dot-notation (e.g. `type.params.pipeline_id`; `title`). `searchValue` should be the value you are looking for on that field. Additionally, `is_active=<true|false>` can be provided to search for only active/inactive goals. When providing `period.start`, `period.end` must also be provided and vice versa.
     * @summary Find goals
     * @param {GoalsApiGetGoalsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    getGoals(requestParameters = {}) {
        return GoalsApiFp(this.configuration).getGoals(requestParameters.type_name, requestParameters.title, requestParameters.is_active, requestParameters.assignee_id, requestParameters.assignee_type, requestParameters.expected_outcome_target, requestParameters.expected_outcome_tracking_metric, requestParameters.expected_outcome_currency_id, requestParameters.type_params_pipeline_id, requestParameters.type_params_stage_id, requestParameters.type_params_activity_type_id, requestParameters.period_start, requestParameters.period_end).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing goal.
     * @summary Update existing goal
     * @param {GoalsApiUpdateGoalRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    updateGoal(requestParameters) {
        return GoalsApiFp(this.configuration).updateGoal(requestParameters.id, requestParameters.BasicGoalRequest).then((request) => request(this.axios, this.basePath));
    }
}
