/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new recurring subscription.
         * @summary Add a recurring subscription
         * @param {AddRecurringSubscriptionRequest} [AddRecurringSubscriptionRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        addRecurringSubscription: (AddRecurringSubscriptionRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/subscriptions/recurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddRecurringSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a new installment subscription.
         * @summary Add an installment subscription
         * @param {AddSubscriptionInstallmentRequest} [AddSubscriptionInstallmentRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        addSubscriptionInstallment: (AddSubscriptionInstallmentRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/subscriptions/installment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddSubscriptionInstallmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Cancels a recurring subscription.
         * @summary Cancel a recurring subscription
         * @param {number} id The ID of the subscription
         * @param {CancelRecurringSubscriptionRequest} [CancelRecurringSubscriptionRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        cancelRecurringSubscription: (id, CancelRecurringSubscriptionRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelRecurringSubscription', 'id', id);
            const localVarPath = `/subscriptions/recurring/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(CancelRecurringSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks an installment or a recurring subscription as deleted.
         * @summary Delete a subscription
         * @param {number} id The ID of the subscription
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSubscription: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSubscription', 'id', id);
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details of an installment or a recurring subscription by the deal ID.
         * @summary Find subscription by deal
         * @param {number} dealId The ID of the deal
         * @deprecated
         * @throws {RequiredError}
         */
        findSubscriptionByDeal: (dealId) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dealId' is not null or undefined
            assertParamExists('findSubscriptionByDeal', 'dealId', dealId);
            const localVarPath = `/subscriptions/find/{dealId}`
                .replace(`{${"dealId"}}`, encodeURIComponent(String(dealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details of an installment or a recurring subscription.
         * @summary Get details of a subscription
         * @param {number} id The ID of the subscription
         * @deprecated
         * @throws {RequiredError}
         */
        getSubscription: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscription', 'id', id);
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all payments of an installment or recurring subscription.
         * @summary Get all payments of a subscription
         * @param {number} id The ID of the subscription
         * @deprecated
         * @throws {RequiredError}
         */
        getSubscriptionPayments: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscriptionPayments', 'id', id);
            const localVarPath = `/subscriptions/{id}/payments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a recurring subscription.
         * @summary Update a recurring subscription
         * @param {number} id The ID of the subscription
         * @param {UpdateRecurringSubscriptionRequest} [UpdateRecurringSubscriptionRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        updateRecurringSubscription: (id, UpdateRecurringSubscriptionRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRecurringSubscription', 'id', id);
            const localVarPath = `/subscriptions/recurring/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateRecurringSubscriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an installment subscription.
         * @summary Update an installment subscription
         * @param {number} id The ID of the subscription
         * @param {UpdateSubscriptionInstallmentRequest} [UpdateSubscriptionInstallmentRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        updateSubscriptionInstallment: (id, UpdateSubscriptionInstallmentRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSubscriptionInstallment', 'id', id);
            const localVarPath = `/subscriptions/installment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateSubscriptionInstallmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new recurring subscription.
         * @summary Add a recurring subscription
         * @param {AddRecurringSubscriptionRequest} [AddRecurringSubscriptionRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        addRecurringSubscription(AddRecurringSubscriptionRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addRecurringSubscription(AddRecurringSubscriptionRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Adds a new installment subscription.
         * @summary Add an installment subscription
         * @param {AddSubscriptionInstallmentRequest} [AddSubscriptionInstallmentRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        addSubscriptionInstallment(AddSubscriptionInstallmentRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addSubscriptionInstallment(AddSubscriptionInstallmentRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Cancels a recurring subscription.
         * @summary Cancel a recurring subscription
         * @param {number} id The ID of the subscription
         * @param {CancelRecurringSubscriptionRequest} [CancelRecurringSubscriptionRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        cancelRecurringSubscription(id, CancelRecurringSubscriptionRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelRecurringSubscription(id, CancelRecurringSubscriptionRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks an installment or a recurring subscription as deleted.
         * @summary Delete a subscription
         * @param {number} id The ID of the subscription
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSubscription(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSubscription(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns details of an installment or a recurring subscription by the deal ID.
         * @summary Find subscription by deal
         * @param {number} dealId The ID of the deal
         * @deprecated
         * @throws {RequiredError}
         */
        findSubscriptionByDeal(dealId) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findSubscriptionByDeal(dealId);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns details of an installment or a recurring subscription.
         * @summary Get details of a subscription
         * @param {number} id The ID of the subscription
         * @deprecated
         * @throws {RequiredError}
         */
        getSubscription(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSubscription(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all payments of an installment or recurring subscription.
         * @summary Get all payments of a subscription
         * @param {number} id The ID of the subscription
         * @deprecated
         * @throws {RequiredError}
         */
        getSubscriptionPayments(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSubscriptionPayments(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates a recurring subscription.
         * @summary Update a recurring subscription
         * @param {number} id The ID of the subscription
         * @param {UpdateRecurringSubscriptionRequest} [UpdateRecurringSubscriptionRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        updateRecurringSubscription(id, UpdateRecurringSubscriptionRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRecurringSubscription(id, UpdateRecurringSubscriptionRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates an installment subscription.
         * @summary Update an installment subscription
         * @param {number} id The ID of the subscription
         * @param {UpdateSubscriptionInstallmentRequest} [UpdateSubscriptionInstallmentRequest]
         * @deprecated
         * @throws {RequiredError}
         */
        updateSubscriptionInstallment(id, UpdateSubscriptionInstallmentRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateSubscriptionInstallment(id, UpdateSubscriptionInstallmentRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SubscriptionsApiFp(configuration);
    return {
        /**
         * Adds a new recurring subscription.
         * @summary Add a recurring subscription
         * @param {SubscriptionsApiAddRecurringSubscriptionRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addRecurringSubscription(requestParameters = {}) {
            return localVarFp.addRecurringSubscription(requestParameters.AddRecurringSubscriptionRequest).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new installment subscription.
         * @summary Add an installment subscription
         * @param {SubscriptionsApiAddSubscriptionInstallmentRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addSubscriptionInstallment(requestParameters = {}) {
            return localVarFp.addSubscriptionInstallment(requestParameters.AddSubscriptionInstallmentRequest).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a recurring subscription.
         * @summary Cancel a recurring subscription
         * @param {SubscriptionsApiCancelRecurringSubscriptionRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        cancelRecurringSubscription(requestParameters) {
            return localVarFp.cancelRecurringSubscription(requestParameters.id, requestParameters.CancelRecurringSubscriptionRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks an installment or a recurring subscription as deleted.
         * @summary Delete a subscription
         * @param {SubscriptionsApiDeleteSubscriptionRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSubscription(requestParameters) {
            return localVarFp.deleteSubscription(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of an installment or a recurring subscription by the deal ID.
         * @summary Find subscription by deal
         * @param {SubscriptionsApiFindSubscriptionByDealRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        findSubscriptionByDeal(requestParameters) {
            return localVarFp.findSubscriptionByDeal(requestParameters.dealId).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of an installment or a recurring subscription.
         * @summary Get details of a subscription
         * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getSubscription(requestParameters) {
            return localVarFp.getSubscription(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all payments of an installment or recurring subscription.
         * @summary Get all payments of a subscription
         * @param {SubscriptionsApiGetSubscriptionPaymentsRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getSubscriptionPayments(requestParameters) {
            return localVarFp.getSubscriptionPayments(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Updates a recurring subscription.
         * @summary Update a recurring subscription
         * @param {SubscriptionsApiUpdateRecurringSubscriptionRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        updateRecurringSubscription(requestParameters) {
            return localVarFp.updateRecurringSubscription(requestParameters.id, requestParameters.UpdateRecurringSubscriptionRequest).then((request) => request(axios, basePath));
        },
        /**
         * Updates an installment subscription.
         * @summary Update an installment subscription
         * @param {SubscriptionsApiUpdateSubscriptionInstallmentRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        updateSubscriptionInstallment(requestParameters) {
            return localVarFp.updateSubscriptionInstallment(requestParameters.id, requestParameters.UpdateSubscriptionInstallmentRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * Adds a new recurring subscription.
     * @summary Add a recurring subscription
     * @param {SubscriptionsApiAddRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    addRecurringSubscription(requestParameters = {}) {
        return SubscriptionsApiFp(this.configuration).addRecurringSubscription(requestParameters.AddRecurringSubscriptionRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a new installment subscription.
     * @summary Add an installment subscription
     * @param {SubscriptionsApiAddSubscriptionInstallmentRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    addSubscriptionInstallment(requestParameters = {}) {
        return SubscriptionsApiFp(this.configuration).addSubscriptionInstallment(requestParameters.AddSubscriptionInstallmentRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels a recurring subscription.
     * @summary Cancel a recurring subscription
     * @param {SubscriptionsApiCancelRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    cancelRecurringSubscription(requestParameters) {
        return SubscriptionsApiFp(this.configuration).cancelRecurringSubscription(requestParameters.id, requestParameters.CancelRecurringSubscriptionRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks an installment or a recurring subscription as deleted.
     * @summary Delete a subscription
     * @param {SubscriptionsApiDeleteSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    deleteSubscription(requestParameters) {
        return SubscriptionsApiFp(this.configuration).deleteSubscription(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * @summary Find subscription by deal
     * @param {SubscriptionsApiFindSubscriptionByDealRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    findSubscriptionByDeal(requestParameters) {
        return SubscriptionsApiFp(this.configuration).findSubscriptionByDeal(requestParameters.dealId).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details of an installment or a recurring subscription.
     * @summary Get details of a subscription
     * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    getSubscription(requestParameters) {
        return SubscriptionsApiFp(this.configuration).getSubscription(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all payments of an installment or recurring subscription.
     * @summary Get all payments of a subscription
     * @param {SubscriptionsApiGetSubscriptionPaymentsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    getSubscriptionPayments(requestParameters) {
        return SubscriptionsApiFp(this.configuration).getSubscriptionPayments(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a recurring subscription.
     * @summary Update a recurring subscription
     * @param {SubscriptionsApiUpdateRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    updateRecurringSubscription(requestParameters) {
        return SubscriptionsApiFp(this.configuration).updateRecurringSubscription(requestParameters.id, requestParameters.UpdateRecurringSubscriptionRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an installment subscription.
     * @summary Update an installment subscription
     * @param {SubscriptionsApiUpdateSubscriptionInstallmentRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    updateSubscriptionInstallment(requestParameters) {
        return SubscriptionsApiFp(this.configuration).updateSubscriptionInstallment(requestParameters.id, requestParameters.UpdateSubscriptionInstallmentRequest).then((request) => request(this.axios, this.basePath));
    }
}
