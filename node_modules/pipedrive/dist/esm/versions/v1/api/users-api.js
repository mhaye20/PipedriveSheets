/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new user to the company, returns the ID upon success.
         * @summary Add a new user
         * @param {AddUserRequest} [AddUserRequest]

         * @throws {RequiredError}
         */
        addUser: (AddUserRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddUserRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Finds users by their name.
         * @summary Find users by name
         * @param {string} term The search term to look for
         * @param {0 | 1} [search_by_email] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.

         * @throws {RequiredError}
         */
        findUsersByName: (term, search_by_email) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('findUsersByName', 'term', term);
            const localVarPath = `/users/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }
            if (search_by_email !== undefined) {
                localVarQueryParameter['search_by_email'] = search_by_email;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
         * @summary Get current user data

         * @throws {RequiredError}
         */
        getCurrentUser: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["base"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific user within the company.
         * @summary Get one user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUser: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id);
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists the followers of a specific user.
         * @summary List followers of a user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserFollowers: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserFollowers', 'id', id);
            const localVarPath = `/users/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists aggregated permissions over all assigned permission sets for a user.
         * @summary List user permissions
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserPermissions: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserPermissions', 'id', id);
            const localVarPath = `/users/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists role assignments for a user.
         * @summary List role assignments
         * @param {number} id The ID of the user
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getUserRoleAssignments: (id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserRoleAssignments', 'id', id);
            const localVarPath = `/users/{id}/roleAssignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists the settings of user\'s assigned role.
         * @summary List user role settings
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserRoleSettings: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserRoleSettings', 'id', id);
            const localVarPath = `/users/{id}/roleSettings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all users within the company.
         * @summary Get all users

         * @throws {RequiredError}
         */
        getUsers: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a user. Currently, only `active_flag` can be updated.
         * @summary Update user details
         * @param {number} id The ID of the user
         * @param {UpdateUserRequest} [UpdateUserRequest]

         * @throws {RequiredError}
         */
        updateUser: (id, UpdateUserRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id);
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateUserRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new user to the company, returns the ID upon success.
         * @summary Add a new user
         * @param {AddUserRequest} [AddUserRequest]

         * @throws {RequiredError}
         */
        addUser(AddUserRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addUser(AddUserRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Finds users by their name.
         * @summary Find users by name
         * @param {string} term The search term to look for
         * @param {0 | 1} [search_by_email] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.

         * @throws {RequiredError}
         */
        findUsersByName(term, search_by_email) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findUsersByName(term, search_by_email);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
         * @summary Get current user data

         * @throws {RequiredError}
         */
        getCurrentUser() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCurrentUser();
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific user within the company.
         * @summary Get one user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUser(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUser(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists the followers of a specific user.
         * @summary List followers of a user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserFollowers(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserFollowers(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists aggregated permissions over all assigned permission sets for a user.
         * @summary List user permissions
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserPermissions(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserPermissions(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists role assignments for a user.
         * @summary List role assignments
         * @param {number} id The ID of the user
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getUserRoleAssignments(id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserRoleAssignments(id, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists the settings of user\'s assigned role.
         * @summary List user role settings
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserRoleSettings(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserRoleSettings(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all users within the company.
         * @summary Get all users

         * @throws {RequiredError}
         */
        getUsers() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsers();
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a user. Currently, only `active_flag` can be updated.
         * @summary Update user details
         * @param {number} id The ID of the user
         * @param {UpdateUserRequest} [UpdateUserRequest]

         * @throws {RequiredError}
         */
        updateUser(id, UpdateUserRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUser(id, UpdateUserRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         * Adds a new user to the company, returns the ID upon success.
         * @summary Add a new user
         * @param {UsersApiAddUserRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addUser(requestParameters = {}) {
            return localVarFp.addUser(requestParameters.AddUserRequest).then((request) => request(axios, basePath));
        },
        /**
         * Finds users by their name.
         * @summary Find users by name
         * @param {UsersApiFindUsersByNameRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        findUsersByName(requestParameters) {
            return localVarFp.findUsersByName(requestParameters.term, requestParameters.search_by_email).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
         * @summary Get current user data

         * @throws {RequiredError}
         */
        getCurrentUser() {
            return localVarFp.getCurrentUser().then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific user within the company.
         * @summary Get one user
         * @param {UsersApiGetUserRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUser(requestParameters) {
            return localVarFp.getUser(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Lists the followers of a specific user.
         * @summary List followers of a user
         * @param {UsersApiGetUserFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserFollowers(requestParameters) {
            return localVarFp.getUserFollowers(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Lists aggregated permissions over all assigned permission sets for a user.
         * @summary List user permissions
         * @param {UsersApiGetUserPermissionsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserPermissions(requestParameters) {
            return localVarFp.getUserPermissions(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Lists role assignments for a user.
         * @summary List role assignments
         * @param {UsersApiGetUserRoleAssignmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserRoleAssignments(requestParameters) {
            return localVarFp.getUserRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Lists the settings of user\'s assigned role.
         * @summary List user role settings
         * @param {UsersApiGetUserRoleSettingsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserRoleSettings(requestParameters) {
            return localVarFp.getUserRoleSettings(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all users within the company.
         * @summary Get all users

         * @throws {RequiredError}
         */
        getUsers() {
            return localVarFp.getUsers().then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a user. Currently, only `active_flag` can be updated.
         * @summary Update user details
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateUser(requestParameters) {
            return localVarFp.updateUser(requestParameters.id, requestParameters.UpdateUserRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {UsersApiAddUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    addUser(requestParameters = {}) {
        return UsersApiFp(this.configuration).addUser(requestParameters.AddUserRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {UsersApiFindUsersByNameRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersByName(requestParameters) {
        return UsersApiFp(this.configuration).findUsersByName(requestParameters.term, requestParameters.search_by_email).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUser() {
        return UsersApiFp(this.configuration).getCurrentUser().then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(requestParameters) {
        return UsersApiFp(this.configuration).getUser(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {UsersApiGetUserFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserFollowers(requestParameters) {
        return UsersApiFp(this.configuration).getUserFollowers(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {UsersApiGetUserPermissionsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserPermissions(requestParameters) {
        return UsersApiFp(this.configuration).getUserPermissions(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {UsersApiGetUserRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserRoleAssignments(requestParameters) {
        return UsersApiFp(this.configuration).getUserRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {UsersApiGetUserRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserRoleSettings(requestParameters) {
        return UsersApiFp(this.configuration).getUserRoleSettings(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all users within the company.
     * @summary Get all users

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers() {
        return UsersApiFp(this.configuration).getUsers().then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(requestParameters) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.UpdateUserRequest).then((request) => request(this.axios, this.basePath));
    }
}
