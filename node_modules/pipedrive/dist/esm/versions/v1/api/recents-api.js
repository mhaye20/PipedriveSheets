/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * RecentsApi - axios parameter creator
 * @export
 */
export const RecentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns data about all recent changes occurred after the given timestamp.
         * @summary Get recents
         * @param {string} since_timestamp The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.
         * @param {'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user'} [items] Multiple selection of item types to include in the query (optional)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRecents: (since_timestamp, items, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'since_timestamp' is not null or undefined
            assertParamExists('getRecents', 'since_timestamp', since_timestamp);
            const localVarPath = `/recents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read", "search:read"], configuration);
            if (since_timestamp !== undefined) {
                localVarQueryParameter['since_timestamp'] = since_timestamp;
            }
            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RecentsApi - functional programming interface
 * @export
 */
export const RecentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RecentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns data about all recent changes occurred after the given timestamp.
         * @summary Get recents
         * @param {string} since_timestamp The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.
         * @param {'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user'} [items] Multiple selection of item types to include in the query (optional)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRecents(since_timestamp, items, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRecents(since_timestamp, items, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RecentsApi - factory interface
 * @export
 */
export const RecentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RecentsApiFp(configuration);
    return {
        /**
         * Returns data about all recent changes occurred after the given timestamp.
         * @summary Get recents
         * @param {RecentsApiGetRecentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRecents(requestParameters) {
            return localVarFp.getRecents(requestParameters.since_timestamp, requestParameters.items, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RecentsApi - object-oriented interface
 * @export
 * @class RecentsApi
 * @extends {BaseAPI}
 */
export class RecentsApi extends BaseAPI {
    /**
     * Returns data about all recent changes occurred after the given timestamp.
     * @summary Get recents
     * @param {RecentsApiGetRecentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RecentsApi
     */
    getRecents(requestParameters) {
        return RecentsApiFp(this.configuration).getRecents(requestParameters.since_timestamp, requestParameters.items, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
}
