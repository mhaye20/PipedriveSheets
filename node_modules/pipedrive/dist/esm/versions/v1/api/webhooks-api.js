/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `create.deal` for any newly added deals, `delete.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks-v2?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
         * @summary Create a new Webhook
         * @param {AddWebhookRequest} [AddWebhookRequest]

         * @throws {RequiredError}
         */
        addWebhook: (AddWebhookRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddWebhookRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes the specified Webhook.
         * @summary Delete existing Webhook
         * @param {number} id The ID of the Webhook to delete

         * @throws {RequiredError}
         */
        deleteWebhook: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWebhook', 'id', id);
            const localVarPath = `/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all the Webhooks of a company.
         * @summary Get all Webhooks

         * @throws {RequiredError}
         */
        getWebhooks: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function (configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `create.deal` for any newly added deals, `delete.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks-v2?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
         * @summary Create a new Webhook
         * @param {AddWebhookRequest} [AddWebhookRequest]

         * @throws {RequiredError}
         */
        addWebhook(AddWebhookRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addWebhook(AddWebhookRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Deletes the specified Webhook.
         * @summary Delete existing Webhook
         * @param {number} id The ID of the Webhook to delete

         * @throws {RequiredError}
         */
        deleteWebhook(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteWebhook(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all the Webhooks of a company.
         * @summary Get all Webhooks

         * @throws {RequiredError}
         */
        getWebhooks() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getWebhooks();
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = WebhooksApiFp(configuration);
    return {
        /**
         * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `create.deal` for any newly added deals, `delete.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks-v2?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
         * @summary Create a new Webhook
         * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addWebhook(requestParameters = {}) {
            return localVarFp.addWebhook(requestParameters.AddWebhookRequest).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified Webhook.
         * @summary Delete existing Webhook
         * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteWebhook(requestParameters) {
            return localVarFp.deleteWebhook(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all the Webhooks of a company.
         * @summary Get all Webhooks

         * @throws {RequiredError}
         */
        getWebhooks() {
            return localVarFp.getWebhooks().then((request) => request(axios, basePath));
        },
    };
};
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `create.deal` for any newly added deals, `delete.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks-v2?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
     * @summary Create a new Webhook
     * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    addWebhook(requestParameters = {}) {
        return WebhooksApiFp(this.configuration).addWebhook(requestParameters.AddWebhookRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the specified Webhook.
     * @summary Delete existing Webhook
     * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    deleteWebhook(requestParameters) {
        return WebhooksApiFp(this.configuration).deleteWebhook(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all the Webhooks of a company.
     * @summary Get all Webhooks

     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    getWebhooks() {
        return WebhooksApiFp(this.configuration).getWebhooks().then((request) => request(this.axios, this.basePath));
    }
}
