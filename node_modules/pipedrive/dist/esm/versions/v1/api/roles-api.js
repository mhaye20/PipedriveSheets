/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds or updates the visibility setting for a role.
         * @summary Add or update role setting
         * @param {number} id The ID of the role
         * @param {AddOrUpdateRoleSettingRequest} [AddOrUpdateRoleSettingRequest]

         * @throws {RequiredError}
         */
        addOrUpdateRoleSetting: (id, AddOrUpdateRoleSettingRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addOrUpdateRoleSetting', 'id', id);
            const localVarPath = `/roles/{id}/settings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddOrUpdateRoleSettingRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a new role.
         * @summary Add a role
         * @param {AddRoleRequest} [AddRoleRequest]

         * @throws {RequiredError}
         */
        addRole: (AddRoleRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddRoleRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Assigns a user to a role.
         * @summary Add role assignment
         * @param {number} id The ID of the role
         * @param {AddRoleAssignmentRequest} [AddRoleAssignmentRequest]

         * @throws {RequiredError}
         */
        addRoleAssignment: (id, AddRoleAssignmentRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addRoleAssignment', 'id', id);
            const localVarPath = `/roles/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddRoleAssignmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a role as deleted.
         * @summary Delete a role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        deleteRole: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRole', 'id', id);
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes the assigned user from a role and adds to the default role.
         * @summary Delete a role assignment
         * @param {number} id The ID of the role
         * @param {DeleteRoleAssignmentRequest} [DeleteRoleAssignmentRequest]

         * @throws {RequiredError}
         */
        deleteRoleAssignment: (id, DeleteRoleAssignmentRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRoleAssignment', 'id', id);
            const localVarPath = `/roles/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(DeleteRoleAssignmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of a specific role.
         * @summary Get one role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        getRole: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRole', 'id', id);
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all users assigned to a role.
         * @summary List role assignments
         * @param {number} id The ID of the role
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRoleAssignments: (id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleAssignments', 'id', id);
            const localVarPath = `/roles/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary List pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {boolean} [visible] Whether to return the visible or hidden pipelines for the role

         * @throws {RequiredError}
         */
        getRolePipelines: (id, visible) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRolePipelines', 'id', id);
            const localVarPath = `/roles/{id}/pipelines`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the visibility settings of a specific role.
         * @summary List role settings
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        getRoleSettings: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleSettings', 'id', id);
            const localVarPath = `/roles/{id}/settings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all the roles within the company.
         * @summary Get all roles
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRoles: (start, limit) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the parent role and/or the name of a specific role.
         * @summary Update role details
         * @param {number} id The ID of the role
         * @param {BaseRoleRequest} [BaseRoleRequest]

         * @throws {RequiredError}
         */
        updateRole: (id, BaseRoleRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRole', 'id', id);
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(BaseRoleRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary Update pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {PutRolePipelinesBody} [PutRolePipelinesBody]

         * @throws {RequiredError}
         */
        updateRolePipelines: (id, PutRolePipelinesBody) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRolePipelines', 'id', id);
            const localVarPath = `/roles/{id}/pipelines`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(PutRolePipelinesBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds or updates the visibility setting for a role.
         * @summary Add or update role setting
         * @param {number} id The ID of the role
         * @param {AddOrUpdateRoleSettingRequest} [AddOrUpdateRoleSettingRequest]

         * @throws {RequiredError}
         */
        addOrUpdateRoleSetting(id, AddOrUpdateRoleSettingRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addOrUpdateRoleSetting(id, AddOrUpdateRoleSettingRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Adds a new role.
         * @summary Add a role
         * @param {AddRoleRequest} [AddRoleRequest]

         * @throws {RequiredError}
         */
        addRole(AddRoleRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addRole(AddRoleRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Assigns a user to a role.
         * @summary Add role assignment
         * @param {number} id The ID of the role
         * @param {AddRoleAssignmentRequest} [AddRoleAssignmentRequest]

         * @throws {RequiredError}
         */
        addRoleAssignment(id, AddRoleAssignmentRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addRoleAssignment(id, AddRoleAssignmentRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a role as deleted.
         * @summary Delete a role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        deleteRole(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRole(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Removes the assigned user from a role and adds to the default role.
         * @summary Delete a role assignment
         * @param {number} id The ID of the role
         * @param {DeleteRoleAssignmentRequest} [DeleteRoleAssignmentRequest]

         * @throws {RequiredError}
         */
        deleteRoleAssignment(id, DeleteRoleAssignmentRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRoleAssignment(id, DeleteRoleAssignmentRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of a specific role.
         * @summary Get one role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        getRole(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRole(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all users assigned to a role.
         * @summary List role assignments
         * @param {number} id The ID of the role
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRoleAssignments(id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoleAssignments(id, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary List pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {boolean} [visible] Whether to return the visible or hidden pipelines for the role

         * @throws {RequiredError}
         */
        getRolePipelines(id, visible) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRolePipelines(id, visible);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns the visibility settings of a specific role.
         * @summary List role settings
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        getRoleSettings(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoleSettings(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all the roles within the company.
         * @summary Get all roles
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRoles(start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoles(start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the parent role and/or the name of a specific role.
         * @summary Update role details
         * @param {number} id The ID of the role
         * @param {BaseRoleRequest} [BaseRoleRequest]

         * @throws {RequiredError}
         */
        updateRole(id, BaseRoleRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRole(id, BaseRoleRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary Update pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {PutRolePipelinesBody} [PutRolePipelinesBody]

         * @throws {RequiredError}
         */
        updateRolePipelines(id, PutRolePipelinesBody) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRolePipelines(id, PutRolePipelinesBody);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RolesApiFp(configuration);
    return {
        /**
         * Adds or updates the visibility setting for a role.
         * @summary Add or update role setting
         * @param {RolesApiAddOrUpdateRoleSettingRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrUpdateRoleSetting(requestParameters) {
            return localVarFp.addOrUpdateRoleSetting(requestParameters.id, requestParameters.AddOrUpdateRoleSettingRequest).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new role.
         * @summary Add a role
         * @param {RolesApiAddRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addRole(requestParameters = {}) {
            return localVarFp.addRole(requestParameters.AddRoleRequest).then((request) => request(axios, basePath));
        },
        /**
         * Assigns a user to a role.
         * @summary Add role assignment
         * @param {RolesApiAddRoleAssignmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addRoleAssignment(requestParameters) {
            return localVarFp.addRoleAssignment(requestParameters.id, requestParameters.AddRoleAssignmentRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a role as deleted.
         * @summary Delete a role
         * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteRole(requestParameters) {
            return localVarFp.deleteRole(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Removes the assigned user from a role and adds to the default role.
         * @summary Delete a role assignment
         * @param {RolesApiDeleteRoleAssignmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteRoleAssignment(requestParameters) {
            return localVarFp.deleteRoleAssignment(requestParameters.id, requestParameters.DeleteRoleAssignmentRequest).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific role.
         * @summary Get one role
         * @param {RolesApiGetRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRole(requestParameters) {
            return localVarFp.getRole(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all users assigned to a role.
         * @summary List role assignments
         * @param {RolesApiGetRoleAssignmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRoleAssignments(requestParameters) {
            return localVarFp.getRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary List pipeline visibility for a role
         * @param {RolesApiGetRolePipelinesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRolePipelines(requestParameters) {
            return localVarFp.getRolePipelines(requestParameters.id, requestParameters.visible).then((request) => request(axios, basePath));
        },
        /**
         * Returns the visibility settings of a specific role.
         * @summary List role settings
         * @param {RolesApiGetRoleSettingsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRoleSettings(requestParameters) {
            return localVarFp.getRoleSettings(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the roles within the company.
         * @summary Get all roles
         * @param {RolesApiGetRolesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRoles(requestParameters = {}) {
            return localVarFp.getRoles(requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Updates the parent role and/or the name of a specific role.
         * @summary Update role details
         * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateRole(requestParameters) {
            return localVarFp.updateRole(requestParameters.id, requestParameters.BaseRoleRequest).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary Update pipeline visibility for a role
         * @param {RolesApiUpdateRolePipelinesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateRolePipelines(requestParameters) {
            return localVarFp.updateRolePipelines(requestParameters.id, requestParameters.PutRolePipelinesBody).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {RolesApiAddOrUpdateRoleSettingRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addOrUpdateRoleSetting(requestParameters) {
        return RolesApiFp(this.configuration).addOrUpdateRoleSetting(requestParameters.id, requestParameters.AddOrUpdateRoleSettingRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a new role.
     * @summary Add a role
     * @param {RolesApiAddRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addRole(requestParameters = {}) {
        return RolesApiFp(this.configuration).addRole(requestParameters.AddRoleRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {RolesApiAddRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addRoleAssignment(requestParameters) {
        return RolesApiFp(this.configuration).addRoleAssignment(requestParameters.id, requestParameters.AddRoleAssignmentRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRole(requestParameters) {
        return RolesApiFp(this.configuration).deleteRole(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {RolesApiDeleteRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRoleAssignment(requestParameters) {
        return RolesApiFp(this.configuration).deleteRoleAssignment(requestParameters.id, requestParameters.DeleteRoleAssignmentRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRole(requestParameters) {
        return RolesApiFp(this.configuration).getRole(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {RolesApiGetRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoleAssignments(requestParameters) {
        return RolesApiFp(this.configuration).getRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary List pipeline visibility for a role
     * @param {RolesApiGetRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRolePipelines(requestParameters) {
        return RolesApiFp(this.configuration).getRolePipelines(requestParameters.id, requestParameters.visible).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {RolesApiGetRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoleSettings(requestParameters) {
        return RolesApiFp(this.configuration).getRoleSettings(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {RolesApiGetRolesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoles(requestParameters = {}) {
        return RolesApiFp(this.configuration).getRoles(requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    updateRole(requestParameters) {
        return RolesApiFp(this.configuration).updateRole(requestParameters.id, requestParameters.BaseRoleRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary Update pipeline visibility for a role
     * @param {RolesApiUpdateRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    updateRolePipelines(requestParameters) {
        return RolesApiFp(this.configuration).updateRolePipelines(requestParameters.id, requestParameters.PutRolePipelinesBody).then((request) => request(this.axios, this.basePath));
    }
}
