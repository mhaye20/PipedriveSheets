/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddTaskRequest } from '../models';
import { AddTaskResponse } from '../models';
import { DeleteTaskResponse } from '../models';
import { GetTaskResponse } from '../models';
import { GetTasksResponse } from '../models';
import { UpdateProjectRequest2 } from '../models';
import { UpdateTaskResponse } from '../models';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export declare const TasksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new task.
     * @summary Add a task
     * @param {AddTaskRequest} [AddTaskRequest]

     * @throws {RequiredError}
     */
    addTask: (AddTaskRequest?: AddTaskRequest) => Promise<RequestArgs>;
    /**
     * Marks a task as deleted. If the task has subtasks then those will also be deleted.
     * @summary Delete a task
     * @param {number} id The ID of the task

     * @throws {RequiredError}
     */
    deleteTask: (id: number) => Promise<RequestArgs>;
    /**
     * Returns the details of a specific task.
     * @summary Get details of a task
     * @param {number} id The ID of the task

     * @throws {RequiredError}
     */
    getTask: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all tasks
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
     * @param {number} [assignee_id] If supplied, only tasks that are assigned to this user are returned
     * @param {number} [project_id] If supplied, only tasks that are assigned to this project are returned
     * @param {number} [parent_task_id] If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
     * @param {0 | 1} [done] Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.

     * @throws {RequiredError}
     */
    getTasks: (cursor?: string, limit?: number, assignee_id?: number, project_id?: number, parent_task_id?: number, done?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Updates a task.
     * @summary Update a task
     * @param {number} id The ID of the task
     * @param {UpdateProjectRequest2} [UpdateProjectRequest2]

     * @throws {RequiredError}
     */
    updateTask: (id: number, UpdateProjectRequest2?: UpdateProjectRequest2) => Promise<RequestArgs>;
};
/**
 * TasksApi - functional programming interface
 * @export
 */
export declare const TasksApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new task.
     * @summary Add a task
     * @param {AddTaskRequest} [AddTaskRequest]

     * @throws {RequiredError}
     */
    addTask(AddTaskRequest?: AddTaskRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddTaskResponse>>;
    /**
     * Marks a task as deleted. If the task has subtasks then those will also be deleted.
     * @summary Delete a task
     * @param {number} id The ID of the task

     * @throws {RequiredError}
     */
    deleteTask(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteTaskResponse>>;
    /**
     * Returns the details of a specific task.
     * @summary Get details of a task
     * @param {number} id The ID of the task

     * @throws {RequiredError}
     */
    getTask(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTaskResponse>>;
    /**
     * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all tasks
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
     * @param {number} [assignee_id] If supplied, only tasks that are assigned to this user are returned
     * @param {number} [project_id] If supplied, only tasks that are assigned to this project are returned
     * @param {number} [parent_task_id] If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
     * @param {0 | 1} [done] Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.

     * @throws {RequiredError}
     */
    getTasks(cursor?: string, limit?: number, assignee_id?: number, project_id?: number, parent_task_id?: number, done?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTasksResponse>>;
    /**
     * Updates a task.
     * @summary Update a task
     * @param {number} id The ID of the task
     * @param {UpdateProjectRequest2} [UpdateProjectRequest2]

     * @throws {RequiredError}
     */
    updateTask(id: number, UpdateProjectRequest2?: UpdateProjectRequest2): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateTaskResponse>>;
};
/**
 * TasksApi - factory interface
 * @export
 */
export declare const TasksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new task.
     * @summary Add a task
     * @param {TasksApiAddTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addTask(requestParameters?: TasksApiAddTaskRequest): Promise<AddTaskResponse>;
    /**
     * Marks a task as deleted. If the task has subtasks then those will also be deleted.
     * @summary Delete a task
     * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteTask(requestParameters: TasksApiDeleteTaskRequest): Promise<DeleteTaskResponse>;
    /**
     * Returns the details of a specific task.
     * @summary Get details of a task
     * @param {TasksApiGetTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getTask(requestParameters: TasksApiGetTaskRequest): Promise<GetTaskResponse>;
    /**
     * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all tasks
     * @param {TasksApiGetTasksRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getTasks(requestParameters?: TasksApiGetTasksRequest): Promise<GetTasksResponse>;
    /**
     * Updates a task.
     * @summary Update a task
     * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateTask(requestParameters: TasksApiUpdateTaskRequest): Promise<UpdateTaskResponse>;
};
/**
 * Request parameters for addTask operation in TasksApi.
 * @export
 * @interface TasksApiAddTaskRequest
 */
export interface TasksApiAddTaskRequest {
    /**
     *
     * @type {AddTaskRequest}
     * @memberof TasksApiAddTask
     */
    readonly AddTaskRequest?: AddTaskRequest;
}
/**
 * Request parameters for deleteTask operation in TasksApi.
 * @export
 * @interface TasksApiDeleteTaskRequest
 */
export interface TasksApiDeleteTaskRequest {
    /**
     * The ID of the task
     * @type {number}
     * @memberof TasksApiDeleteTask
     */
    readonly id: number;
}
/**
 * Request parameters for getTask operation in TasksApi.
 * @export
 * @interface TasksApiGetTaskRequest
 */
export interface TasksApiGetTaskRequest {
    /**
     * The ID of the task
     * @type {number}
     * @memberof TasksApiGetTask
     */
    readonly id: number;
}
/**
 * Request parameters for getTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetTasksRequest
 */
export interface TasksApiGetTasksRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof TasksApiGetTasks
     */
    readonly cursor?: string;
    /**
     * For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly limit?: number;
    /**
     * If supplied, only tasks that are assigned to this user are returned
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly assignee_id?: number;
    /**
     * If supplied, only tasks that are assigned to this project are returned
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly project_id?: number;
    /**
     * If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly parent_task_id?: number;
    /**
     * Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.
     * @type {0 | 1}
     * @memberof TasksApiGetTasks
     */
    readonly done?: 0 | 1;
}
/**
 * Request parameters for updateTask operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskRequest
 */
export interface TasksApiUpdateTaskRequest {
    /**
     * The ID of the task
     * @type {number}
     * @memberof TasksApiUpdateTask
     */
    readonly id: number;
    /**
     *
     * @type {UpdateProjectRequest2}
     * @memberof TasksApiUpdateTask
     */
    readonly UpdateProjectRequest2?: UpdateProjectRequest2;
}
/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export declare class TasksApi extends BaseAPI {
    /**
     * Adds a new task.
     * @summary Add a task
     * @param {TasksApiAddTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    addTask(requestParameters?: TasksApiAddTaskRequest): Promise<AddTaskResponse>;
    /**
     * Marks a task as deleted. If the task has subtasks then those will also be deleted.
     * @summary Delete a task
     * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    deleteTask(requestParameters: TasksApiDeleteTaskRequest): Promise<DeleteTaskResponse>;
    /**
     * Returns the details of a specific task.
     * @summary Get details of a task
     * @param {TasksApiGetTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getTask(requestParameters: TasksApiGetTaskRequest): Promise<GetTaskResponse>;
    /**
     * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all tasks
     * @param {TasksApiGetTasksRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getTasks(requestParameters?: TasksApiGetTasksRequest): Promise<GetTasksResponse>;
    /**
     * Updates a task.
     * @summary Update a task
     * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    updateTask(requestParameters: TasksApiUpdateTaskRequest): Promise<UpdateTaskResponse>;
}
