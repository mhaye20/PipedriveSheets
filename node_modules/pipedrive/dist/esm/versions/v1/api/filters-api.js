/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * FiltersApi - axios parameter creator
 * @export
 */
export const FiltersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
         * @summary Add a new filter
         * @param {AddFilterRequest} [AddFilterRequest]

         * @throws {RequiredError}
         */
        addFilter: (AddFilterRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddFilterRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a filter as deleted.
         * @summary Delete a filter
         * @param {number} id The ID of the filter

         * @throws {RequiredError}
         */
        deleteFilter: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFilter', 'id', id);
            const localVarPath = `/filters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks multiple filters as deleted.
         * @summary Delete multiple filters in bulk
         * @param {string} ids The comma-separated filter IDs to delete

         * @throws {RequiredError}
         */
        deleteFilters: (ids) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteFilters', 'ids', ids);
            const localVarPath = `/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
         * @summary Get one filter
         * @param {number} id The ID of the filter

         * @throws {RequiredError}
         */
        getFilter: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFilter', 'id', id);
            const localVarPath = `/filters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
         * @summary Get all filter helpers

         * @throws {RequiredError}
         */
        getFilterHelpers: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/filters/helpers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all filters.
         * @summary Get all filters
         * @param {'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects'} [type] The types of filters to fetch

         * @throws {RequiredError}
         */
        getFilters: (type) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an existing filter.
         * @summary Update filter
         * @param {number} id The ID of the filter
         * @param {UpdateFilterRequest} [UpdateFilterRequest]

         * @throws {RequiredError}
         */
        updateFilter: (id, UpdateFilterRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFilter', 'id', id);
            const localVarPath = `/filters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateFilterRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FiltersApi - functional programming interface
 * @export
 */
export const FiltersApiFp = function (configuration) {
    const localVarAxiosParamCreator = FiltersApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
         * @summary Add a new filter
         * @param {AddFilterRequest} [AddFilterRequest]

         * @throws {RequiredError}
         */
        addFilter(AddFilterRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFilter(AddFilterRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a filter as deleted.
         * @summary Delete a filter
         * @param {number} id The ID of the filter

         * @throws {RequiredError}
         */
        deleteFilter(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFilter(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks multiple filters as deleted.
         * @summary Delete multiple filters in bulk
         * @param {string} ids The comma-separated filter IDs to delete

         * @throws {RequiredError}
         */
        deleteFilters(ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFilters(ids);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
         * @summary Get one filter
         * @param {number} id The ID of the filter

         * @throws {RequiredError}
         */
        getFilter(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFilter(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
         * @summary Get all filter helpers

         * @throws {RequiredError}
         */
        getFilterHelpers() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFilterHelpers();
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all filters.
         * @summary Get all filters
         * @param {'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects'} [type] The types of filters to fetch

         * @throws {RequiredError}
         */
        getFilters(type) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFilters(type);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates an existing filter.
         * @summary Update filter
         * @param {number} id The ID of the filter
         * @param {UpdateFilterRequest} [UpdateFilterRequest]

         * @throws {RequiredError}
         */
        updateFilter(id, UpdateFilterRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateFilter(id, UpdateFilterRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FiltersApi - factory interface
 * @export
 */
export const FiltersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FiltersApiFp(configuration);
    return {
        /**
         * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
         * @summary Add a new filter
         * @param {FiltersApiAddFilterRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addFilter(requestParameters = {}) {
            return localVarFp.addFilter(requestParameters.AddFilterRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a filter as deleted.
         * @summary Delete a filter
         * @param {FiltersApiDeleteFilterRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteFilter(requestParameters) {
            return localVarFp.deleteFilter(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple filters as deleted.
         * @summary Delete multiple filters in bulk
         * @param {FiltersApiDeleteFiltersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteFilters(requestParameters) {
            return localVarFp.deleteFilters(requestParameters.ids).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
         * @summary Get one filter
         * @param {FiltersApiGetFilterRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getFilter(requestParameters) {
            return localVarFp.getFilter(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
         * @summary Get all filter helpers

         * @throws {RequiredError}
         */
        getFilterHelpers() {
            return localVarFp.getFilterHelpers().then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all filters.
         * @summary Get all filters
         * @param {FiltersApiGetFiltersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getFilters(requestParameters = {}) {
            return localVarFp.getFilters(requestParameters.type).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing filter.
         * @summary Update filter
         * @param {FiltersApiUpdateFilterRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateFilter(requestParameters) {
            return localVarFp.updateFilter(requestParameters.id, requestParameters.UpdateFilterRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FiltersApi - object-oriented interface
 * @export
 * @class FiltersApi
 * @extends {BaseAPI}
 */
export class FiltersApi extends BaseAPI {
    /**
     * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Add a new filter
     * @param {FiltersApiAddFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    addFilter(requestParameters = {}) {
        return FiltersApiFp(this.configuration).addFilter(requestParameters.AddFilterRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a filter as deleted.
     * @summary Delete a filter
     * @param {FiltersApiDeleteFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    deleteFilter(requestParameters) {
        return FiltersApiFp(this.configuration).deleteFilter(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks multiple filters as deleted.
     * @summary Delete multiple filters in bulk
     * @param {FiltersApiDeleteFiltersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    deleteFilters(requestParameters) {
        return FiltersApiFp(this.configuration).deleteFilters(requestParameters.ids).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
     * @summary Get one filter
     * @param {FiltersApiGetFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    getFilter(requestParameters) {
        return FiltersApiFp(this.configuration).getFilter(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Get all filter helpers

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    getFilterHelpers() {
        return FiltersApiFp(this.configuration).getFilterHelpers().then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all filters.
     * @summary Get all filters
     * @param {FiltersApiGetFiltersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    getFilters(requestParameters = {}) {
        return FiltersApiFp(this.configuration).getFilters(requestParameters.type).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing filter.
     * @summary Update filter
     * @param {FiltersApiUpdateFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    updateFilter(requestParameters) {
        return FiltersApiFp(this.configuration).updateFilter(requestParameters.id, requestParameters.UpdateFilterRequest).then((request) => request(this.axios, this.basePath));
    }
}
