/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddFilterRequest } from '../models';
import { AddFiltersResponse } from '../models';
import { DeleteFilterResponse } from '../models';
import { DeleteFiltersResponse } from '../models';
import { GetFiltersResponse } from '../models';
import { GetFiltersResponse1 } from '../models';
import { UpdateFilterRequest } from '../models';
/**
 * FiltersApi - axios parameter creator
 * @export
 */
export declare const FiltersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Add a new filter
     * @param {AddFilterRequest} [AddFilterRequest]

     * @throws {RequiredError}
     */
    addFilter: (AddFilterRequest?: AddFilterRequest) => Promise<RequestArgs>;
    /**
     * Marks a filter as deleted.
     * @summary Delete a filter
     * @param {number} id The ID of the filter

     * @throws {RequiredError}
     */
    deleteFilter: (id: number) => Promise<RequestArgs>;
    /**
     * Marks multiple filters as deleted.
     * @summary Delete multiple filters in bulk
     * @param {string} ids The comma-separated filter IDs to delete

     * @throws {RequiredError}
     */
    deleteFilters: (ids: string) => Promise<RequestArgs>;
    /**
     * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
     * @summary Get one filter
     * @param {number} id The ID of the filter

     * @throws {RequiredError}
     */
    getFilter: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Get all filter helpers

     * @throws {RequiredError}
     */
    getFilterHelpers: () => Promise<RequestArgs>;
    /**
     * Returns data about all filters.
     * @summary Get all filters
     * @param {'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects'} [type] The types of filters to fetch

     * @throws {RequiredError}
     */
    getFilters: (type?: 'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects') => Promise<RequestArgs>;
    /**
     * Updates an existing filter.
     * @summary Update filter
     * @param {number} id The ID of the filter
     * @param {UpdateFilterRequest} [UpdateFilterRequest]

     * @throws {RequiredError}
     */
    updateFilter: (id: number, UpdateFilterRequest?: UpdateFilterRequest) => Promise<RequestArgs>;
};
/**
 * FiltersApi - functional programming interface
 * @export
 */
export declare const FiltersApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Add a new filter
     * @param {AddFilterRequest} [AddFilterRequest]

     * @throws {RequiredError}
     */
    addFilter(AddFilterRequest?: AddFilterRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddFiltersResponse>>;
    /**
     * Marks a filter as deleted.
     * @summary Delete a filter
     * @param {number} id The ID of the filter

     * @throws {RequiredError}
     */
    deleteFilter(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFilterResponse>>;
    /**
     * Marks multiple filters as deleted.
     * @summary Delete multiple filters in bulk
     * @param {string} ids The comma-separated filter IDs to delete

     * @throws {RequiredError}
     */
    deleteFilters(ids: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFiltersResponse>>;
    /**
     * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
     * @summary Get one filter
     * @param {number} id The ID of the filter

     * @throws {RequiredError}
     */
    getFilter(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFiltersResponse1>>;
    /**
     * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Get all filter helpers

     * @throws {RequiredError}
     */
    getFilterHelpers(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<object>>;
    /**
     * Returns data about all filters.
     * @summary Get all filters
     * @param {'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects'} [type] The types of filters to fetch

     * @throws {RequiredError}
     */
    getFilters(type?: 'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects'): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFiltersResponse>>;
    /**
     * Updates an existing filter.
     * @summary Update filter
     * @param {number} id The ID of the filter
     * @param {UpdateFilterRequest} [UpdateFilterRequest]

     * @throws {RequiredError}
     */
    updateFilter(id: number, UpdateFilterRequest?: UpdateFilterRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddFiltersResponse>>;
};
/**
 * FiltersApi - factory interface
 * @export
 */
export declare const FiltersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Add a new filter
     * @param {FiltersApiAddFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addFilter(requestParameters?: FiltersApiAddFilterRequest): Promise<AddFiltersResponse>;
    /**
     * Marks a filter as deleted.
     * @summary Delete a filter
     * @param {FiltersApiDeleteFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteFilter(requestParameters: FiltersApiDeleteFilterRequest): Promise<DeleteFilterResponse>;
    /**
     * Marks multiple filters as deleted.
     * @summary Delete multiple filters in bulk
     * @param {FiltersApiDeleteFiltersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteFilters(requestParameters: FiltersApiDeleteFiltersRequest): Promise<DeleteFiltersResponse>;
    /**
     * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
     * @summary Get one filter
     * @param {FiltersApiGetFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getFilter(requestParameters: FiltersApiGetFilterRequest): Promise<GetFiltersResponse1>;
    /**
     * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Get all filter helpers

     * @throws {RequiredError}
     */
    getFilterHelpers(): Promise<object>;
    /**
     * Returns data about all filters.
     * @summary Get all filters
     * @param {FiltersApiGetFiltersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getFilters(requestParameters?: FiltersApiGetFiltersRequest): Promise<GetFiltersResponse>;
    /**
     * Updates an existing filter.
     * @summary Update filter
     * @param {FiltersApiUpdateFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateFilter(requestParameters: FiltersApiUpdateFilterRequest): Promise<AddFiltersResponse>;
};
/**
 * Request parameters for addFilter operation in FiltersApi.
 * @export
 * @interface FiltersApiAddFilterRequest
 */
export interface FiltersApiAddFilterRequest {
    /**
     *
     * @type {AddFilterRequest}
     * @memberof FiltersApiAddFilter
     */
    readonly AddFilterRequest?: AddFilterRequest;
}
/**
 * Request parameters for deleteFilter operation in FiltersApi.
 * @export
 * @interface FiltersApiDeleteFilterRequest
 */
export interface FiltersApiDeleteFilterRequest {
    /**
     * The ID of the filter
     * @type {number}
     * @memberof FiltersApiDeleteFilter
     */
    readonly id: number;
}
/**
 * Request parameters for deleteFilters operation in FiltersApi.
 * @export
 * @interface FiltersApiDeleteFiltersRequest
 */
export interface FiltersApiDeleteFiltersRequest {
    /**
     * The comma-separated filter IDs to delete
     * @type {string}
     * @memberof FiltersApiDeleteFilters
     */
    readonly ids: string;
}
/**
 * Request parameters for getFilter operation in FiltersApi.
 * @export
 * @interface FiltersApiGetFilterRequest
 */
export interface FiltersApiGetFilterRequest {
    /**
     * The ID of the filter
     * @type {number}
     * @memberof FiltersApiGetFilter
     */
    readonly id: number;
}
/**
 * Request parameters for getFilters operation in FiltersApi.
 * @export
 * @interface FiltersApiGetFiltersRequest
 */
export interface FiltersApiGetFiltersRequest {
    /**
     * The types of filters to fetch
     * @type {'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects'}
     * @memberof FiltersApiGetFilters
     */
    readonly type?: 'deals' | 'leads' | 'org' | 'people' | 'products' | 'activity' | 'projects';
}
/**
 * Request parameters for updateFilter operation in FiltersApi.
 * @export
 * @interface FiltersApiUpdateFilterRequest
 */
export interface FiltersApiUpdateFilterRequest {
    /**
     * The ID of the filter
     * @type {number}
     * @memberof FiltersApiUpdateFilter
     */
    readonly id: number;
    /**
     *
     * @type {UpdateFilterRequest}
     * @memberof FiltersApiUpdateFilter
     */
    readonly UpdateFilterRequest?: UpdateFilterRequest;
}
/**
 * FiltersApi - object-oriented interface
 * @export
 * @class FiltersApi
 * @extends {BaseAPI}
 */
export declare class FiltersApi extends BaseAPI {
    /**
     * Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with \'AND\', and only two second level condition groups are supported of which one must be glued with \'AND\' and the second with \'OR\'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Add a new filter
     * @param {FiltersApiAddFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    addFilter(requestParameters?: FiltersApiAddFilterRequest): Promise<AddFiltersResponse>;
    /**
     * Marks a filter as deleted.
     * @summary Delete a filter
     * @param {FiltersApiDeleteFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    deleteFilter(requestParameters: FiltersApiDeleteFilterRequest): Promise<DeleteFilterResponse>;
    /**
     * Marks multiple filters as deleted.
     * @summary Delete multiple filters in bulk
     * @param {FiltersApiDeleteFiltersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    deleteFilters(requestParameters: FiltersApiDeleteFiltersRequest): Promise<DeleteFiltersResponse>;
    /**
     * Returns data about a specific filter. Note that this also returns the condition lines of the filter.
     * @summary Get one filter
     * @param {FiltersApiGetFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    getFilter(requestParameters: FiltersApiGetFilterRequest): Promise<GetFiltersResponse1>;
    /**
     * Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href=\"/docs/api/v1/Filters#addFilter\">add</a> or <a href=\"/docs/api/v1/Filters#updateFilter\">update</a> filters. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-filter\" target=\"_blank\" rel=\"noopener noreferrer\">adding a filter</a>.
     * @summary Get all filter helpers

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    getFilterHelpers(): Promise<object>;
    /**
     * Returns data about all filters.
     * @summary Get all filters
     * @param {FiltersApiGetFiltersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    getFilters(requestParameters?: FiltersApiGetFiltersRequest): Promise<GetFiltersResponse>;
    /**
     * Updates an existing filter.
     * @summary Update filter
     * @param {FiltersApiUpdateFilterRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FiltersApi
     */
    updateFilter(requestParameters: FiltersApiUpdateFilterRequest): Promise<AddFiltersResponse>;
}
