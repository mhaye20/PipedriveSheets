/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddRecurringSubscriptionRequest } from '../models';
import { AddSubscriptionInstallmentRequest } from '../models';
import { CancelRecurringSubscriptionRequest } from '../models';
import { GetPaymentsResponse } from '../models';
import { GetSubscriptionsIdResponse } from '../models';
import { UpdateRecurringSubscriptionRequest } from '../models';
import { UpdateSubscriptionInstallmentRequest } from '../models';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export declare const SubscriptionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new recurring subscription.
     * @summary Add a recurring subscription
     * @param {AddRecurringSubscriptionRequest} [AddRecurringSubscriptionRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    addRecurringSubscription: (AddRecurringSubscriptionRequest?: AddRecurringSubscriptionRequest) => Promise<RequestArgs>;
    /**
     * Adds a new installment subscription.
     * @summary Add an installment subscription
     * @param {AddSubscriptionInstallmentRequest} [AddSubscriptionInstallmentRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    addSubscriptionInstallment: (AddSubscriptionInstallmentRequest?: AddSubscriptionInstallmentRequest) => Promise<RequestArgs>;
    /**
     * Cancels a recurring subscription.
     * @summary Cancel a recurring subscription
     * @param {number} id The ID of the subscription
     * @param {CancelRecurringSubscriptionRequest} [CancelRecurringSubscriptionRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    cancelRecurringSubscription: (id: number, CancelRecurringSubscriptionRequest?: CancelRecurringSubscriptionRequest) => Promise<RequestArgs>;
    /**
     * Marks an installment or a recurring subscription as deleted.
     * @summary Delete a subscription
     * @param {number} id The ID of the subscription
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSubscription: (id: number) => Promise<RequestArgs>;
    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * @summary Find subscription by deal
     * @param {number} dealId The ID of the deal
     * @deprecated
     * @throws {RequiredError}
     */
    findSubscriptionByDeal: (dealId: number) => Promise<RequestArgs>;
    /**
     * Returns details of an installment or a recurring subscription.
     * @summary Get details of a subscription
     * @param {number} id The ID of the subscription
     * @deprecated
     * @throws {RequiredError}
     */
    getSubscription: (id: number) => Promise<RequestArgs>;
    /**
     * Returns all payments of an installment or recurring subscription.
     * @summary Get all payments of a subscription
     * @param {number} id The ID of the subscription
     * @deprecated
     * @throws {RequiredError}
     */
    getSubscriptionPayments: (id: number) => Promise<RequestArgs>;
    /**
     * Updates a recurring subscription.
     * @summary Update a recurring subscription
     * @param {number} id The ID of the subscription
     * @param {UpdateRecurringSubscriptionRequest} [UpdateRecurringSubscriptionRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    updateRecurringSubscription: (id: number, UpdateRecurringSubscriptionRequest?: UpdateRecurringSubscriptionRequest) => Promise<RequestArgs>;
    /**
     * Updates an installment subscription.
     * @summary Update an installment subscription
     * @param {number} id The ID of the subscription
     * @param {UpdateSubscriptionInstallmentRequest} [UpdateSubscriptionInstallmentRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    updateSubscriptionInstallment: (id: number, UpdateSubscriptionInstallmentRequest?: UpdateSubscriptionInstallmentRequest) => Promise<RequestArgs>;
};
/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export declare const SubscriptionsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new recurring subscription.
     * @summary Add a recurring subscription
     * @param {AddRecurringSubscriptionRequest} [AddRecurringSubscriptionRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    addRecurringSubscription(AddRecurringSubscriptionRequest?: AddRecurringSubscriptionRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Adds a new installment subscription.
     * @summary Add an installment subscription
     * @param {AddSubscriptionInstallmentRequest} [AddSubscriptionInstallmentRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    addSubscriptionInstallment(AddSubscriptionInstallmentRequest?: AddSubscriptionInstallmentRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Cancels a recurring subscription.
     * @summary Cancel a recurring subscription
     * @param {number} id The ID of the subscription
     * @param {CancelRecurringSubscriptionRequest} [CancelRecurringSubscriptionRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    cancelRecurringSubscription(id: number, CancelRecurringSubscriptionRequest?: CancelRecurringSubscriptionRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Marks an installment or a recurring subscription as deleted.
     * @summary Delete a subscription
     * @param {number} id The ID of the subscription
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSubscription(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * @summary Find subscription by deal
     * @param {number} dealId The ID of the deal
     * @deprecated
     * @throws {RequiredError}
     */
    findSubscriptionByDeal(dealId: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Returns details of an installment or a recurring subscription.
     * @summary Get details of a subscription
     * @param {number} id The ID of the subscription
     * @deprecated
     * @throws {RequiredError}
     */
    getSubscription(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Returns all payments of an installment or recurring subscription.
     * @summary Get all payments of a subscription
     * @param {number} id The ID of the subscription
     * @deprecated
     * @throws {RequiredError}
     */
    getSubscriptionPayments(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPaymentsResponse>>;
    /**
     * Updates a recurring subscription.
     * @summary Update a recurring subscription
     * @param {number} id The ID of the subscription
     * @param {UpdateRecurringSubscriptionRequest} [UpdateRecurringSubscriptionRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    updateRecurringSubscription(id: number, UpdateRecurringSubscriptionRequest?: UpdateRecurringSubscriptionRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
    /**
     * Updates an installment subscription.
     * @summary Update an installment subscription
     * @param {number} id The ID of the subscription
     * @param {UpdateSubscriptionInstallmentRequest} [UpdateSubscriptionInstallmentRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    updateSubscriptionInstallment(id: number, UpdateSubscriptionInstallmentRequest?: UpdateSubscriptionInstallmentRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetSubscriptionsIdResponse>>;
};
/**
 * SubscriptionsApi - factory interface
 * @export
 */
export declare const SubscriptionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new recurring subscription.
     * @summary Add a recurring subscription
     * @param {SubscriptionsApiAddRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    addRecurringSubscription(requestParameters?: SubscriptionsApiAddRecurringSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Adds a new installment subscription.
     * @summary Add an installment subscription
     * @param {SubscriptionsApiAddSubscriptionInstallmentRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    addSubscriptionInstallment(requestParameters?: SubscriptionsApiAddSubscriptionInstallmentRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Cancels a recurring subscription.
     * @summary Cancel a recurring subscription
     * @param {SubscriptionsApiCancelRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    cancelRecurringSubscription(requestParameters: SubscriptionsApiCancelRecurringSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Marks an installment or a recurring subscription as deleted.
     * @summary Delete a subscription
     * @param {SubscriptionsApiDeleteSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSubscription(requestParameters: SubscriptionsApiDeleteSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * @summary Find subscription by deal
     * @param {SubscriptionsApiFindSubscriptionByDealRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    findSubscriptionByDeal(requestParameters: SubscriptionsApiFindSubscriptionByDealRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Returns details of an installment or a recurring subscription.
     * @summary Get details of a subscription
     * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Returns all payments of an installment or recurring subscription.
     * @summary Get all payments of a subscription
     * @param {SubscriptionsApiGetSubscriptionPaymentsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    getSubscriptionPayments(requestParameters: SubscriptionsApiGetSubscriptionPaymentsRequest): Promise<GetPaymentsResponse>;
    /**
     * Updates a recurring subscription.
     * @summary Update a recurring subscription
     * @param {SubscriptionsApiUpdateRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    updateRecurringSubscription(requestParameters: SubscriptionsApiUpdateRecurringSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Updates an installment subscription.
     * @summary Update an installment subscription
     * @param {SubscriptionsApiUpdateSubscriptionInstallmentRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    updateSubscriptionInstallment(requestParameters: SubscriptionsApiUpdateSubscriptionInstallmentRequest): Promise<GetSubscriptionsIdResponse>;
};
/**
 * Request parameters for addRecurringSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiAddRecurringSubscriptionRequest
 */
export interface SubscriptionsApiAddRecurringSubscriptionRequest {
    /**
     *
     * @type {AddRecurringSubscriptionRequest}
     * @memberof SubscriptionsApiAddRecurringSubscription
     */
    readonly AddRecurringSubscriptionRequest?: AddRecurringSubscriptionRequest;
}
/**
 * Request parameters for addSubscriptionInstallment operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiAddSubscriptionInstallmentRequest
 */
export interface SubscriptionsApiAddSubscriptionInstallmentRequest {
    /**
     *
     * @type {AddSubscriptionInstallmentRequest}
     * @memberof SubscriptionsApiAddSubscriptionInstallment
     */
    readonly AddSubscriptionInstallmentRequest?: AddSubscriptionInstallmentRequest;
}
/**
 * Request parameters for cancelRecurringSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCancelRecurringSubscriptionRequest
 */
export interface SubscriptionsApiCancelRecurringSubscriptionRequest {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsApiCancelRecurringSubscription
     */
    readonly id: number;
    /**
     *
     * @type {CancelRecurringSubscriptionRequest}
     * @memberof SubscriptionsApiCancelRecurringSubscription
     */
    readonly CancelRecurringSubscriptionRequest?: CancelRecurringSubscriptionRequest;
}
/**
 * Request parameters for deleteSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiDeleteSubscriptionRequest
 */
export interface SubscriptionsApiDeleteSubscriptionRequest {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsApiDeleteSubscription
     */
    readonly id: number;
}
/**
 * Request parameters for findSubscriptionByDeal operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiFindSubscriptionByDealRequest
 */
export interface SubscriptionsApiFindSubscriptionByDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof SubscriptionsApiFindSubscriptionByDeal
     */
    readonly dealId: number;
}
/**
 * Request parameters for getSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetSubscriptionRequest
 */
export interface SubscriptionsApiGetSubscriptionRequest {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsApiGetSubscription
     */
    readonly id: number;
}
/**
 * Request parameters for getSubscriptionPayments operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetSubscriptionPaymentsRequest
 */
export interface SubscriptionsApiGetSubscriptionPaymentsRequest {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsApiGetSubscriptionPayments
     */
    readonly id: number;
}
/**
 * Request parameters for updateRecurringSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiUpdateRecurringSubscriptionRequest
 */
export interface SubscriptionsApiUpdateRecurringSubscriptionRequest {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsApiUpdateRecurringSubscription
     */
    readonly id: number;
    /**
     *
     * @type {UpdateRecurringSubscriptionRequest}
     * @memberof SubscriptionsApiUpdateRecurringSubscription
     */
    readonly UpdateRecurringSubscriptionRequest?: UpdateRecurringSubscriptionRequest;
}
/**
 * Request parameters for updateSubscriptionInstallment operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiUpdateSubscriptionInstallmentRequest
 */
export interface SubscriptionsApiUpdateSubscriptionInstallmentRequest {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsApiUpdateSubscriptionInstallment
     */
    readonly id: number;
    /**
     *
     * @type {UpdateSubscriptionInstallmentRequest}
     * @memberof SubscriptionsApiUpdateSubscriptionInstallment
     */
    readonly UpdateSubscriptionInstallmentRequest?: UpdateSubscriptionInstallmentRequest;
}
/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export declare class SubscriptionsApi extends BaseAPI {
    /**
     * Adds a new recurring subscription.
     * @summary Add a recurring subscription
     * @param {SubscriptionsApiAddRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    addRecurringSubscription(requestParameters?: SubscriptionsApiAddRecurringSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Adds a new installment subscription.
     * @summary Add an installment subscription
     * @param {SubscriptionsApiAddSubscriptionInstallmentRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    addSubscriptionInstallment(requestParameters?: SubscriptionsApiAddSubscriptionInstallmentRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Cancels a recurring subscription.
     * @summary Cancel a recurring subscription
     * @param {SubscriptionsApiCancelRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    cancelRecurringSubscription(requestParameters: SubscriptionsApiCancelRecurringSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Marks an installment or a recurring subscription as deleted.
     * @summary Delete a subscription
     * @param {SubscriptionsApiDeleteSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    deleteSubscription(requestParameters: SubscriptionsApiDeleteSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * @summary Find subscription by deal
     * @param {SubscriptionsApiFindSubscriptionByDealRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    findSubscriptionByDeal(requestParameters: SubscriptionsApiFindSubscriptionByDealRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Returns details of an installment or a recurring subscription.
     * @summary Get details of a subscription
     * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Returns all payments of an installment or recurring subscription.
     * @summary Get all payments of a subscription
     * @param {SubscriptionsApiGetSubscriptionPaymentsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    getSubscriptionPayments(requestParameters: SubscriptionsApiGetSubscriptionPaymentsRequest): Promise<GetPaymentsResponse>;
    /**
     * Updates a recurring subscription.
     * @summary Update a recurring subscription
     * @param {SubscriptionsApiUpdateRecurringSubscriptionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    updateRecurringSubscription(requestParameters: SubscriptionsApiUpdateRecurringSubscriptionRequest): Promise<GetSubscriptionsIdResponse>;
    /**
     * Updates an installment subscription.
     * @summary Update an installment subscription
     * @param {SubscriptionsApiUpdateSubscriptionInstallmentRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    updateSubscriptionInstallment(requestParameters: SubscriptionsApiUpdateSubscriptionInstallmentRequest): Promise<GetSubscriptionsIdResponse>;
}
