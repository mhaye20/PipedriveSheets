/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
         * @summary Add an organization
         * @param {AddOrganizationRequest} [AddOrganizationRequest]

         * @throws {RequiredError}
         */
        addOrganization: (AddOrganizationRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddOrganizationRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds a follower to an organization.
         * @summary Add a follower to an organization
         * @param {number} id The ID of the organization
         * @param {AddOrganizationFollowerRequest} [AddOrganizationFollowerRequest]

         * @throws {RequiredError}
         */
        addOrganizationFollower: (id, AddOrganizationFollowerRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addOrganizationFollower', 'id', id);
            const localVarPath = `/organizations/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddOrganizationFollowerRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        deleteOrganization: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganization', 'id', id);
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
         * @summary Delete a follower from an organization
         * @param {number} id The ID of the organization
         * @param {number} follower_id The ID of the relationship between the follower and the organization

         * @throws {RequiredError}
         */
        deleteOrganizationFollower: (id, follower_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganizationFollower', 'id', id);
            // verify required parameter 'follower_id' is not null or undefined
            assertParamExists('deleteOrganizationFollower', 'follower_id', follower_id);
            const localVarPath = `/organizations/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
         * @summary Delete multiple organizations in bulk
         * @param {string} ids The comma-separated IDs that will be deleted

         * @throws {RequiredError}
         */
        deleteOrganizations: (ids) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteOrganizations', 'ids', ids);
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
         * @summary Get details of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganization: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganization', 'id', id);
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists activities associated with an organization.
         * @summary List activities associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done activities.
         * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

         * @throws {RequiredError}
         */
        getOrganizationActivities: (id, start, limit, done, exclude) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationActivities', 'id', id);
            const localVarPath = `/organizations/{id}/activities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }
            if (exclude !== undefined) {
                localVarQueryParameter['exclude'] = exclude;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists updates about field values of an organization.
         * @summary List updates about organization field values
         * @param {number} id The ID of the organization
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationChangelog: (id, cursor, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationChangelog', 'id', id);
            const localVarPath = `/organizations/{id}/changelog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read"], configuration);
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists deals associated with an organization.
         * @summary List deals associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
         * @param {0 | 1} [only_primary_association] If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.

         * @throws {RequiredError}
         */
        getOrganizationDeals: (id, start, limit, status, sort, only_primary_association) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationDeals', 'id', id);
            const localVarPath = `/organizations/{id}/deals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (only_primary_association !== undefined) {
                localVarQueryParameter['only_primary_association'] = only_primary_association;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists files associated with an organization.
         * @summary List files attached to an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
         * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

         * @throws {RequiredError}
         */
        getOrganizationFiles: (id, start, limit, sort) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationFiles', 'id', id);
            const localVarPath = `/organizations/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists the followers of an organization.
         * @summary List followers of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganizationFollowers: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationFollowers', 'id', id);
            const localVarPath = `/organizations/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists mail messages associated with an organization.
         * @summary List mail messages associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationMailMessages: (id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationMailMessages', 'id', id);
            const localVarPath = `/organizations/{id}/mailMessages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List persons of an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationPersons: (id, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationPersons', 'id', id);
            const localVarPath = `/organizations/{id}/persons`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists updates about an organization.
         * @summary List updates about an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted, returns changes without custom field updates.
         * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document).

         * @throws {RequiredError}
         */
        getOrganizationUpdates: (id, start, limit, all_changes, items) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationUpdates', 'id', id);
            const localVarPath = `/organizations/{id}/flow`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (all_changes !== undefined) {
                localVarQueryParameter['all_changes'] = all_changes;
            }
            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List users permitted to access an organization.
         * @summary List permitted users
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganizationUsers: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationUsers', 'id', id);
            const localVarPath = `/organizations/{id}/permittedUsers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all organizations.
         * @summary Get all organizations
         * @param {number} [user_id] If supplied, only organizations owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

         * @throws {RequiredError}
         */
        getOrganizations: (user_id, filter_id, first_char, start, limit, sort) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }
            if (first_char !== undefined) {
                localVarQueryParameter['first_char'] = first_char;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all organizations (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [owner_id] If supplied, only organizations owned by the given user will be returned
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)

         * @throws {RequiredError}
         */
        getOrganizationsCollection: (cursor, limit, since, until, owner_id, first_char) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/organizations/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration);
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }
            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }
            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }
            if (first_char !== undefined) {
                localVarQueryParameter['first_char'] = first_char;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
         * @summary Merge two organizations
         * @param {number} id The ID of the organization
         * @param {MergeOrganizationsRequest} [MergeOrganizationsRequest]

         * @throws {RequiredError}
         */
        mergeOrganizations: (id, MergeOrganizationsRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mergeOrganizations', 'id', id);
            const localVarPath = `/organizations/{id}/merge`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(MergeOrganizationsRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        searchOrganization: (term, fields, exact_match, start, limit) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchOrganization', 'term', term);
            const localVarPath = `/organizations/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full", "search:read"], configuration);
            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of an organization.
         * @summary Update an organization
         * @param {number} id The ID of the organization
         * @param {UpdateOrganizationRequest} [UpdateOrganizationRequest]

         * @throws {RequiredError}
         */
        updateOrganization: (id, UpdateOrganizationRequest) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrganization', 'id', id);
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateOrganizationRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
         * @summary Add an organization
         * @param {AddOrganizationRequest} [AddOrganizationRequest]

         * @throws {RequiredError}
         */
        addOrganization(AddOrganizationRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addOrganization(AddOrganizationRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Adds a follower to an organization.
         * @summary Add a follower to an organization
         * @param {number} id The ID of the organization
         * @param {AddOrganizationFollowerRequest} [AddOrganizationFollowerRequest]

         * @throws {RequiredError}
         */
        addOrganizationFollower(id, AddOrganizationFollowerRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addOrganizationFollower(id, AddOrganizationFollowerRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        deleteOrganization(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrganization(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
         * @summary Delete a follower from an organization
         * @param {number} id The ID of the organization
         * @param {number} follower_id The ID of the relationship between the follower and the organization

         * @throws {RequiredError}
         */
        deleteOrganizationFollower(id, follower_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrganizationFollower(id, follower_id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
         * @summary Delete multiple organizations in bulk
         * @param {string} ids The comma-separated IDs that will be deleted

         * @throws {RequiredError}
         */
        deleteOrganizations(ids) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrganizations(ids);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
         * @summary Get details of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganization(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganization(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists activities associated with an organization.
         * @summary List activities associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done activities.
         * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

         * @throws {RequiredError}
         */
        getOrganizationActivities(id, start, limit, done, exclude) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationActivities(id, start, limit, done, exclude);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists updates about field values of an organization.
         * @summary List updates about organization field values
         * @param {number} id The ID of the organization
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationChangelog(id, cursor, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationChangelog(id, cursor, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists deals associated with an organization.
         * @summary List deals associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
         * @param {0 | 1} [only_primary_association] If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.

         * @throws {RequiredError}
         */
        getOrganizationDeals(id, start, limit, status, sort, only_primary_association) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationDeals(id, start, limit, status, sort, only_primary_association);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists files associated with an organization.
         * @summary List files attached to an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
         * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

         * @throws {RequiredError}
         */
        getOrganizationFiles(id, start, limit, sort) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationFiles(id, start, limit, sort);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists the followers of an organization.
         * @summary List followers of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganizationFollowers(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationFollowers(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists mail messages associated with an organization.
         * @summary List mail messages associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationMailMessages(id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationMailMessages(id, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List persons of an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationPersons(id, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationPersons(id, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists updates about an organization.
         * @summary List updates about an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted, returns changes without custom field updates.
         * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document).

         * @throws {RequiredError}
         */
        getOrganizationUpdates(id, start, limit, all_changes, items) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationUpdates(id, start, limit, all_changes, items);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * List users permitted to access an organization.
         * @summary List permitted users
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganizationUsers(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationUsers(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all organizations.
         * @summary Get all organizations
         * @param {number} [user_id] If supplied, only organizations owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

         * @throws {RequiredError}
         */
        getOrganizations(user_id, filter_id, first_char, start, limit, sort) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizations(user_id, filter_id, first_char, start, limit, sort);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all organizations (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [owner_id] If supplied, only organizations owned by the given user will be returned
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)

         * @throws {RequiredError}
         */
        getOrganizationsCollection(cursor, limit, since, until, owner_id, first_char) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrganizationsCollection(cursor, limit, since, until, owner_id, first_char);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
         * @summary Merge two organizations
         * @param {number} id The ID of the organization
         * @param {MergeOrganizationsRequest} [MergeOrganizationsRequest]

         * @throws {RequiredError}
         */
        mergeOrganizations(id, MergeOrganizationsRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.mergeOrganizations(id, MergeOrganizationsRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        searchOrganization(term, fields, exact_match, start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.searchOrganization(term, fields, exact_match, start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of an organization.
         * @summary Update an organization
         * @param {number} id The ID of the organization
         * @param {UpdateOrganizationRequest} [UpdateOrganizationRequest]

         * @throws {RequiredError}
         */
        updateOrganization(id, UpdateOrganizationRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOrganization(id, UpdateOrganizationRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = OrganizationsApiFp(configuration);
    return {
        /**
         * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
         * @summary Add an organization
         * @param {OrganizationsApiAddOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganization(requestParameters = {}) {
            return localVarFp.addOrganization(requestParameters.AddOrganizationRequest).then((request) => request(axios, basePath));
        },
        /**
         * Adds a follower to an organization.
         * @summary Add a follower to an organization
         * @param {OrganizationsApiAddOrganizationFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganizationFollower(requestParameters) {
            return localVarFp.addOrganizationFollower(requestParameters.id, requestParameters.AddOrganizationFollowerRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete an organization
         * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganization(requestParameters) {
            return localVarFp.deleteOrganization(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
         * @summary Delete a follower from an organization
         * @param {OrganizationsApiDeleteOrganizationFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizationFollower(requestParameters) {
            return localVarFp.deleteOrganizationFollower(requestParameters.id, requestParameters.follower_id).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
         * @summary Delete multiple organizations in bulk
         * @param {OrganizationsApiDeleteOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizations(requestParameters) {
            return localVarFp.deleteOrganizations(requestParameters.ids).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
         * @summary Get details of an organization
         * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganization(requestParameters) {
            return localVarFp.getOrganization(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Lists activities associated with an organization.
         * @summary List activities associated with an organization
         * @param {OrganizationsApiGetOrganizationActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationActivities(requestParameters) {
            return localVarFp.getOrganizationActivities(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.done, requestParameters.exclude).then((request) => request(axios, basePath));
        },
        /**
         * Lists updates about field values of an organization.
         * @summary List updates about organization field values
         * @param {OrganizationsApiGetOrganizationChangelogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationChangelog(requestParameters) {
            return localVarFp.getOrganizationChangelog(requestParameters.id, requestParameters.cursor, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Lists deals associated with an organization.
         * @summary List deals associated with an organization
         * @param {OrganizationsApiGetOrganizationDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationDeals(requestParameters) {
            return localVarFp.getOrganizationDeals(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.status, requestParameters.sort, requestParameters.only_primary_association).then((request) => request(axios, basePath));
        },
        /**
         * Lists files associated with an organization.
         * @summary List files attached to an organization
         * @param {OrganizationsApiGetOrganizationFilesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFiles(requestParameters) {
            return localVarFp.getOrganizationFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort).then((request) => request(axios, basePath));
        },
        /**
         * Lists the followers of an organization.
         * @summary List followers of an organization
         * @param {OrganizationsApiGetOrganizationFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFollowers(requestParameters) {
            return localVarFp.getOrganizationFollowers(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Lists mail messages associated with an organization.
         * @summary List mail messages associated with an organization
         * @param {OrganizationsApiGetOrganizationMailMessagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationMailMessages(requestParameters) {
            return localVarFp.getOrganizationMailMessages(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List persons of an organization
         * @param {OrganizationsApiGetOrganizationPersonsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationPersons(requestParameters) {
            return localVarFp.getOrganizationPersons(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Lists updates about an organization.
         * @summary List updates about an organization
         * @param {OrganizationsApiGetOrganizationUpdatesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationUpdates(requestParameters) {
            return localVarFp.getOrganizationUpdates(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.all_changes, requestParameters.items).then((request) => request(axios, basePath));
        },
        /**
         * List users permitted to access an organization.
         * @summary List permitted users
         * @param {OrganizationsApiGetOrganizationUsersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationUsers(requestParameters) {
            return localVarFp.getOrganizationUsers(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all organizations.
         * @summary Get all organizations
         * @param {OrganizationsApiGetOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizations(requestParameters = {}) {
            return localVarFp.getOrganizations(requestParameters.user_id, requestParameters.filter_id, requestParameters.first_char, requestParameters.start, requestParameters.limit, requestParameters.sort).then((request) => request(axios, basePath));
        },
        /**
         * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all organizations (BETA)
         * @param {OrganizationsApiGetOrganizationsCollectionRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationsCollection(requestParameters = {}) {
            return localVarFp.getOrganizationsCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.owner_id, requestParameters.first_char).then((request) => request(axios, basePath));
        },
        /**
         * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
         * @summary Merge two organizations
         * @param {OrganizationsApiMergeOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        mergeOrganizations(requestParameters) {
            return localVarFp.mergeOrganizations(requestParameters.id, requestParameters.MergeOrganizationsRequest).then((request) => request(axios, basePath));
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {OrganizationsApiSearchOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchOrganization(requestParameters) {
            return localVarFp.searchOrganization(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of an organization.
         * @summary Update an organization
         * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateOrganization(requestParameters) {
            return localVarFp.updateOrganization(requestParameters.id, requestParameters.UpdateOrganizationRequest).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
     * @summary Add an organization
     * @param {OrganizationsApiAddOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    addOrganization(requestParameters = {}) {
        return OrganizationsApiFp(this.configuration).addOrganization(requestParameters.AddOrganizationRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a follower to an organization.
     * @summary Add a follower to an organization
     * @param {OrganizationsApiAddOrganizationFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    addOrganizationFollower(requestParameters) {
        return OrganizationsApiFp(this.configuration).addOrganizationFollower(requestParameters.id, requestParameters.AddOrganizationFollowerRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
     * @summary Delete an organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganization(requestParameters) {
        return OrganizationsApiFp(this.configuration).deleteOrganization(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
     * @summary Delete a follower from an organization
     * @param {OrganizationsApiDeleteOrganizationFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganizationFollower(requestParameters) {
        return OrganizationsApiFp(this.configuration).deleteOrganizationFollower(requestParameters.id, requestParameters.follower_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
     * @summary Delete multiple organizations in bulk
     * @param {OrganizationsApiDeleteOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganizations(requestParameters) {
        return OrganizationsApiFp(this.configuration).deleteOrganizations(requestParameters.ids).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
     * @summary Get details of an organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganization(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists activities associated with an organization.
     * @summary List activities associated with an organization
     * @param {OrganizationsApiGetOrganizationActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationActivities(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationActivities(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.done, requestParameters.exclude).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists updates about field values of an organization.
     * @summary List updates about organization field values
     * @param {OrganizationsApiGetOrganizationChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationChangelog(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationChangelog(requestParameters.id, requestParameters.cursor, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists deals associated with an organization.
     * @summary List deals associated with an organization
     * @param {OrganizationsApiGetOrganizationDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationDeals(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationDeals(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.status, requestParameters.sort, requestParameters.only_primary_association).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists files associated with an organization.
     * @summary List files attached to an organization
     * @param {OrganizationsApiGetOrganizationFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationFiles(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the followers of an organization.
     * @summary List followers of an organization
     * @param {OrganizationsApiGetOrganizationFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationFollowers(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationFollowers(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists mail messages associated with an organization.
     * @summary List mail messages associated with an organization
     * @param {OrganizationsApiGetOrganizationMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationMailMessages(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationMailMessages(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List persons of an organization
     * @param {OrganizationsApiGetOrganizationPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationPersons(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationPersons(requestParameters.id, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists updates about an organization.
     * @summary List updates about an organization
     * @param {OrganizationsApiGetOrganizationUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationUpdates(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationUpdates(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.all_changes, requestParameters.items).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List users permitted to access an organization.
     * @summary List permitted users
     * @param {OrganizationsApiGetOrganizationUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationUsers(requestParameters) {
        return OrganizationsApiFp(this.configuration).getOrganizationUsers(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all organizations.
     * @summary Get all organizations
     * @param {OrganizationsApiGetOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizations(requestParameters = {}) {
        return OrganizationsApiFp(this.configuration).getOrganizations(requestParameters.user_id, requestParameters.filter_id, requestParameters.first_char, requestParameters.start, requestParameters.limit, requestParameters.sort).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all organizations (BETA)
     * @param {OrganizationsApiGetOrganizationsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationsCollection(requestParameters = {}) {
        return OrganizationsApiFp(this.configuration).getOrganizationsCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.owner_id, requestParameters.first_char).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
     * @summary Merge two organizations
     * @param {OrganizationsApiMergeOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    mergeOrganizations(requestParameters) {
        return OrganizationsApiFp(this.configuration).mergeOrganizations(requestParameters.id, requestParameters.MergeOrganizationsRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search organizations
     * @param {OrganizationsApiSearchOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    searchOrganization(requestParameters) {
        return OrganizationsApiFp(this.configuration).searchOrganization(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of an organization.
     * @summary Update an organization
     * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganization(requestParameters) {
        return OrganizationsApiFp(this.configuration).updateOrganization(requestParameters.id, requestParameters.UpdateOrganizationRequest).then((request) => request(this.axios, this.basePath));
    }
}
