/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * PipelinesApi - axios parameter creator
 * @export
 */
export const PipelinesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {PipelineRequest} [PipelineRequest]

         * @throws {RequiredError}
         */
        addPipeline: (PipelineRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(PipelineRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        deletePipeline: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePipeline', 'id', id);
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
         * @summary Get one pipeline
         * @param {number} id The ID of the pipeline
         * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.

         * @throws {RequiredError}
         */
        getPipeline: (id, totals_convert_currency) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPipeline', 'id', id);
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            if (totals_convert_currency !== undefined) {
                localVarQueryParameter['totals_convert_currency'] = totals_convert_currency;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
         * @summary Get deals conversion rates in pipeline
         * @param {number} id The ID of the pipeline
         * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
         * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
         * @param {number} [user_id] The ID of the user who\&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.

         * @throws {RequiredError}
         */
        getPipelineConversionStatistics: (id, start_date, end_date, user_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPipelineConversionStatistics', 'id', id);
            // verify required parameter 'start_date' is not null or undefined
            assertParamExists('getPipelineConversionStatistics', 'start_date', start_date);
            // verify required parameter 'end_date' is not null or undefined
            assertParamExists('getPipelineConversionStatistics', 'end_date', end_date);
            const localVarPath = `/pipelines/{id}/conversion_statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date instanceof Date) ?
                    start_date.toISOString().substr(0, 10) :
                    start_date;
            }
            if (end_date !== undefined) {
                localVarQueryParameter['end_date'] = (end_date instanceof Date) ?
                    end_date.toISOString().substr(0, 10) :
                    end_date;
            }
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
         * @summary Get deals in a pipeline
         * @param {number} id The ID of the pipeline
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
         * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
         * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [get_summary] Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
         * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.

         * @throws {RequiredError}
         */
        getPipelineDeals: (id, filter_id, user_id, everyone, stage_id, start, limit, get_summary, totals_convert_currency) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPipelineDeals', 'id', id);
            const localVarPath = `/pipelines/{id}/deals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            if (everyone !== undefined) {
                localVarQueryParameter['everyone'] = everyone;
            }
            if (stage_id !== undefined) {
                localVarQueryParameter['stage_id'] = stage_id;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (get_summary !== undefined) {
                localVarQueryParameter['get_summary'] = get_summary;
            }
            if (totals_convert_currency !== undefined) {
                localVarQueryParameter['totals_convert_currency'] = totals_convert_currency;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns statistics for deals movements for the given time period.
         * @summary Get deals movements in pipeline
         * @param {number} id The ID of the pipeline
         * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
         * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
         * @param {number} [user_id] The ID of the user who\&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.

         * @throws {RequiredError}
         */
        getPipelineMovementStatistics: (id, start_date, end_date, user_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPipelineMovementStatistics', 'id', id);
            // verify required parameter 'start_date' is not null or undefined
            assertParamExists('getPipelineMovementStatistics', 'start_date', start_date);
            // verify required parameter 'end_date' is not null or undefined
            assertParamExists('getPipelineMovementStatistics', 'end_date', end_date);
            const localVarPath = `/pipelines/{id}/movement_statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date instanceof Date) ?
                    start_date.toISOString().substr(0, 10) :
                    start_date;
            }
            if (end_date !== undefined) {
                localVarQueryParameter['end_date'] = (end_date instanceof Date) ?
                    end_date.toISOString().substr(0, 10) :
                    end_date;
            }
            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines

         * @throws {RequiredError}
         */
        getPipelines: () => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {number} id The ID of the pipeline
         * @param {PipelineRequest1} [PipelineRequest1]

         * @throws {RequiredError}
         */
        updatePipeline: (id, PipelineRequest1) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePipeline', 'id', id);
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(PipelineRequest1, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PipelinesApi - functional programming interface
 * @export
 */
export const PipelinesApiFp = function (configuration) {
    const localVarAxiosParamCreator = PipelinesApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {PipelineRequest} [PipelineRequest]

         * @throws {RequiredError}
         */
        addPipeline(PipelineRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPipeline(PipelineRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        deletePipeline(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deletePipeline(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
         * @summary Get one pipeline
         * @param {number} id The ID of the pipeline
         * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.

         * @throws {RequiredError}
         */
        getPipeline(id, totals_convert_currency) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipeline(id, totals_convert_currency);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
         * @summary Get deals conversion rates in pipeline
         * @param {number} id The ID of the pipeline
         * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
         * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
         * @param {number} [user_id] The ID of the user who\&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.

         * @throws {RequiredError}
         */
        getPipelineConversionStatistics(id, start_date, end_date, user_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipelineConversionStatistics(id, start_date, end_date, user_id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
         * @summary Get deals in a pipeline
         * @param {number} id The ID of the pipeline
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
         * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
         * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [get_summary] Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
         * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.

         * @throws {RequiredError}
         */
        getPipelineDeals(id, filter_id, user_id, everyone, stage_id, start, limit, get_summary, totals_convert_currency) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipelineDeals(id, filter_id, user_id, everyone, stage_id, start, limit, get_summary, totals_convert_currency);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns statistics for deals movements for the given time period.
         * @summary Get deals movements in pipeline
         * @param {number} id The ID of the pipeline
         * @param {string} start_date The start of the period. Date in format of YYYY-MM-DD.
         * @param {string} end_date The end of the period. Date in format of YYYY-MM-DD.
         * @param {number} [user_id] The ID of the user who\&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.

         * @throws {RequiredError}
         */
        getPipelineMovementStatistics(id, start_date, end_date, user_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipelineMovementStatistics(id, start_date, end_date, user_id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines

         * @throws {RequiredError}
         */
        getPipelines() {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPipelines();
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {number} id The ID of the pipeline
         * @param {PipelineRequest1} [PipelineRequest1]

         * @throws {RequiredError}
         */
        updatePipeline(id, PipelineRequest1) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updatePipeline(id, PipelineRequest1);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PipelinesApi - factory interface
 * @export
 */
export const PipelinesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PipelinesApiFp(configuration);
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addPipeline(requestParameters = {}) {
            return localVarFp.addPipeline(requestParameters.PipelineRequest).then((request) => request(axios, basePath));
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deletePipeline(requestParameters) {
            return localVarFp.deletePipeline(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
         * @summary Get one pipeline
         * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipeline(requestParameters) {
            return localVarFp.getPipeline(requestParameters.id, requestParameters.totals_convert_currency).then((request) => request(axios, basePath));
        },
        /**
         * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
         * @summary Get deals conversion rates in pipeline
         * @param {PipelinesApiGetPipelineConversionStatisticsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipelineConversionStatistics(requestParameters) {
            return localVarFp.getPipelineConversionStatistics(requestParameters.id, requestParameters.start_date, requestParameters.end_date, requestParameters.user_id).then((request) => request(axios, basePath));
        },
        /**
         * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
         * @summary Get deals in a pipeline
         * @param {PipelinesApiGetPipelineDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipelineDeals(requestParameters) {
            return localVarFp.getPipelineDeals(requestParameters.id, requestParameters.filter_id, requestParameters.user_id, requestParameters.everyone, requestParameters.stage_id, requestParameters.start, requestParameters.limit, requestParameters.get_summary, requestParameters.totals_convert_currency).then((request) => request(axios, basePath));
        },
        /**
         * Returns statistics for deals movements for the given time period.
         * @summary Get deals movements in pipeline
         * @param {PipelinesApiGetPipelineMovementStatisticsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipelineMovementStatistics(requestParameters) {
            return localVarFp.getPipelineMovementStatistics(requestParameters.id, requestParameters.start_date, requestParameters.end_date, requestParameters.user_id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines

         * @throws {RequiredError}
         */
        getPipelines() {
            return localVarFp.getPipelines().then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updatePipeline(requestParameters) {
            return localVarFp.updatePipeline(requestParameters.id, requestParameters.PipelineRequest1).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
export class PipelinesApi extends BaseAPI {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    addPipeline(requestParameters = {}) {
        return PipelinesApiFp(this.configuration).addPipeline(requestParameters.PipelineRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    deletePipeline(requestParameters) {
        return PipelinesApiFp(this.configuration).deletePipeline(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipeline(requestParameters) {
        return PipelinesApiFp(this.configuration).getPipeline(requestParameters.id, requestParameters.totals_convert_currency).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * @summary Get deals conversion rates in pipeline
     * @param {PipelinesApiGetPipelineConversionStatisticsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelineConversionStatistics(requestParameters) {
        return PipelinesApiFp(this.configuration).getPipelineConversionStatistics(requestParameters.id, requestParameters.start_date, requestParameters.end_date, requestParameters.user_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists deals in a specific pipeline across all its stages. If no parameters are provided open deals owned by the authorized user will be returned.
     * @summary Get deals in a pipeline
     * @param {PipelinesApiGetPipelineDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelineDeals(requestParameters) {
        return PipelinesApiFp(this.configuration).getPipelineDeals(requestParameters.id, requestParameters.filter_id, requestParameters.user_id, requestParameters.everyone, requestParameters.stage_id, requestParameters.start, requestParameters.limit, requestParameters.get_summary, requestParameters.totals_convert_currency).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns statistics for deals movements for the given time period.
     * @summary Get deals movements in pipeline
     * @param {PipelinesApiGetPipelineMovementStatisticsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelineMovementStatistics(requestParameters) {
        return PipelinesApiFp(this.configuration).getPipelineMovementStatistics(requestParameters.id, requestParameters.start_date, requestParameters.end_date, requestParameters.user_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    getPipelines() {
        return PipelinesApiFp(this.configuration).getPipelines().then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    updatePipeline(requestParameters) {
        return PipelinesApiFp(this.configuration).updatePipeline(requestParameters.id, requestParameters.PipelineRequest1).then((request) => request(this.axios, this.basePath));
    }
}
