/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * CallLogsApi - axios parameter creator
 * @export
 */
export const CallLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a new call log.
         * @summary Add a call log
         * @param {AddCallLogRequest} [AddCallLogRequest]

         * @throws {RequiredError}
         */
        addCallLog: (AddCallLogRequest) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/callLogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["phone-integration"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddCallLogRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
         * @summary Attach an audio file to the call log
         * @param {string} id The ID received when you create the call log
         * @param {File} file Audio file supported by the HTML5 specification

         * @throws {RequiredError}
         */
        addCallLogAudioFile: (id, file) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addCallLogAudioFile', 'id', id);
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addCallLogAudioFile', 'file', file);
            const localVarPath = `/callLogs/{id}/recordings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["phone-integration"], configuration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
         * @summary Delete a call log
         * @param {string} id The ID received when you create the call log

         * @throws {RequiredError}
         */
        deleteCallLog: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCallLog', 'id', id);
            const localVarPath = `/callLogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["phone-integration"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details of a specific call log.
         * @summary Get details of a call log
         * @param {string} id The ID received when you create the call log

         * @throws {RequiredError}
         */
        getCallLog: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCallLog', 'id', id);
            const localVarPath = `/callLogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["phone-integration"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all call logs assigned to a particular user.
         * @summary Get all call logs assigned to a particular user
         * @param {number} [start] Pagination start
         * @param {number} [limit] For pagination, the limit of entries to be returned. The upper limit is 50.

         * @throws {RequiredError}
         */
        getUserCallLogs: (start, limit) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/callLogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["phone-integration"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CallLogsApi - functional programming interface
 * @export
 */
export const CallLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = CallLogsApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a new call log.
         * @summary Add a call log
         * @param {AddCallLogRequest} [AddCallLogRequest]

         * @throws {RequiredError}
         */
        addCallLog(AddCallLogRequest) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addCallLog(AddCallLogRequest);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
         * @summary Attach an audio file to the call log
         * @param {string} id The ID received when you create the call log
         * @param {File} file Audio file supported by the HTML5 specification

         * @throws {RequiredError}
         */
        addCallLogAudioFile(id, file) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addCallLogAudioFile(id, file);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
         * @summary Delete a call log
         * @param {string} id The ID received when you create the call log

         * @throws {RequiredError}
         */
        deleteCallLog(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteCallLog(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns details of a specific call log.
         * @summary Get details of a call log
         * @param {string} id The ID received when you create the call log

         * @throws {RequiredError}
         */
        getCallLog(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCallLog(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns all call logs assigned to a particular user.
         * @summary Get all call logs assigned to a particular user
         * @param {number} [start] Pagination start
         * @param {number} [limit] For pagination, the limit of entries to be returned. The upper limit is 50.

         * @throws {RequiredError}
         */
        getUserCallLogs(start, limit) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserCallLogs(start, limit);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * CallLogsApi - factory interface
 * @export
 */
export const CallLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CallLogsApiFp(configuration);
    return {
        /**
         * Adds a new call log.
         * @summary Add a call log
         * @param {CallLogsApiAddCallLogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addCallLog(requestParameters = {}) {
            return localVarFp.addCallLog(requestParameters.AddCallLogRequest).then((request) => request(axios, basePath));
        },
        /**
         * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
         * @summary Attach an audio file to the call log
         * @param {CallLogsApiAddCallLogAudioFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addCallLogAudioFile(requestParameters) {
            return localVarFp.addCallLogAudioFile(requestParameters.id, requestParameters.file).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
         * @summary Delete a call log
         * @param {CallLogsApiDeleteCallLogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteCallLog(requestParameters) {
            return localVarFp.deleteCallLog(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of a specific call log.
         * @summary Get details of a call log
         * @param {CallLogsApiGetCallLogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getCallLog(requestParameters) {
            return localVarFp.getCallLog(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns all call logs assigned to a particular user.
         * @summary Get all call logs assigned to a particular user
         * @param {CallLogsApiGetUserCallLogsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserCallLogs(requestParameters = {}) {
            return localVarFp.getUserCallLogs(requestParameters.start, requestParameters.limit).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CallLogsApi - object-oriented interface
 * @export
 * @class CallLogsApi
 * @extends {BaseAPI}
 */
export class CallLogsApi extends BaseAPI {
    /**
     * Adds a new call log.
     * @summary Add a call log
     * @param {CallLogsApiAddCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    addCallLog(requestParameters = {}) {
        return CallLogsApiFp(this.configuration).addCallLog(requestParameters.AddCallLogRequest).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @summary Attach an audio file to the call log
     * @param {CallLogsApiAddCallLogAudioFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    addCallLogAudioFile(requestParameters) {
        return CallLogsApiFp(this.configuration).addCallLogAudioFile(requestParameters.id, requestParameters.file).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @summary Delete a call log
     * @param {CallLogsApiDeleteCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    deleteCallLog(requestParameters) {
        return CallLogsApiFp(this.configuration).deleteCallLog(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details of a specific call log.
     * @summary Get details of a call log
     * @param {CallLogsApiGetCallLogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    getCallLog(requestParameters) {
        return CallLogsApiFp(this.configuration).getCallLog(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all call logs assigned to a particular user.
     * @summary Get all call logs assigned to a particular user
     * @param {CallLogsApiGetUserCallLogsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof CallLogsApi
     */
    getUserCallLogs(requestParameters = {}) {
        return CallLogsApiFp(this.configuration).getUserCallLogs(requestParameters.start, requestParameters.limit).then((request) => request(this.axios, this.basePath));
    }
}
