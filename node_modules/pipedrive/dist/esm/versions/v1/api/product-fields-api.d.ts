/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteProductFieldResponse } from '../models';
import { DeleteProductFieldsResponse } from '../models';
import { GetProductFieldResponse } from '../models';
import { GetProductFieldsResponse } from '../models';
import { ProductFieldAllOf } from '../models';
import { UpdateProductFieldResponse } from '../models';
/**
 * ProductFieldsApi - axios parameter creator
 * @export
 */
export declare const ProductFieldsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new product field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new product field
     * @param {ProductFieldAllOf} [ProductFieldAllOf]

     * @throws {RequiredError}
     */
    addProductField: (ProductFieldAllOf?: ProductFieldAllOf) => Promise<RequestArgs>;
    /**
     * Marks a product field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a product field
     * @param {number} id The ID of the product field

     * @throws {RequiredError}
     */
    deleteProductField: (id: number) => Promise<RequestArgs>;
    /**
     * Marks multiple fields as deleted.
     * @summary Delete multiple product fields in bulk
     * @param {string} ids The comma-separated field IDs to delete

     * @throws {RequiredError}
     */
    deleteProductFields: (ids: string) => Promise<RequestArgs>;
    /**
     * Returns data about a specific product field.
     * @summary Get one product field
     * @param {number} id The ID of the product field

     * @throws {RequiredError}
     */
    getProductField: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about all product fields.
     * @summary Get all product fields
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getProductFields: (start?: number, limit?: number) => Promise<RequestArgs>;
    /**
     * Updates a product field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a product field
     * @param {number} id The ID of the product field
     * @param {UpdateProductFieldResponse} [UpdateProductFieldResponse]

     * @throws {RequiredError}
     */
    updateProductField: (id: number, UpdateProductFieldResponse?: UpdateProductFieldResponse) => Promise<RequestArgs>;
};
/**
 * ProductFieldsApi - functional programming interface
 * @export
 */
export declare const ProductFieldsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new product field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new product field
     * @param {ProductFieldAllOf} [ProductFieldAllOf]

     * @throws {RequiredError}
     */
    addProductField(ProductFieldAllOf?: ProductFieldAllOf): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductFieldResponse>>;
    /**
     * Marks a product field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a product field
     * @param {number} id The ID of the product field

     * @throws {RequiredError}
     */
    deleteProductField(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductFieldResponse>>;
    /**
     * Marks multiple fields as deleted.
     * @summary Delete multiple product fields in bulk
     * @param {string} ids The comma-separated field IDs to delete

     * @throws {RequiredError}
     */
    deleteProductFields(ids: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductFieldsResponse>>;
    /**
     * Returns data about a specific product field.
     * @summary Get one product field
     * @param {number} id The ID of the product field

     * @throws {RequiredError}
     */
    getProductField(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductFieldResponse>>;
    /**
     * Returns data about all product fields.
     * @summary Get all product fields
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page

     * @throws {RequiredError}
     */
    getProductFields(start?: number, limit?: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductFieldsResponse>>;
    /**
     * Updates a product field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a product field
     * @param {number} id The ID of the product field
     * @param {UpdateProductFieldResponse} [UpdateProductFieldResponse]

     * @throws {RequiredError}
     */
    updateProductField(id: number, UpdateProductFieldResponse?: UpdateProductFieldResponse): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductFieldResponse>>;
};
/**
 * ProductFieldsApi - factory interface
 * @export
 */
export declare const ProductFieldsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new product field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new product field
     * @param {ProductFieldsApiAddProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addProductField(requestParameters?: ProductFieldsApiAddProductFieldRequest): Promise<GetProductFieldResponse>;
    /**
     * Marks a product field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a product field
     * @param {ProductFieldsApiDeleteProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteProductField(requestParameters: ProductFieldsApiDeleteProductFieldRequest): Promise<DeleteProductFieldResponse>;
    /**
     * Marks multiple fields as deleted.
     * @summary Delete multiple product fields in bulk
     * @param {ProductFieldsApiDeleteProductFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteProductFields(requestParameters: ProductFieldsApiDeleteProductFieldsRequest): Promise<DeleteProductFieldsResponse>;
    /**
     * Returns data about a specific product field.
     * @summary Get one product field
     * @param {ProductFieldsApiGetProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProductField(requestParameters: ProductFieldsApiGetProductFieldRequest): Promise<GetProductFieldResponse>;
    /**
     * Returns data about all product fields.
     * @summary Get all product fields
     * @param {ProductFieldsApiGetProductFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getProductFields(requestParameters?: ProductFieldsApiGetProductFieldsRequest): Promise<GetProductFieldsResponse>;
    /**
     * Updates a product field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a product field
     * @param {ProductFieldsApiUpdateProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateProductField(requestParameters: ProductFieldsApiUpdateProductFieldRequest): Promise<GetProductFieldResponse>;
};
/**
 * Request parameters for addProductField operation in ProductFieldsApi.
 * @export
 * @interface ProductFieldsApiAddProductFieldRequest
 */
export interface ProductFieldsApiAddProductFieldRequest {
    /**
     *
     * @type {ProductFieldAllOf}
     * @memberof ProductFieldsApiAddProductField
     */
    readonly ProductFieldAllOf?: ProductFieldAllOf;
}
/**
 * Request parameters for deleteProductField operation in ProductFieldsApi.
 * @export
 * @interface ProductFieldsApiDeleteProductFieldRequest
 */
export interface ProductFieldsApiDeleteProductFieldRequest {
    /**
     * The ID of the product field
     * @type {number}
     * @memberof ProductFieldsApiDeleteProductField
     */
    readonly id: number;
}
/**
 * Request parameters for deleteProductFields operation in ProductFieldsApi.
 * @export
 * @interface ProductFieldsApiDeleteProductFieldsRequest
 */
export interface ProductFieldsApiDeleteProductFieldsRequest {
    /**
     * The comma-separated field IDs to delete
     * @type {string}
     * @memberof ProductFieldsApiDeleteProductFields
     */
    readonly ids: string;
}
/**
 * Request parameters for getProductField operation in ProductFieldsApi.
 * @export
 * @interface ProductFieldsApiGetProductFieldRequest
 */
export interface ProductFieldsApiGetProductFieldRequest {
    /**
     * The ID of the product field
     * @type {number}
     * @memberof ProductFieldsApiGetProductField
     */
    readonly id: number;
}
/**
 * Request parameters for getProductFields operation in ProductFieldsApi.
 * @export
 * @interface ProductFieldsApiGetProductFieldsRequest
 */
export interface ProductFieldsApiGetProductFieldsRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof ProductFieldsApiGetProductFields
     */
    readonly start?: number;
    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductFieldsApiGetProductFields
     */
    readonly limit?: number;
}
/**
 * Request parameters for updateProductField operation in ProductFieldsApi.
 * @export
 * @interface ProductFieldsApiUpdateProductFieldRequest
 */
export interface ProductFieldsApiUpdateProductFieldRequest {
    /**
     * The ID of the product field
     * @type {number}
     * @memberof ProductFieldsApiUpdateProductField
     */
    readonly id: number;
    /**
     *
     * @type {UpdateProductFieldResponse}
     * @memberof ProductFieldsApiUpdateProductField
     */
    readonly UpdateProductFieldResponse?: UpdateProductFieldResponse;
}
/**
 * ProductFieldsApi - object-oriented interface
 * @export
 * @class ProductFieldsApi
 * @extends {BaseAPI}
 */
export declare class ProductFieldsApi extends BaseAPI {
    /**
     * Adds a new product field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new product field
     * @param {ProductFieldsApiAddProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductFieldsApi
     */
    addProductField(requestParameters?: ProductFieldsApiAddProductFieldRequest): Promise<GetProductFieldResponse>;
    /**
     * Marks a product field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a product field
     * @param {ProductFieldsApiDeleteProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductFieldsApi
     */
    deleteProductField(requestParameters: ProductFieldsApiDeleteProductFieldRequest): Promise<DeleteProductFieldResponse>;
    /**
     * Marks multiple fields as deleted.
     * @summary Delete multiple product fields in bulk
     * @param {ProductFieldsApiDeleteProductFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductFieldsApi
     */
    deleteProductFields(requestParameters: ProductFieldsApiDeleteProductFieldsRequest): Promise<DeleteProductFieldsResponse>;
    /**
     * Returns data about a specific product field.
     * @summary Get one product field
     * @param {ProductFieldsApiGetProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductFieldsApi
     */
    getProductField(requestParameters: ProductFieldsApiGetProductFieldRequest): Promise<GetProductFieldResponse>;
    /**
     * Returns data about all product fields.
     * @summary Get all product fields
     * @param {ProductFieldsApiGetProductFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductFieldsApi
     */
    getProductFields(requestParameters?: ProductFieldsApiGetProductFieldsRequest): Promise<GetProductFieldsResponse>;
    /**
     * Updates a product field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a product field
     * @param {ProductFieldsApiUpdateProductFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductFieldsApi
     */
    updateProductField(requestParameters: ProductFieldsApiUpdateProductFieldRequest): Promise<GetProductFieldResponse>;
}
