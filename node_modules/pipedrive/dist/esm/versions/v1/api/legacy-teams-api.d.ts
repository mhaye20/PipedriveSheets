/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddTeamRequest1 } from '../models';
import { AddTeamUserRequest } from '../models';
import { DeleteTeamUserRequest } from '../models';
import { GetTeamResponse } from '../models';
import { GetTeamsResponse } from '../models';
import { UpdateTeamRequest } from '../models';
import { UserIds } from '../models';
/**
 * LegacyTeamsApi - axios parameter creator
 * @export
 */
export declare const LegacyTeamsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {AddTeamRequest1} [AddTeamRequest1]
     * @deprecated
     * @throws {RequiredError}
     */
    addTeam: (AddTeamRequest1?: AddTeamRequest1) => Promise<RequestArgs>;
    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {number} id The ID of the team
     * @param {AddTeamUserRequest} [AddTeamUserRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    addTeamUser: (id: number, AddTeamUserRequest?: AddTeamUserRequest) => Promise<RequestArgs>;
    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {number} id The ID of the team
     * @param {DeleteTeamUserRequest} [DeleteTeamUserRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    deleteTeamUser: (id: number, DeleteTeamUserRequest?: DeleteTeamUserRequest) => Promise<RequestArgs>;
    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {number} id The ID of the team
     * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
     * @deprecated
     * @throws {RequiredError}
     */
    getTeam: (id: number, skip_users?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {number} id The ID of the team
     * @deprecated
     * @throws {RequiredError}
     */
    getTeamUsers: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
     * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
     * @deprecated
     * @throws {RequiredError}
     */
    getTeams: (order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {number} id The ID of the user
     * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
     * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
     * @deprecated
     * @throws {RequiredError}
     */
    getUserTeams: (id: number, order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1) => Promise<RequestArgs>;
    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {number} id The ID of the team
     * @param {UpdateTeamRequest} [UpdateTeamRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    updateTeam: (id: number, UpdateTeamRequest?: UpdateTeamRequest) => Promise<RequestArgs>;
};
/**
 * LegacyTeamsApi - functional programming interface
 * @export
 */
export declare const LegacyTeamsApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {AddTeamRequest1} [AddTeamRequest1]
     * @deprecated
     * @throws {RequiredError}
     */
    addTeam(AddTeamRequest1?: AddTeamRequest1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamResponse>>;
    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {number} id The ID of the team
     * @param {AddTeamUserRequest} [AddTeamUserRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    addTeamUser(id: number, AddTeamUserRequest?: AddTeamUserRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>>;
    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {number} id The ID of the team
     * @param {DeleteTeamUserRequest} [DeleteTeamUserRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    deleteTeamUser(id: number, DeleteTeamUserRequest?: DeleteTeamUserRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>>;
    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {number} id The ID of the team
     * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
     * @deprecated
     * @throws {RequiredError}
     */
    getTeam(id: number, skip_users?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamResponse>>;
    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {number} id The ID of the team
     * @deprecated
     * @throws {RequiredError}
     */
    getTeamUsers(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>>;
    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
     * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
     * @deprecated
     * @throws {RequiredError}
     */
    getTeams(order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamsResponse>>;
    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {number} id The ID of the user
     * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
     * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
     * @deprecated
     * @throws {RequiredError}
     */
    getUserTeams(id: number, order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamsResponse>>;
    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {number} id The ID of the team
     * @param {UpdateTeamRequest} [UpdateTeamRequest]
     * @deprecated
     * @throws {RequiredError}
     */
    updateTeam(id: number, UpdateTeamRequest?: UpdateTeamRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamResponse>>;
};
/**
 * LegacyTeamsApi - factory interface
 * @export
 */
export declare const LegacyTeamsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {LegacyTeamsApiAddTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    addTeam(requestParameters?: LegacyTeamsApiAddTeamRequest): Promise<GetTeamResponse>;
    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {LegacyTeamsApiAddTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    addTeamUser(requestParameters: LegacyTeamsApiAddTeamUserRequest): Promise<UserIds>;
    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {LegacyTeamsApiDeleteTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteTeamUser(requestParameters: LegacyTeamsApiDeleteTeamUserRequest): Promise<UserIds>;
    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {LegacyTeamsApiGetTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    getTeam(requestParameters: LegacyTeamsApiGetTeamRequest): Promise<GetTeamResponse>;
    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {LegacyTeamsApiGetTeamUsersRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    getTeamUsers(requestParameters: LegacyTeamsApiGetTeamUsersRequest): Promise<UserIds>;
    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {LegacyTeamsApiGetTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    getTeams(requestParameters?: LegacyTeamsApiGetTeamsRequest): Promise<GetTeamsResponse>;
    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {LegacyTeamsApiGetUserTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    getUserTeams(requestParameters: LegacyTeamsApiGetUserTeamsRequest): Promise<GetTeamsResponse>;
    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {LegacyTeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     */
    updateTeam(requestParameters: LegacyTeamsApiUpdateTeamRequest): Promise<GetTeamResponse>;
};
/**
 * Request parameters for addTeam operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiAddTeamRequest
 */
export interface LegacyTeamsApiAddTeamRequest {
    /**
     *
     * @type {AddTeamRequest1}
     * @memberof LegacyTeamsApiAddTeam
     */
    readonly AddTeamRequest1?: AddTeamRequest1;
}
/**
 * Request parameters for addTeamUser operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiAddTeamUserRequest
 */
export interface LegacyTeamsApiAddTeamUserRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiAddTeamUser
     */
    readonly id: number;
    /**
     *
     * @type {AddTeamUserRequest}
     * @memberof LegacyTeamsApiAddTeamUser
     */
    readonly AddTeamUserRequest?: AddTeamUserRequest;
}
/**
 * Request parameters for deleteTeamUser operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiDeleteTeamUserRequest
 */
export interface LegacyTeamsApiDeleteTeamUserRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiDeleteTeamUser
     */
    readonly id: number;
    /**
     *
     * @type {DeleteTeamUserRequest}
     * @memberof LegacyTeamsApiDeleteTeamUser
     */
    readonly DeleteTeamUserRequest?: DeleteTeamUserRequest;
}
/**
 * Request parameters for getTeam operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetTeamRequest
 */
export interface LegacyTeamsApiGetTeamRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiGetTeam
     */
    readonly id: number;
    /**
     * When enabled, the teams will not include IDs of member users
     * @type {0 | 1}
     * @memberof LegacyTeamsApiGetTeam
     */
    readonly skip_users?: 0 | 1;
}
/**
 * Request parameters for getTeamUsers operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetTeamUsersRequest
 */
export interface LegacyTeamsApiGetTeamUsersRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiGetTeamUsers
     */
    readonly id: number;
}
/**
 * Request parameters for getTeams operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetTeamsRequest
 */
export interface LegacyTeamsApiGetTeamsRequest {
    /**
     * The field name to sort returned teams by
     * @type {'id' | 'name' | 'manager_id' | 'active_flag'}
     * @memberof LegacyTeamsApiGetTeams
     */
    readonly order_by?: 'id' | 'name' | 'manager_id' | 'active_flag';
    /**
     * When enabled, the teams will not include IDs of member users
     * @type {0 | 1}
     * @memberof LegacyTeamsApiGetTeams
     */
    readonly skip_users?: 0 | 1;
}
/**
 * Request parameters for getUserTeams operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetUserTeamsRequest
 */
export interface LegacyTeamsApiGetUserTeamsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof LegacyTeamsApiGetUserTeams
     */
    readonly id: number;
    /**
     * The field name to sort returned teams by
     * @type {'id' | 'name' | 'manager_id' | 'active_flag'}
     * @memberof LegacyTeamsApiGetUserTeams
     */
    readonly order_by?: 'id' | 'name' | 'manager_id' | 'active_flag';
    /**
     * When enabled, the teams will not include IDs of member users
     * @type {0 | 1}
     * @memberof LegacyTeamsApiGetUserTeams
     */
    readonly skip_users?: 0 | 1;
}
/**
 * Request parameters for updateTeam operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiUpdateTeamRequest
 */
export interface LegacyTeamsApiUpdateTeamRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiUpdateTeam
     */
    readonly id: number;
    /**
     *
     * @type {UpdateTeamRequest}
     * @memberof LegacyTeamsApiUpdateTeam
     */
    readonly UpdateTeamRequest?: UpdateTeamRequest;
}
/**
 * LegacyTeamsApi - object-oriented interface
 * @export
 * @class LegacyTeamsApi
 * @extends {BaseAPI}
 */
export declare class LegacyTeamsApi extends BaseAPI {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {LegacyTeamsApiAddTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    addTeam(requestParameters?: LegacyTeamsApiAddTeamRequest): Promise<GetTeamResponse>;
    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {LegacyTeamsApiAddTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    addTeamUser(requestParameters: LegacyTeamsApiAddTeamUserRequest): Promise<UserIds>;
    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {LegacyTeamsApiDeleteTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    deleteTeamUser(requestParameters: LegacyTeamsApiDeleteTeamUserRequest): Promise<UserIds>;
    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {LegacyTeamsApiGetTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getTeam(requestParameters: LegacyTeamsApiGetTeamRequest): Promise<GetTeamResponse>;
    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {LegacyTeamsApiGetTeamUsersRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getTeamUsers(requestParameters: LegacyTeamsApiGetTeamUsersRequest): Promise<UserIds>;
    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {LegacyTeamsApiGetTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getTeams(requestParameters?: LegacyTeamsApiGetTeamsRequest): Promise<GetTeamsResponse>;
    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {LegacyTeamsApiGetUserTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    getUserTeams(requestParameters: LegacyTeamsApiGetUserTeamsRequest): Promise<GetTeamsResponse>;
    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {LegacyTeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    updateTeam(requestParameters: LegacyTeamsApiUpdateTeamRequest): Promise<GetTeamResponse>;
}
