/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
         * @summary Add file
         * @param {File} file A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
         * @param {number} [deal_id] The ID of the deal to associate file(s) with
         * @param {number} [person_id] The ID of the person to associate file(s) with
         * @param {number} [org_id] The ID of the organization to associate file(s) with
         * @param {number} [product_id] The ID of the product to associate file(s) with
         * @param {number} [activity_id] The ID of the activity to associate file(s) with
         * @param {string} [lead_id] The ID of the lead to associate file(s) with

         * @throws {RequiredError}
         */
        addFile: (file, deal_id, person_id, org_id, product_id, activity_id, lead_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addFile', 'file', file);
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (deal_id !== undefined) {
                localVarFormParams.append('deal_id', deal_id);
            }
            if (person_id !== undefined) {
                localVarFormParams.append('person_id', person_id);
            }
            if (org_id !== undefined) {
                localVarFormParams.append('org_id', org_id);
            }
            if (product_id !== undefined) {
                localVarFormParams.append('product_id', product_id);
            }
            if (activity_id !== undefined) {
                localVarFormParams.append('activity_id', activity_id);
            }
            if (lead_id !== undefined) {
                localVarFormParams.append('lead_id', lead_id);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Create a remote file and link it to an item
         * @param {string} file_type The file type
         * @param {string} title The title of the file
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        addFileAndLinkIt: (file_type, title, item_type, item_id, remote_location) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'file_type' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'file_type', file_type);
            // verify required parameter 'title' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'title', title);
            // verify required parameter 'item_type' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'item_type', item_type);
            // verify required parameter 'item_id' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'item_id', item_id);
            // verify required parameter 'remote_location' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'remote_location', remote_location);
            const localVarPath = `/files/remote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            if (file_type !== undefined) {
                localVarFormParams.set('file_type', file_type);
            }
            if (title !== undefined) {
                localVarFormParams.set('title', title);
            }
            if (item_type !== undefined) {
                localVarFormParams.set('item_type', item_type);
            }
            if (item_id !== undefined) {
                localVarFormParams.set('item_id', item_id);
            }
            if (remote_location !== undefined) {
                localVarFormParams.set('remote_location', remote_location);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a file as deleted. After 30 days, the file will be permanently deleted.
         * @summary Delete a file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        deleteFile: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFile', 'id', id);
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Initializes a file download.
         * @summary Download one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        downloadFile: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadFile', 'id', id);
            const localVarPath = `/files/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about a specific file.
         * @summary Get one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        getFile: (id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFile', 'id', id);
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns data about all files.
         * @summary Get all files
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
         * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

         * @throws {RequiredError}
         */
        getFiles: (start, limit, sort) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Link a remote file to an item
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_id The remote item ID
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        linkFileToItem: (item_type, item_id, remote_id, remote_location) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'item_type' is not null or undefined
            assertParamExists('linkFileToItem', 'item_type', item_type);
            // verify required parameter 'item_id' is not null or undefined
            assertParamExists('linkFileToItem', 'item_id', item_id);
            // verify required parameter 'remote_id' is not null or undefined
            assertParamExists('linkFileToItem', 'remote_id', remote_id);
            // verify required parameter 'remote_location' is not null or undefined
            assertParamExists('linkFileToItem', 'remote_location', remote_location);
            const localVarPath = `/files/remoteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            if (item_type !== undefined) {
                localVarFormParams.set('item_type', item_type);
            }
            if (item_id !== undefined) {
                localVarFormParams.set('item_id', item_id);
            }
            if (remote_id !== undefined) {
                localVarFormParams.set('remote_id', remote_id);
            }
            if (remote_location !== undefined) {
                localVarFormParams.set('remote_location', remote_location);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the properties of a file.
         * @summary Update file details
         * @param {number} id The ID of the file
         * @param {string} [name] The visible name of the file
         * @param {string} [description] The description of the file

         * @throws {RequiredError}
         */
        updateFile: (id, name, description) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFile', 'id', id);
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration);
            if (name !== undefined) {
                localVarFormParams.set('name', name);
            }
            if (description !== undefined) {
                localVarFormParams.set('description', description);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function (configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration);
    return {
        /**
         * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
         * @summary Add file
         * @param {File} file A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
         * @param {number} [deal_id] The ID of the deal to associate file(s) with
         * @param {number} [person_id] The ID of the person to associate file(s) with
         * @param {number} [org_id] The ID of the organization to associate file(s) with
         * @param {number} [product_id] The ID of the product to associate file(s) with
         * @param {number} [activity_id] The ID of the activity to associate file(s) with
         * @param {string} [lead_id] The ID of the lead to associate file(s) with

         * @throws {RequiredError}
         */
        addFile(file, deal_id, person_id, org_id, product_id, activity_id, lead_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFile(file, deal_id, person_id, org_id, product_id, activity_id, lead_id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Create a remote file and link it to an item
         * @param {string} file_type The file type
         * @param {string} title The title of the file
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        addFileAndLinkIt(file_type, title, item_type, item_id, remote_location) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFileAndLinkIt(file_type, title, item_type, item_id, remote_location);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Marks a file as deleted. After 30 days, the file will be permanently deleted.
         * @summary Delete a file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        deleteFile(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Initializes a file download.
         * @summary Download one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        downloadFile(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about a specific file.
         * @summary Get one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        getFile(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFile(id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Returns data about all files.
         * @summary Get all files
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page. Please note that a maximum value of 100 is allowed.
         * @param {string} [sort] Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;

         * @throws {RequiredError}
         */
        getFiles(start, limit, sort) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFiles(start, limit, sort);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Link a remote file to an item
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_id The remote item ID
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        linkFileToItem(item_type, item_id, remote_id, remote_location) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.linkFileToItem(item_type, item_id, remote_id, remote_location);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Updates the properties of a file.
         * @summary Update file details
         * @param {number} id The ID of the file
         * @param {string} [name] The visible name of the file
         * @param {string} [description] The description of the file

         * @throws {RequiredError}
         */
        updateFile(id, name, description) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateFile(id, name, description);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FilesApiFp(configuration);
    return {
        /**
         * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
         * @summary Add file
         * @param {FilesApiAddFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addFile(requestParameters) {
            return localVarFp.addFile(requestParameters.file, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.product_id, requestParameters.activity_id, requestParameters.lead_id).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Create a remote file and link it to an item
         * @param {FilesApiAddFileAndLinkItRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addFileAndLinkIt(requestParameters) {
            return localVarFp.addFileAndLinkIt(requestParameters.file_type, requestParameters.title, requestParameters.item_type, requestParameters.item_id, requestParameters.remote_location).then((request) => request(axios, basePath));
        },
        /**
         * Marks a file as deleted. After 30 days, the file will be permanently deleted.
         * @summary Delete a file
         * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteFile(requestParameters) {
            return localVarFp.deleteFile(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Initializes a file download.
         * @summary Download one file
         * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        downloadFile(requestParameters) {
            return localVarFp.downloadFile(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific file.
         * @summary Get one file
         * @param {FilesApiGetFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getFile(requestParameters) {
            return localVarFp.getFile(requestParameters.id).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all files.
         * @summary Get all files
         * @param {FilesApiGetFilesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getFiles(requestParameters = {}) {
            return localVarFp.getFiles(requestParameters.start, requestParameters.limit, requestParameters.sort).then((request) => request(axios, basePath));
        },
        /**
         * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Link a remote file to an item
         * @param {FilesApiLinkFileToItemRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        linkFileToItem(requestParameters) {
            return localVarFp.linkFileToItem(requestParameters.item_type, requestParameters.item_id, requestParameters.remote_id, requestParameters.remote_location).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a file.
         * @summary Update file details
         * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateFile(requestParameters) {
            return localVarFp.updateFile(requestParameters.id, requestParameters.name, requestParameters.description).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
     * @summary Add file
     * @param {FilesApiAddFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    addFile(requestParameters) {
        return FilesApiFp(this.configuration).addFile(requestParameters.file, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.product_id, requestParameters.activity_id, requestParameters.lead_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * @summary Create a remote file and link it to an item
     * @param {FilesApiAddFileAndLinkItRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    addFileAndLinkIt(requestParameters) {
        return FilesApiFp(this.configuration).addFileAndLinkIt(requestParameters.file_type, requestParameters.title, requestParameters.item_type, requestParameters.item_id, requestParameters.remote_location).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a file as deleted. After 30 days, the file will be permanently deleted.
     * @summary Delete a file
     * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    deleteFile(requestParameters) {
        return FilesApiFp(this.configuration).deleteFile(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initializes a file download.
     * @summary Download one file
     * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    downloadFile(requestParameters) {
        return FilesApiFp(this.configuration).downloadFile(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about a specific file.
     * @summary Get one file
     * @param {FilesApiGetFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    getFile(requestParameters) {
        return FilesApiFp(this.configuration).getFile(requestParameters.id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns data about all files.
     * @summary Get all files
     * @param {FilesApiGetFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    getFiles(requestParameters = {}) {
        return FilesApiFp(this.configuration).getFiles(requestParameters.start, requestParameters.limit, requestParameters.sort).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * @summary Link a remote file to an item
     * @param {FilesApiLinkFileToItemRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    linkFileToItem(requestParameters) {
        return FilesApiFp(this.configuration).linkFileToItem(requestParameters.item_type, requestParameters.item_id, requestParameters.remote_id, requestParameters.remote_location).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the properties of a file.
     * @summary Update file details
     * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    updateFile(requestParameters) {
        return FilesApiFp(this.configuration).updateFile(requestParameters.id, requestParameters.name, requestParameters.description).then((request) => request(this.axios, this.basePath));
    }
}
