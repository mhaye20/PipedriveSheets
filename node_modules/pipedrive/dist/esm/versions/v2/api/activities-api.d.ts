/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddActivityRequest } from '../models';
import { DeleteActivityResponse } from '../models';
import { GetActivitiesResponse } from '../models';
import { UpsertActivityResponse } from '../models';
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export declare const ActivitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new activity.
     * @summary Add a new activity
     * @param {AddActivityRequest} [AddActivityRequest]

     * @throws {RequiredError}
     */
    addActivity: (AddActivityRequest?: AddActivityRequest) => Promise<RequestArgs>;
    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {number} id The ID of the activity

     * @throws {RequiredError}
     */
    deleteActivity: (id: number) => Promise<RequestArgs>;
    /**
     * Returns data about all activities.
     * @summary Get all activities
     * @param {number} [filter_id] If supplied, only activities matching the specified filter are returned
     * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @param {number} [owner_id] If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.
     * @param {number} [deal_id] If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.
     * @param {string} [lead_id] If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.
     * @param {number} [person_id] If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.
     * @param {number} [org_id] If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.
     * @param {string} [updated_since] If set, only activities with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @param {string} [updated_until] If set, only activities with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getActivities: (filter_id?: number, ids?: string, owner_id?: number, deal_id?: number, lead_id?: string, person_id?: number, org_id?: number, updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'attendees', limit?: number, cursor?: string) => Promise<RequestArgs>;
    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {number} id The ID of the activity
     * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include

     * @throws {RequiredError}
     */
    getActivity: (id: number, include_fields?: 'attendees') => Promise<RequestArgs>;
    /**
     * Updates the properties of an activity.
     * @summary Update an activity
     * @param {number} id The ID of the activity
     * @param {AddActivityRequest} [AddActivityRequest]

     * @throws {RequiredError}
     */
    updateActivity: (id: number, AddActivityRequest?: AddActivityRequest) => Promise<RequestArgs>;
};
/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export declare const ActivitiesApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new activity.
     * @summary Add a new activity
     * @param {AddActivityRequest} [AddActivityRequest]

     * @throws {RequiredError}
     */
    addActivity(AddActivityRequest?: AddActivityRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityResponse>>;
    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {number} id The ID of the activity

     * @throws {RequiredError}
     */
    deleteActivity(id: number): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteActivityResponse>>;
    /**
     * Returns data about all activities.
     * @summary Get all activities
     * @param {number} [filter_id] If supplied, only activities matching the specified filter are returned
     * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @param {number} [owner_id] If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.
     * @param {number} [deal_id] If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.
     * @param {string} [lead_id] If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.
     * @param {number} [person_id] If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.
     * @param {number} [org_id] If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.
     * @param {string} [updated_since] If set, only activities with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @param {string} [updated_until] If set, only activities with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include
     * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

     * @throws {RequiredError}
     */
    getActivities(filter_id?: number, ids?: string, owner_id?: number, deal_id?: number, lead_id?: string, person_id?: number, org_id?: number, updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'attendees', limit?: number, cursor?: string): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivitiesResponse>>;
    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {number} id The ID of the activity
     * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include

     * @throws {RequiredError}
     */
    getActivity(id: number, include_fields?: 'attendees'): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityResponse>>;
    /**
     * Updates the properties of an activity.
     * @summary Update an activity
     * @param {number} id The ID of the activity
     * @param {AddActivityRequest} [AddActivityRequest]

     * @throws {RequiredError}
     */
    updateActivity(id: number, AddActivityRequest?: AddActivityRequest): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityResponse>>;
};
/**
 * ActivitiesApi - factory interface
 * @export
 */
export declare const ActivitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new activity.
     * @summary Add a new activity
     * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    addActivity(requestParameters?: ActivitiesApiAddActivityRequest): Promise<UpsertActivityResponse>;
    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    deleteActivity(requestParameters: ActivitiesApiDeleteActivityRequest): Promise<DeleteActivityResponse>;
    /**
     * Returns data about all activities.
     * @summary Get all activities
     * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getActivities(requestParameters?: ActivitiesApiGetActivitiesRequest): Promise<GetActivitiesResponse>;
    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    getActivity(requestParameters: ActivitiesApiGetActivityRequest): Promise<UpsertActivityResponse>;
    /**
     * Updates the properties of an activity.
     * @summary Update an activity
     * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     */
    updateActivity(requestParameters: ActivitiesApiUpdateActivityRequest): Promise<UpsertActivityResponse>;
};
/**
 * Request parameters for addActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiAddActivityRequest
 */
export interface ActivitiesApiAddActivityRequest {
    /**
     *
     * @type {AddActivityRequest}
     * @memberof ActivitiesApiAddActivity
     */
    readonly AddActivityRequest?: AddActivityRequest;
}
/**
 * Request parameters for deleteActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiDeleteActivityRequest
 */
export interface ActivitiesApiDeleteActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiDeleteActivity
     */
    readonly id: number;
}
/**
 * Request parameters for getActivities operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivitiesRequest
 */
export interface ActivitiesApiGetActivitiesRequest {
    /**
     * If supplied, only activities matching the specified filter are returned
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly filter_id?: number;
    /**
     * Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly ids?: string;
    /**
     * If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly owner_id?: number;
    /**
     * If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly deal_id?: number;
    /**
     * If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly lead_id?: string;
    /**
     * If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly person_id?: number;
    /**
     * If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly org_id?: number;
    /**
     * If set, only activities with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly updated_since?: string;
    /**
     * If set, only activities with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly updated_until?: string;
    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @type {'id' | 'update_time' | 'add_time'}
     * @memberof ActivitiesApiGetActivities
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time';
    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof ActivitiesApiGetActivities
     */
    readonly sort_direction?: 'asc' | 'desc';
    /**
     * Optional comma separated string array of additional fields to include
     * @type {'attendees'}
     * @memberof ActivitiesApiGetActivities
     */
    readonly include_fields?: 'attendees';
    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly limit?: number;
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly cursor?: string;
}
/**
 * Request parameters for getActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivityRequest
 */
export interface ActivitiesApiGetActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiGetActivity
     */
    readonly id: number;
    /**
     * Optional comma separated string array of additional fields to include
     * @type {'attendees'}
     * @memberof ActivitiesApiGetActivity
     */
    readonly include_fields?: 'attendees';
}
/**
 * Request parameters for updateActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiUpdateActivityRequest
 */
export interface ActivitiesApiUpdateActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiUpdateActivity
     */
    readonly id: number;
    /**
     *
     * @type {AddActivityRequest}
     * @memberof ActivitiesApiUpdateActivity
     */
    readonly AddActivityRequest?: AddActivityRequest;
}
/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export declare class ActivitiesApi extends BaseAPI {
    /**
     * Adds a new activity.
     * @summary Add a new activity
     * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    addActivity(requestParameters?: ActivitiesApiAddActivityRequest): Promise<UpsertActivityResponse>;
    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    deleteActivity(requestParameters: ActivitiesApiDeleteActivityRequest): Promise<DeleteActivityResponse>;
    /**
     * Returns data about all activities.
     * @summary Get all activities
     * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    getActivities(requestParameters?: ActivitiesApiGetActivitiesRequest): Promise<GetActivitiesResponse>;
    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    getActivity(requestParameters: ActivitiesApiGetActivityRequest): Promise<UpsertActivityResponse>;
    /**
     * Updates the properties of an activity.
     * @summary Update an activity
     * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    updateActivity(requestParameters: ActivitiesApiUpdateActivityRequest): Promise<UpsertActivityResponse>;
}
