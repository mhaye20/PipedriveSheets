/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * BetaApi - axios parameter creator
 * @export
 */
export const BetaApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Removes an installment from a deal.  Only available in Advanced and above plans.
         * @summary Delete an installment from a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment

         * @throws {RequiredError}
         */
        deleteInstallment: (id, installment_id) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInstallment', 'id', id);
            // verify required parameter 'installment_id' is not null or undefined
            assertParamExists('deleteInstallment', 'installment_id', installment_id);
            const localVarPath = `/deals/{id}/installments/{installment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"installment_id"}}`, encodeURIComponent(String(installment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists installments attached to a list of deals.  Only available in Advanced and above plans.
         * @summary List installments added to a list of deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'billing_date' | 'deal_id'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        getInstallments: (deal_ids, cursor, limit, sort_by, sort_direction) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'deal_ids' is not null or undefined
            assertParamExists('getInstallments', 'deal_ids', deal_ids);
            const localVarPath = `/deals/installments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            if (deal_ids) {
                localVarQueryParameter['deal_ids'] = deal_ids;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }
            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans.
         * @summary Add an installment to a deal
         * @param {number} id The ID of the deal
         * @param {AddInstallmentRequestBody} [AddInstallmentRequestBody]

         * @throws {RequiredError}
         */
        postInstallment: (id, AddInstallmentRequestBody) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postInstallment', 'id', id);
            const localVarPath = `/deals/{id}/installments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(AddInstallmentRequestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Edits an installment added to a deal.  Only available in Advanced and above plans.
         * @summary Update an installment added to a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment
         * @param {UpdateInstallmentRequestBody} [UpdateInstallmentRequestBody]

         * @throws {RequiredError}
         */
        updateInstallment: (id, installment_id, UpdateInstallmentRequestBody) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateInstallment', 'id', id);
            // verify required parameter 'installment_id' is not null or undefined
            assertParamExists('updateInstallment', 'installment_id', installment_id);
            const localVarPath = `/deals/{id}/installments/{installment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"installment_id"}}`, encodeURIComponent(String(installment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            yield setApiKeyToObject(localVarQueryParameter, "api_token", configuration);
            // authentication oauth2 required
            // oauth required
            yield setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateInstallmentRequestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BetaApi - functional programming interface
 * @export
 */
export const BetaApiFp = function (configuration) {
    const localVarAxiosParamCreator = BetaApiAxiosParamCreator(configuration);
    return {
        /**
         * Removes an installment from a deal.  Only available in Advanced and above plans.
         * @summary Delete an installment from a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment

         * @throws {RequiredError}
         */
        deleteInstallment(id, installment_id) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInstallment(id, installment_id);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Advanced and above plans.
         * @summary List installments added to a list of deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'billing_date' | 'deal_id'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        getInstallments(deal_ids, cursor, limit, sort_by, sort_direction) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInstallments(deal_ids, cursor, limit, sort_by, sort_direction);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans.
         * @summary Add an installment to a deal
         * @param {number} id The ID of the deal
         * @param {AddInstallmentRequestBody} [AddInstallmentRequestBody]

         * @throws {RequiredError}
         */
        postInstallment(id, AddInstallmentRequestBody) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postInstallment(id, AddInstallmentRequestBody);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Edits an installment added to a deal.  Only available in Advanced and above plans.
         * @summary Update an installment added to a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment
         * @param {UpdateInstallmentRequestBody} [UpdateInstallmentRequestBody]

         * @throws {RequiredError}
         */
        updateInstallment(id, installment_id, UpdateInstallmentRequestBody) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateInstallment(id, installment_id, UpdateInstallmentRequestBody);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * BetaApi - factory interface
 * @export
 */
export const BetaApiFactory = function (configuration, basePath, axios) {
    const localVarFp = BetaApiFp(configuration);
    return {
        /**
         * Removes an installment from a deal.  Only available in Advanced and above plans.
         * @summary Delete an installment from a deal
         * @param {BetaApiDeleteInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteInstallment(requestParameters) {
            return localVarFp.deleteInstallment(requestParameters.id, requestParameters.installment_id).then((request) => request(axios, basePath));
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Advanced and above plans.
         * @summary List installments added to a list of deals
         * @param {BetaApiGetInstallmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getInstallments(requestParameters) {
            return localVarFp.getInstallments(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction).then((request) => request(axios, basePath));
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans.
         * @summary Add an installment to a deal
         * @param {BetaApiPostInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        postInstallment(requestParameters) {
            return localVarFp.postInstallment(requestParameters.id, requestParameters.AddInstallmentRequestBody).then((request) => request(axios, basePath));
        },
        /**
         * Edits an installment added to a deal.  Only available in Advanced and above plans.
         * @summary Update an installment added to a deal
         * @param {BetaApiUpdateInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateInstallment(requestParameters) {
            return localVarFp.updateInstallment(requestParameters.id, requestParameters.installment_id, requestParameters.UpdateInstallmentRequestBody).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BetaApi - object-oriented interface
 * @export
 * @class BetaApi
 * @extends {BaseAPI}
 */
export class BetaApi extends BaseAPI {
    /**
     * Removes an installment from a deal.  Only available in Advanced and above plans.
     * @summary Delete an installment from a deal
     * @param {BetaApiDeleteInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    deleteInstallment(requestParameters) {
        return BetaApiFp(this.configuration).deleteInstallment(requestParameters.id, requestParameters.installment_id).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists installments attached to a list of deals.  Only available in Advanced and above plans.
     * @summary List installments added to a list of deals
     * @param {BetaApiGetInstallmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    getInstallments(requestParameters) {
        return BetaApiFp(this.configuration).getInstallments(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans.
     * @summary Add an installment to a deal
     * @param {BetaApiPostInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    postInstallment(requestParameters) {
        return BetaApiFp(this.configuration).postInstallment(requestParameters.id, requestParameters.AddInstallmentRequestBody).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Edits an installment added to a deal.  Only available in Advanced and above plans.
     * @summary Update an installment added to a deal
     * @param {BetaApiUpdateInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    updateInstallment(requestParameters) {
        return BetaApiFp(this.configuration).updateInstallment(requestParameters.id, requestParameters.installment_id, requestParameters.UpdateInstallmentRequestBody).then((request) => request(this.axios, this.basePath));
    }
}
